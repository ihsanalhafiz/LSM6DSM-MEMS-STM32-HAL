
LSM6DSM-MEMS-STM32-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a098  0800a098  0001a098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5fc  0800a5fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a604  0800a604  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a604  0800a604  0001a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a60c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200001e0  0800a7ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000032c  0800a7ec  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a180  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ba  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278b5  00000000  00000000  0003ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001184c  00000000  00000000  000665fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f38ca  00000000  00000000  00077e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec8  00000000  00000000  0016b764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a080 	.word	0x0800a080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a080 	.word	0x0800a080

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <lsm6dsm_read_reg>:
  *
  */
int32_t lsm6dsm_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	461a      	mov	r2, r3
 8001004:	460b      	mov	r3, r1
 8001006:	72fb      	strb	r3, [r7, #11]
 8001008:	4613      	mov	r3, r2
 800100a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685c      	ldr	r4, [r3, #4]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6898      	ldr	r0, [r3, #8]
 8001014:	893b      	ldrh	r3, [r7, #8]
 8001016:	7af9      	ldrb	r1, [r7, #11]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	47a0      	blx	r4
 800101c:	6178      	str	r0, [r7, #20]

  return ret;
 800101e:	697b      	ldr	r3, [r7, #20]
}
 8001020:	4618      	mov	r0, r3
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <lsm6dsm_write_reg>:
  *
  */
int32_t lsm6dsm_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	461a      	mov	r2, r3
 8001034:	460b      	mov	r3, r1
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	4613      	mov	r3, r2
 800103a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681c      	ldr	r4, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6898      	ldr	r0, [r3, #8]
 8001044:	893b      	ldrh	r3, [r7, #8]
 8001046:	7af9      	ldrb	r1, [r7, #11]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	47a0      	blx	r4
 800104c:	6178      	str	r0, [r7, #20]

  return ret;
 800104e:	697b      	ldr	r3, [r7, #20]
}
 8001050:	4618      	mov	r0, r3
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <lsm6dsm_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsm_from_fs2g_to_mg(int16_t lsb)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001084 <lsm6dsm_from_fs2g_to_mg+0x2c>
 8001072:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001076:	eeb0 0a67 	vmov.f32	s0, s15
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	3d79db23 	.word	0x3d79db23

08001088 <lsm6dsm_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsm_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010b4 <lsm6dsm_from_fs2000dps_to_mdps+0x2c>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	428c0000 	.word	0x428c0000

080010b8 <lsm6dsm_from_lsb_to_celsius>:

float_t lsm6dsm_from_lsb_to_celsius(int16_t lsb)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ce:	eddf 6a07 	vldr	s13, [pc, #28]	; 80010ec <lsm6dsm_from_lsb_to_celsius+0x34>
 80010d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80010da:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	43800000 	.word	0x43800000

080010f0 <lsm6dsm_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_xl_t val)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010fc:	f107 0208 	add.w	r2, r7, #8
 8001100:	2301      	movs	r3, #1
 8001102:	2110      	movs	r1, #16
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff77 	bl	8000ff8 <lsm6dsm_read_reg>
 800110a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <lsm6dsm_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	b2da      	uxtb	r2, r3
 800111a:	7a3b      	ldrb	r3, [r7, #8]
 800111c:	f362 0383 	bfi	r3, r2, #2, #2
 8001120:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	2301      	movs	r3, #1
 8001128:	2110      	movs	r1, #16
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff7c 	bl	8001028 <lsm6dsm_write_reg>
 8001130:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <lsm6dsm_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_xl_t val)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001148:	f107 0208 	add.w	r2, r7, #8
 800114c:	2301      	movs	r3, #1
 800114e:	2110      	movs	r1, #16
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff51 	bl	8000ff8 <lsm6dsm_read_reg>
 8001156:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <lsm6dsm_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	b2da      	uxtb	r2, r3
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	f362 1307 	bfi	r3, r2, #4, #4
 800116c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800116e:	f107 0208 	add.w	r2, r7, #8
 8001172:	2301      	movs	r3, #1
 8001174:	2110      	movs	r1, #16
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff56 	bl	8001028 <lsm6dsm_write_reg>
 800117c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lsm6dsm_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsm_fs_g_t val)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	2301      	movs	r3, #1
 800119a:	2111      	movs	r1, #17
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff2b 	bl	8000ff8 <lsm6dsm_read_reg>
 80011a2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10f      	bne.n	80011ca <lsm6dsm_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	7a3b      	ldrb	r3, [r7, #8]
 80011b4:	f362 0343 	bfi	r3, r2, #1, #3
 80011b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80011ba:	f107 0208 	add.w	r2, r7, #8
 80011be:	2301      	movs	r3, #1
 80011c0:	2111      	movs	r1, #17
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff30 	bl	8001028 <lsm6dsm_write_reg>
 80011c8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lsm6dsm_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsm_odr_g_t val)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	2301      	movs	r3, #1
 80011e6:	2111      	movs	r1, #17
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff05 	bl	8000ff8 <lsm6dsm_read_reg>
 80011ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <lsm6dsm_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	7a3b      	ldrb	r3, [r7, #8]
 8001200:	f362 1307 	bfi	r3, r2, #4, #4
 8001204:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001206:	f107 0208 	add.w	r2, r7, #8
 800120a:	2301      	movs	r3, #1
 800120c:	2111      	movs	r1, #17
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff0a 	bl	8001028 <lsm6dsm_write_reg>
 8001214:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <lsm6dsm_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	2301      	movs	r3, #1
 8001232:	2112      	movs	r1, #18
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fedf 	bl	8000ff8 <lsm6dsm_read_reg>
 800123a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <lsm6dsm_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7a3b      	ldrb	r3, [r7, #8]
 800124c:	f362 1386 	bfi	r3, r2, #6, #1
 8001250:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	2301      	movs	r3, #1
 8001258:	2112      	movs	r1, #18
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fee4 	bl	8001028 <lsm6dsm_write_reg>
 8001260:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lsm6dsm_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_status_reg_get(stmdev_ctx_t *ctx,
                               lsm6dsm_status_reg_t *val)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_STATUS_REG, (uint8_t *) val, 1);
 8001276:	2301      	movs	r3, #1
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	211e      	movs	r1, #30
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff febb 	bl	8000ff8 <lsm6dsm_read_reg>
 8001282:	60f8      	str	r0, [r7, #12]

  return ret;
 8001284:	68fb      	ldr	r3, [r7, #12]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <lsm6dsm_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUT_TEMP_L, buff, 2);
 8001298:	f107 0208 	add.w	r2, r7, #8
 800129c:	2302      	movs	r3, #2
 800129e:	2120      	movs	r1, #32
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fea9 	bl	8000ff8 <lsm6dsm_read_reg>
 80012a6:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80012a8:	7a7b      	ldrb	r3, [r7, #9]
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	7a3b      	ldrb	r3, [r7, #8]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <lsm6dsm_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_G, buff, 6);
 80012de:	f107 020c 	add.w	r2, r7, #12
 80012e2:	2306      	movs	r3, #6
 80012e4:	2122      	movs	r1, #34	; 0x22
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fe86 	bl	8000ff8 <lsm6dsm_read_reg>
 80012ec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b29a      	uxth	r2, r3
 8001302:	7b3b      	ldrb	r3, [r7, #12]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	b21a      	sxth	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3302      	adds	r3, #2
 8001316:	b212      	sxth	r2, r2
 8001318:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3302      	adds	r3, #2
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	b29b      	uxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b29a      	uxth	r2, r3
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3302      	adds	r3, #2
 8001334:	b212      	sxth	r2, r2
 8001336:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001338:	7c7a      	ldrb	r2, [r7, #17]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3304      	adds	r3, #4
 800133e:	b212      	sxth	r2, r2
 8001340:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3304      	adds	r3, #4
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29a      	uxth	r2, r3
 8001350:	7c3b      	ldrb	r3, [r7, #16]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4413      	add	r3, r2
 8001356:	b29a      	uxth	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	3304      	adds	r3, #4
 800135c:	b212      	sxth	r2, r2
 800135e:	801a      	strh	r2, [r3, #0]

  return ret;
 8001360:	697b      	ldr	r3, [r7, #20]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <lsm6dsm_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_OUTX_L_XL, buff, 6);
 8001374:	f107 020c 	add.w	r2, r7, #12
 8001378:	2306      	movs	r3, #6
 800137a:	2128      	movs	r1, #40	; 0x28
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fe3b 	bl	8000ff8 <lsm6dsm_read_reg>
 8001382:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	b21a      	sxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	b29b      	uxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b29a      	uxth	r2, r3
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3302      	adds	r3, #2
 80013ac:	b212      	sxth	r2, r2
 80013ae:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3302      	adds	r3, #2
 80013b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b29a      	uxth	r2, r3
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3302      	adds	r3, #2
 80013ca:	b212      	sxth	r2, r2
 80013cc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80013ce:	7c7a      	ldrb	r2, [r7, #17]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3304      	adds	r3, #4
 80013d4:	b212      	sxth	r2, r2
 80013d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3304      	adds	r3, #4
 80013dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	7c3b      	ldrb	r3, [r7, #16]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	b212      	sxth	r2, r2
 80013f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80013f6:	697b      	ldr	r3, [r7, #20]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <lsm6dsm_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_WHO_AM_I, buff, 1);
 800140a:	2301      	movs	r3, #1
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	210f      	movs	r1, #15
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fdf1 	bl	8000ff8 <lsm6dsm_read_reg>
 8001416:	60f8      	str	r0, [r7, #12]

  return ret;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <lsm6dsm_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800142c:	f107 0208 	add.w	r2, r7, #8
 8001430:	2301      	movs	r3, #1
 8001432:	2112      	movs	r1, #18
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fddf 	bl	8000ff8 <lsm6dsm_read_reg>
 800143a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	701a      	strb	r2, [r3, #0]

  return ret;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <lsm6dsm_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001460:	f107 0208 	add.w	r2, r7, #8
 8001464:	2301      	movs	r3, #1
 8001466:	2112      	movs	r1, #18
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fdc5 	bl	8000ff8 <lsm6dsm_read_reg>
 800146e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <lsm6dsm_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	7a3b      	ldrb	r3, [r7, #8]
 8001480:	f362 0382 	bfi	r3, r2, #2, #1
 8001484:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001486:	f107 0208 	add.w	r2, r7, #8
 800148a:	2301      	movs	r3, #1
 800148c:	2112      	movs	r1, #18
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fdca 	bl	8001028 <lsm6dsm_write_reg>
 8001494:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <lsm6dsm_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                     lsm6dsm_bw0_xl_t val)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	2301      	movs	r3, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fd9f 	bl	8000ff8 <lsm6dsm_read_reg>
 80014ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <lsm6dsm_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	7a3b      	ldrb	r3, [r7, #8]
 80014cc:	f362 0300 	bfi	r3, r2, #0, #1
 80014d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014d2:	f107 0208 	add.w	r2, r7, #8
 80014d6:	2301      	movs	r3, #1
 80014d8:	2110      	movs	r1, #16
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fda4 	bl	8001028 <lsm6dsm_write_reg>
 80014e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <lsm6dsm_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsm_input_composite_t val)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80014f8:	f107 0208 	add.w	r2, r7, #8
 80014fc:	2301      	movs	r3, #1
 80014fe:	2117      	movs	r1, #23
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fd79 	bl	8000ff8 <lsm6dsm_read_reg>
 8001506:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d120      	bne.n	8001550 <lsm6dsm_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	b2da      	uxtb	r2, r3
 8001518:	7a3b      	ldrb	r3, [r7, #8]
 800151a:	f362 03c3 	bfi	r3, r2, #3, #1
 800151e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	b2da      	uxtb	r2, r3
 8001528:	7a3b      	ldrb	r3, [r7, #8]
 800152a:	f362 1346 	bfi	r3, r2, #5, #2
 800152e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001530:	7a3b      	ldrb	r3, [r7, #8]
 8001532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001536:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001538:	7a3b      	ldrb	r3, [r7, #8]
 800153a:	f36f 0382 	bfc	r3, #2, #1
 800153e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001540:	f107 0208 	add.w	r2, r7, #8
 8001544:	2301      	movs	r3, #1
 8001546:	2117      	movs	r1, #23
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fd6d 	bl	8001028 <lsm6dsm_write_reg>
 800154e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <lsm6dsm_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsm_lpf1_sel_g_t val)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl4_c_t ctrl4_c;
  lsm6dsm_ctrl6_c_t ctrl6_c;
  lsm6dsm_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001566:	f107 0208 	add.w	r2, r7, #8
 800156a:	2301      	movs	r3, #1
 800156c:	2116      	movs	r1, #22
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fd42 	bl	8000ff8 <lsm6dsm_read_reg>
 8001574:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d157      	bne.n	800162c <lsm6dsm_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	7a3b      	ldrb	r3, [r7, #8]
 8001588:	f362 1305 	bfi	r3, r2, #4, #2
 800158c:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	09db      	lsrs	r3, r3, #7
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	7a3b      	ldrb	r3, [r7, #8]
 800159c:	f362 1386 	bfi	r3, r2, #6, #1
 80015a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	2301      	movs	r3, #1
 80015a8:	2116      	movs	r1, #22
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fd3c 	bl	8001028 <lsm6dsm_write_reg>
 80015b0:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d139      	bne.n	800162c <lsm6dsm_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80015b8:	f107 020c 	add.w	r2, r7, #12
 80015bc:	2301      	movs	r3, #1
 80015be:	2115      	movs	r1, #21
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd19 	bl	8000ff8 <lsm6dsm_read_reg>
 80015c6:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d12e      	bne.n	800162c <lsm6dsm_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	f362 0301 	bfi	r3, r2, #0, #2
 80015dc:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	2301      	movs	r3, #1
 80015e4:	2115      	movs	r1, #21
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fd1e 	bl	8001028 <lsm6dsm_write_reg>
 80015ec:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11b      	bne.n	800162c <lsm6dsm_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL4_C,
 80015f4:	f107 0210 	add.w	r2, r7, #16
 80015f8:	2301      	movs	r3, #1
 80015fa:	2113      	movs	r1, #19
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fcfb 	bl	8000ff8 <lsm6dsm_read_reg>
 8001602:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d110      	bne.n	800162c <lsm6dsm_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	7c3b      	ldrb	r3, [r7, #16]
 8001616:	f362 0341 	bfi	r3, r2, #1, #1
 800161a:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL4_C,
 800161c:	f107 0210 	add.w	r2, r7, #16
 8001620:	2301      	movs	r3, #1
 8001622:	2113      	movs	r1, #19
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcff 	bl	8001028 <lsm6dsm_write_reg>
 800162a:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800162c:	697b      	ldr	r3, [r7, #20]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <lsm6dsm_spi_mode_set>:
  * @param  val    Change the values of sim in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsm_spi_mode_set(stmdev_ctx_t *ctx, lsm6dsm_sim_t val)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
  lsm6dsm_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsm_read_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001642:	f107 0208 	add.w	r2, r7, #8
 8001646:	2301      	movs	r3, #1
 8001648:	2112      	movs	r1, #18
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fcd4 	bl	8000ff8 <lsm6dsm_read_reg>
 8001650:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10f      	bne.n	8001678 <lsm6dsm_spi_mode_set+0x42>
  {
    ctrl3_c.sim = (uint8_t)val;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7a3b      	ldrb	r3, [r7, #8]
 8001662:	f362 03c3 	bfi	r3, r2, #3, #1
 8001666:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsm_write_reg(ctx, LSM6DSM_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	2301      	movs	r3, #1
 800166e:	2112      	movs	r1, #18
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fcd9 	bl	8001028 <lsm6dsm_write_reg>
 8001676:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001688:	b088      	sub	sp, #32
 800168a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168c:	f000 fd65 	bl	800215a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001690:	f000 f942 	bl	8001918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001694:	f000 fa16 	bl	8001ac4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001698:	f000 f9a6 	bl	80019e8 <MX_SPI2_Init>
  MX_UART5_Init();
 800169c:	f000 f9e2 	bl	8001a64 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  //make CS pin SPI high
  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	488d      	ldr	r0, [pc, #564]	; (80018dc <main+0x258>)
 80016a8:	f001 f880 	bl	80027ac <HAL_GPIO_WritePin>

  // variable initialization for sensor access
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <main+0x25c>)
 80016ae:	607b      	str	r3, [r7, #4]
  dev_ctx.read_reg = platform_read;
 80016b0:	4b8c      	ldr	r3, [pc, #560]	; (80018e4 <main+0x260>)
 80016b2:	60bb      	str	r3, [r7, #8]
  dev_ctx.handle = &SENSOR_BUS;
 80016b4:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <main+0x264>)
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Wait sensor boot time */
  platform_delay(100);
 80016b8:	2064      	movs	r0, #100	; 0x64
 80016ba:	f000 fb45 	bl	8001d48 <platform_delay>
  //set SPI as 3 wire communication
  lsm6dsm_spi_mode_set(&dev_ctx,LSM6DSM_SPI_3_WIRE);
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffb7 	bl	8001636 <lsm6dsm_spi_mode_set>
  //set auto increment to read several register at same time
  lsm6dsm_auto_increment_set(&dev_ctx, 1);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2101      	movs	r1, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fec1 	bl	8001454 <lsm6dsm_auto_increment_set>

  /* Check device ID */
  lsm6dsm_device_id_get(&dev_ctx, &whoamI);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4985      	ldr	r1, [pc, #532]	; (80018ec <main+0x268>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe92 	bl	8001400 <lsm6dsm_device_id_get>

  if (whoamI != LSM6DSM_ID)
 80016dc:	4b83      	ldr	r3, [pc, #524]	; (80018ec <main+0x268>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b6a      	cmp	r3, #106	; 0x6a
 80016e2:	d000      	beq.n	80016e6 <main+0x62>
    while (1) {
 80016e4:	e7fe      	b.n	80016e4 <main+0x60>
  /* Restore default configuration */
  // you should not call this function because it will give uncorrect output register value
  //lsm6dsm_reset_set(&dev_ctx, PROPERTY_ENABLE);

  do {
    lsm6dsm_reset_get(&dev_ctx, &rst);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4981      	ldr	r1, [pc, #516]	; (80018f0 <main+0x26c>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fe99 	bl	8001422 <lsm6dsm_reset_get>
  } while (rst);
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <main+0x26c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f6      	bne.n	80016e6 <main+0x62>

  /*  Enable Block Data Update */
  lsm6dsm_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2101      	movs	r1, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fd8f 	bl	8001220 <lsm6dsm_block_data_update_set>
  /* Set Output Data Rate for Acc and Gyro */
  lsm6dsm_xl_data_rate_set(&dev_ctx, LSM6DSM_XL_ODR_12Hz5);
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fd18 	bl	800113c <lsm6dsm_xl_data_rate_set>
  lsm6dsm_gy_data_rate_set(&dev_ctx, LSM6DSM_GY_ODR_12Hz5);
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2101      	movs	r1, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fd5f 	bl	80011d4 <lsm6dsm_gy_data_rate_set>
  /* Set full scale */
  lsm6dsm_xl_full_scale_set(&dev_ctx, LSM6DSM_2g);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fce8 	bl	80010f0 <lsm6dsm_xl_full_scale_set>
  lsm6dsm_gy_full_scale_set(&dev_ctx, LSM6DSM_2000dps);
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2106      	movs	r1, #6
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fd2f 	bl	8001188 <lsm6dsm_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - analog filter
   */
  lsm6dsm_xl_filter_analog_set(&dev_ctx, LSM6DSM_XL_ANA_BW_400Hz);
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb6 	bl	80014a0 <lsm6dsm_xl_filter_analog_set>
  /* Accelerometer - LPF1 path (LPF2 not used) */
  //lsm6dsm_xl_lp1_bandwidth_set(&dev_ctx, LSM6DSM_XL_LP1_ODR_DIV_4);
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dsm_xl_lp2_bandwidth_set(&dev_ctx,
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2111      	movs	r1, #17
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fed7 	bl	80014ec <lsm6dsm_xl_lp2_bandwidth_set>
                               LSM6DSM_XL_LOW_NOISE_LP_ODR_DIV_100);
  /* Accelerometer - High Pass / Slope path */
  //lsm6dsm_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
  //lsm6dsm_xl_hp_bandwidth_set(&dev_ctx, LSM6DSM_XL_HP_ODR_DIV_100);
  /* Gyroscope - filtering chain */
  lsm6dsm_gy_band_pass_set(&dev_ctx, LSM6DSM_HP_260mHz_LP1_STRONG);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	21a8      	movs	r1, #168	; 0xa8
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff09 	bl	800155a <lsm6dsm_gy_band_pass_set>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    lsm6dsm_reg_t reg;
	    /* Read output only if new value is available */
	    lsm6dsm_status_reg_get(&dev_ctx, &reg.status_reg);
 8001748:	463a      	mov	r2, r7
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fd8c 	bl	800126c <lsm6dsm_status_reg_get>

	    if (reg.status_reg.xlda) {
 8001754:	783b      	ldrb	r3, [r7, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d048      	beq.n	80017f2 <main+0x16e>
	      /* Read acceleration field data */
	      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001760:	2206      	movs	r2, #6
 8001762:	2100      	movs	r1, #0
 8001764:	4863      	ldr	r0, [pc, #396]	; (80018f4 <main+0x270>)
 8001766:	f003 fffb 	bl	8005760 <memset>
	      lsm6dsm_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4961      	ldr	r1, [pc, #388]	; (80018f4 <main+0x270>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fdfb 	bl	800136a <lsm6dsm_acceleration_raw_get>
	      acceleration_mg[0] =
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[0]);
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <main+0x270>)
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fc6c 	bl	8001058 <lsm6dsm_from_fs2g_to_mg>
 8001780:	eef0 7a40 	vmov.f32	s15, s0
	      acceleration_mg[0] =
 8001784:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <main+0x274>)
 8001786:	edc3 7a00 	vstr	s15, [r3]
	      acceleration_mg[1] =
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[1]);
 800178a:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <main+0x270>)
 800178c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc61 	bl	8001058 <lsm6dsm_from_fs2g_to_mg>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
	      acceleration_mg[1] =
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <main+0x274>)
 800179c:	edc3 7a01 	vstr	s15, [r3, #4]
	      acceleration_mg[2] =
	        lsm6dsm_from_fs2g_to_mg(data_raw_acceleration[2]);
 80017a0:	4b54      	ldr	r3, [pc, #336]	; (80018f4 <main+0x270>)
 80017a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fc56 	bl	8001058 <lsm6dsm_from_fs2g_to_mg>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
	      acceleration_mg[2] =
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <main+0x274>)
 80017b2:	edc3 7a02 	vstr	s15, [r3, #8]
	      printf("Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80017b6:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <main+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
	      printf("Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fec4 	bl	8000548 <__aeabi_f2d>
 80017c0:	4680      	mov	r8, r0
 80017c2:	4689      	mov	r9, r1
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <main+0x274>)
 80017c6:	685b      	ldr	r3, [r3, #4]
	      printf("Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	4604      	mov	r4, r0
 80017d0:	460d      	mov	r5, r1
	              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <main+0x274>)
 80017d4:	689b      	ldr	r3, [r3, #8]
	      printf("Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017e4:	e9cd 4500 	strd	r4, r5, [sp]
 80017e8:	4642      	mov	r2, r8
 80017ea:	464b      	mov	r3, r9
 80017ec:	4843      	ldr	r0, [pc, #268]	; (80018fc <main+0x278>)
 80017ee:	f004 fe39 	bl	8006464 <iprintf>
	    }

	    if (reg.status_reg.gda) {
 80017f2:	783b      	ldrb	r3, [r7, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d048      	beq.n	8001890 <main+0x20c>
	      /* Read angular rate field data */
	      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80017fe:	2206      	movs	r2, #6
 8001800:	2100      	movs	r1, #0
 8001802:	483f      	ldr	r0, [pc, #252]	; (8001900 <main+0x27c>)
 8001804:	f003 ffac 	bl	8005760 <memset>
	      lsm6dsm_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	493d      	ldr	r1, [pc, #244]	; (8001900 <main+0x27c>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fd61 	bl	80012d4 <lsm6dsm_angular_rate_raw_get>
	      angular_rate_mdps[0] =
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <main+0x27c>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc35 	bl	8001088 <lsm6dsm_from_fs2000dps_to_mdps>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
	      angular_rate_mdps[0] =
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <main+0x280>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
	      angular_rate_mdps[1] =
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001828:	4b35      	ldr	r3, [pc, #212]	; (8001900 <main+0x27c>)
 800182a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc2a 	bl	8001088 <lsm6dsm_from_fs2000dps_to_mdps>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
	      angular_rate_mdps[1] =
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <main+0x280>)
 800183a:	edc3 7a01 	vstr	s15, [r3, #4]
	      angular_rate_mdps[2] =
	        lsm6dsm_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <main+0x27c>)
 8001840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fc1f 	bl	8001088 <lsm6dsm_from_fs2000dps_to_mdps>
 800184a:	eef0 7a40 	vmov.f32	s15, s0
	      angular_rate_mdps[2] =
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <main+0x280>)
 8001850:	edc3 7a02 	vstr	s15, [r3, #8]
	      printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
	              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <main+0x280>)
 8001856:	681b      	ldr	r3, [r3, #0]
	      printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	4680      	mov	r8, r0
 8001860:	4689      	mov	r9, r1
	              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <main+0x280>)
 8001864:	685b      	ldr	r3, [r3, #4]
	      printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
	              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <main+0x280>)
 8001872:	689b      	ldr	r3, [r3, #8]
	      printf("Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe67 	bl	8000548 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001882:	e9cd 4500 	strd	r4, r5, [sp]
 8001886:	4642      	mov	r2, r8
 8001888:	464b      	mov	r3, r9
 800188a:	481f      	ldr	r0, [pc, #124]	; (8001908 <main+0x284>)
 800188c:	f004 fdea 	bl	8006464 <iprintf>
	    }

	    if (reg.status_reg.tda) {
 8001890:	783b      	ldrb	r3, [r7, #0]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f43f af55 	beq.w	8001748 <main+0xc4>
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <main+0x288>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
	      /* Read temperature data */
	      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	      lsm6dsm_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4919      	ldr	r1, [pc, #100]	; (800190c <main+0x288>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fcf0 	bl	800128e <lsm6dsm_temperature_raw_get>
	      temperature_degC = lsm6dsm_from_lsb_to_celsius(
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <main+0x288>)
 80018b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fbff 	bl	80010b8 <lsm6dsm_from_lsb_to_celsius>
 80018ba:	eef0 7a40 	vmov.f32	s15, s0
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0x28c>)
 80018c0:	edc3 7a00 	vstr	s15, [r3]
	                           data_raw_temperature);
	      printf("Temperature [degC]:%6.2f\r\n",
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <main+0x28c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <main+0x290>)
 80018d4:	f004 fdc6 	bl	8006464 <iprintf>
  {
 80018d8:	e736      	b.n	8001748 <main+0xc4>
 80018da:	bf00      	nop
 80018dc:	48000400 	.word	0x48000400
 80018e0:	08001c8d 	.word	0x08001c8d
 80018e4:	08001ce5 	.word	0x08001ce5
 80018e8:	200001fc 	.word	0x200001fc
 80018ec:	20000310 	.word	0x20000310
 80018f0:	20000311 	.word	0x20000311
 80018f4:	200002e4 	.word	0x200002e4
 80018f8:	200002f4 	.word	0x200002f4
 80018fc:	0800a098 	.word	0x0800a098
 8001900:	200002ec 	.word	0x200002ec
 8001904:	20000300 	.word	0x20000300
 8001908:	0800a0c0 	.word	0x0800a0c0
 800190c:	200002f2 	.word	0x200002f2
 8001910:	2000030c 	.word	0x2000030c
 8001914:	0800a0e8 	.word	0x0800a0e8

08001918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b096      	sub	sp, #88	; 0x58
 800191c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	2244      	movs	r2, #68	; 0x44
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f003 ff1a 	bl	8005760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800193a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800193e:	f000 ff6b 	bl	8002818 <HAL_PWREx_ControlVoltageScaling>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001948:	f000 fa09 	bl	8001d5e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800194c:	f000 ff46 	bl	80027dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <SystemClock_Config+0xcc>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a23      	ldr	r2, [pc, #140]	; (80019e4 <SystemClock_Config+0xcc>)
 8001958:	f023 0318 	bic.w	r3, r3, #24
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001960:	2316      	movs	r3, #22
 8001962:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001964:	2301      	movs	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196e:	2310      	movs	r3, #16
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001972:	2301      	movs	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800197a:	2360      	movs	r3, #96	; 0x60
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197e:	2302      	movs	r3, #2
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001982:	2301      	movs	r3, #1
 8001984:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800198a:	2328      	movs	r3, #40	; 0x28
 800198c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800198e:	2307      	movs	r3, #7
 8001990:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001992:	2302      	movs	r3, #2
 8001994:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001996:	2302      	movs	r3, #2
 8001998:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 ffa0 	bl	80028e4 <HAL_RCC_OscConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019aa:	f000 f9d8 	bl	8001d5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	230f      	movs	r3, #15
 80019b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b2:	2303      	movs	r3, #3
 80019b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	2104      	movs	r1, #4
 80019c6:	4618      	mov	r0, r3
 80019c8:	f001 fb74 	bl	80030b4 <HAL_RCC_ClockConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80019d2:	f000 f9c4 	bl	8001d5e <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80019d6:	f002 f85d 	bl	8003a94 <HAL_RCCEx_EnableMSIPLLMode>
}
 80019da:	bf00      	nop
 80019dc:	3758      	adds	r7, #88	; 0x58
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_SPI2_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_SPI2_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_SPI2_Init+0x74>)
 80019f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_SPI2_Init+0x74>)
 80019fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a04:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a20:	2220      	movs	r2, #32
 8001a22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_SPI2_Init+0x74>)
 8001a4a:	f002 fa05 	bl	8003e58 <HAL_SPI_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001a54:	f000 f983 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200001fc 	.word	0x200001fc
 8001a60:	40003800 	.word	0x40003800

08001a64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_UART5_Init+0x58>)
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <MX_UART5_Init+0x5c>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_UART5_Init+0x58>)
 8001a70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_UART5_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_UART5_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_UART5_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_UART5_Init+0x58>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_UART5_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_UART5_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_UART5_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_UART5_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_UART5_Init+0x58>)
 8001aa8:	f003 f8e6 	bl	8004c78 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001ab2:	f000 f954 	bl	8001d5e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000260 	.word	0x20000260
 8001ac0:	40005000 	.word	0x40005000

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a5b      	ldr	r2, [pc, #364]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a55      	ldr	r2, [pc, #340]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8001b22:	f000 fecf 	bl	80028c4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a42      	ldr	r2, [pc, #264]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <MX_GPIO_Init+0x188>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b74:	4836      	ldr	r0, [pc, #216]	; (8001c50 <MX_GPIO_Init+0x18c>)
 8001b76:	f000 fe19 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_AG_GPIO_Port, CS_AG_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	4834      	ldr	r0, [pc, #208]	; (8001c54 <MX_GPIO_Init+0x190>)
 8001b82:	f000 fe13 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA9 PA1 PA4
                           PA2 PA7 PA6 PA5
                           PA3 PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8001b86:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001b8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f000 fc5b 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 PG10 PG13
                           PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_13
 8001ba2:	f44f 43dc 	mov.w	r3, #28160	; 0x6e00
 8001ba6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4826      	ldr	r0, [pc, #152]	; (8001c50 <MX_GPIO_Init+0x18c>)
 8001bb8:	f000 fc4e 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB7 PB6 PB4
                           PB5 PB8 PB9 PB14
                           PB11 PB10 PB2 PB1
                           PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4
 8001bbc:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8001bc0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_14
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_2|GPIO_PIN_1
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4820      	ldr	r0, [pc, #128]	; (8001c54 <MX_GPIO_Init+0x190>)
 8001bd2:	f000 fc41 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC11 PC10 PC9
                           PC7 PC8 PC6 PC2
                           PC1 PC0 PC3 PC5
                           PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001bd6:	f642 73ff 	movw	r3, #12287	; 0x2fff
 8001bda:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_2
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <MX_GPIO_Init+0x194>)
 8001bec:	f000 fc34 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <MX_GPIO_Init+0x18c>)
 8001c0a:	f000 fc25 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH1 PH0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480e      	ldr	r0, [pc, #56]	; (8001c5c <MX_GPIO_Init+0x198>)
 8001c22:	f000 fc19 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_AG_Pin */
  GPIO_InitStruct.Pin = CS_AG_Pin;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_AG_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_GPIO_Init+0x190>)
 8001c40:	f000 fc0a 	bl	8002458 <HAL_GPIO_Init>

}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48001800 	.word	0x48001800
 8001c54:	48000400 	.word	0x48000400
 8001c58:	48000800 	.word	0x48000800
 8001c5c:	48001c00 	.word	0x48001c00

08001c60 <_write>:

/* USER CODE BEGIN 4 */

int _write(int fd, char* ptr, int len) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*) ptr, len, 0xffffff);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <_write+0x28>)
 8001c78:	f003 f84c 	bl	8004d14 <HAL_UART_Transmit>
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000260 	.word	0x20000260

08001c8c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	460b      	mov	r3, r1
 8001c9a:	72fb      	strb	r3, [r7, #11]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	813b      	strh	r3, [r7, #8]
	  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <platform_write+0x54>)
 8001ca8:	f000 fd80 	bl	80027ac <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001cac:	f107 010b 	add.w	r1, r7, #11
 8001cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f002 f971 	bl	8003f9e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8001cbc:	893a      	ldrh	r2, [r7, #8]
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f002 f96a 	bl	8003f9e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <platform_write+0x54>)
 8001cd2:	f000 fd6b 	bl	80027ac <HAL_GPIO_WritePin>
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	48000400 	.word	0x48000400

08001ce4 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	72fb      	strb	r3, [r7, #11]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	72fb      	strb	r3, [r7, #11]
	  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <platform_read+0x60>)
 8001d0a:	f000 fd4f 	bl	80027ac <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001d0e:	f107 010b 	add.w	r1, r7, #11
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	2201      	movs	r2, #1
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f002 f940 	bl	8003f9e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(handle, bufp, len, 1000);
 8001d1e:	893a      	ldrh	r2, [r7, #8]
 8001d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f002 faa7 	bl	800427a <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOB, CS_AG_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <platform_read+0x60>)
 8001d34:	f000 fd3a 	bl	80027ac <HAL_GPIO_WritePin>
  return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	48000400 	.word	0x48000400

08001d48 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fa77 	bl	8002244 <HAL_Delay>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d62:	b672      	cpsid	i
}
 8001d64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <Error_Handler+0x8>

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_SPI_MspInit+0x7c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d128      	bne.n	8001e24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_SPI_MspInit+0x80>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8001e02:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HAL_SPI_MspInit+0x84>)
 8001e20:	f000 fb1a 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40003800 	.word	0x40003800
 8001e30:	40021000 	.word	0x40021000
 8001e34:	48000400 	.word	0x48000400

08001e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0ac      	sub	sp, #176	; 0xb0
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2288      	movs	r2, #136	; 0x88
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fc81 	bl	8005760 <memset>
  if(huart->Instance==UART5)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_UART_MspInit+0xf4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d15d      	bne.n	8001f24 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 8001e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fb22 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e82:	f7ff ff6c 	bl	8001d5e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e86:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_UART_MspInit+0xf8>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <HAL_UART_MspInit+0xfc>)
 8001ef4:	f000 fab0 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f12:	2308      	movs	r3, #8
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4806      	ldr	r0, [pc, #24]	; (8001f38 <HAL_UART_MspInit+0x100>)
 8001f20:	f000 fa9a 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	37b0      	adds	r7, #176	; 0xb0
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40005000 	.word	0x40005000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48000c00 	.word	0x48000c00
 8001f38:	48000800 	.word	0x48000800

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f93c 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
	return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_kill>:

int _kill(int pid, int sig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001faa:	f003 fbaf 	bl	800570c <__errno>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2216      	movs	r2, #22
 8001fb2:	601a      	str	r2, [r3, #0]
	return -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_exit>:

void _exit (int status)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffe7 	bl	8001fa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fd2:	e7fe      	b.n	8001fd2 <_exit+0x12>

08001fd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	e00a      	b.n	8001ffc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fe6:	f3af 8000 	nop.w
 8001fea:	4601      	mov	r1, r0
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	b2ca      	uxtb	r2, r1
 8001ff4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbf0      	blt.n	8001fe6 <_read+0x12>
	}

return len;
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_close>:
	}
	return len;
}

int _close(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002036:	605a      	str	r2, [r3, #4]
	return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_isatty>:

int _isatty(int file)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	return 1;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f003 fb30 	bl	800570c <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20018000 	.word	0x20018000
 80020d8:	00000600 	.word	0x00000600
 80020dc:	20000314 	.word	0x20000314
 80020e0:	20000330 	.word	0x20000330

080020e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800210c:	f7ff ffea 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002110:	480c      	ldr	r0, [pc, #48]	; (8002144 <LoopForever+0x6>)
  ldr r1, =_edata
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <LoopForever+0xe>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002128:	4c0a      	ldr	r4, [pc, #40]	; (8002154 <LoopForever+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002136:	f003 faef 	bl	8005718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213a:	f7ff faa3 	bl	8001684 <main>

0800213e <LoopForever>:

LoopForever:
    b LoopForever
 800213e:	e7fe      	b.n	800213e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002140:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800214c:	0800a60c 	.word	0x0800a60c
  ldr r2, =_sbss
 8002150:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002154:	2000032c 	.word	0x2000032c

08002158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC1_2_IRQHandler>

0800215a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f943 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f80e 	bl	800218c <HAL_InitTick>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	e001      	b.n	8002180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800217c:	f7ff fdf4 	bl	8001d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002180:	79fb      	ldrb	r3, [r7, #7]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_InitTick+0x6c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_InitTick+0x70>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_InitTick+0x6c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f941 	bl	800243e <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d809      	bhi.n	80021dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f000 f919 	bl	8002406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <HAL_InitTick+0x74>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e007      	b.n	80021ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e004      	b.n	80021ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e001      	b.n	80021ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008
 8002228:	20000318 	.word	0x20000318

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000318 	.word	0x20000318

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff47 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff5c 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffb0 	bl	80023ac <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e17f      	b.n	8002768 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8171 	beq.w	8002762 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d005      	beq.n	8002498 <HAL_GPIO_Init+0x40>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d130      	bne.n	80024fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ce:	2201      	movs	r2, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 0201 	and.w	r2, r3, #1
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b03      	cmp	r3, #3
 8002504:	d118      	bne.n	8002538 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800250c:	2201      	movs	r2, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	f003 0201 	and.w	r2, r3, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b03      	cmp	r3, #3
 8002542:	d017      	beq.n	8002574 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	2203      	movs	r2, #3
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d123      	bne.n	80025c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0203 	and.w	r2, r3, #3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80ac 	beq.w	8002762 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_GPIO_Init+0x330>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_GPIO_Init+0x330>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6613      	str	r3, [r2, #96]	; 0x60
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_GPIO_Init+0x330>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002622:	4a5a      	ldr	r2, [pc, #360]	; (800278c <HAL_GPIO_Init+0x334>)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800264c:	d025      	beq.n	800269a <HAL_GPIO_Init+0x242>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4f      	ldr	r2, [pc, #316]	; (8002790 <HAL_GPIO_Init+0x338>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <HAL_GPIO_Init+0x23e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_GPIO_Init+0x33c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x23a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_GPIO_Init+0x340>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x236>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4c      	ldr	r2, [pc, #304]	; (800279c <HAL_GPIO_Init+0x344>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x232>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_GPIO_Init+0x348>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x22e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4a      	ldr	r2, [pc, #296]	; (80027a4 <HAL_GPIO_Init+0x34c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x22a>
 800267e:	2306      	movs	r3, #6
 8002680:	e00c      	b.n	800269c <HAL_GPIO_Init+0x244>
 8002682:	2307      	movs	r3, #7
 8002684:	e00a      	b.n	800269c <HAL_GPIO_Init+0x244>
 8002686:	2305      	movs	r3, #5
 8002688:	e008      	b.n	800269c <HAL_GPIO_Init+0x244>
 800268a:	2304      	movs	r3, #4
 800268c:	e006      	b.n	800269c <HAL_GPIO_Init+0x244>
 800268e:	2303      	movs	r3, #3
 8002690:	e004      	b.n	800269c <HAL_GPIO_Init+0x244>
 8002692:	2302      	movs	r3, #2
 8002694:	e002      	b.n	800269c <HAL_GPIO_Init+0x244>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_GPIO_Init+0x244>
 800269a:	2300      	movs	r3, #0
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	f002 0203 	and.w	r2, r2, #3
 80026a2:	0092      	lsls	r2, r2, #2
 80026a4:	4093      	lsls	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <HAL_GPIO_Init+0x334>)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	089b      	lsrs	r3, r3, #2
 80026b2:	3302      	adds	r3, #2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_GPIO_Init+0x350>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026de:	4a32      	ldr	r2, [pc, #200]	; (80027a8 <HAL_GPIO_Init+0x350>)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <HAL_GPIO_Init+0x350>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <HAL_GPIO_Init+0x350>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_GPIO_Init+0x350>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002732:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <HAL_GPIO_Init+0x350>)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_GPIO_Init+0x350>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_GPIO_Init+0x350>)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f ae78 	bne.w	8002468 <HAL_GPIO_Init+0x10>
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40010000 	.word	0x40010000
 8002790:	48000400 	.word	0x48000400
 8002794:	48000800 	.word	0x48000800
 8002798:	48000c00 	.word	0x48000c00
 800279c:	48001000 	.word	0x48001000
 80027a0:	48001400 	.word	0x48001400
 80027a4:	48001800 	.word	0x48001800
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40007000 	.word	0x40007000

080027fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_PWREx_GetVoltageRange+0x18>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40007000 	.word	0x40007000

08002818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002826:	d130      	bne.n	800288a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002834:	d038      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2232      	movs	r2, #50	; 0x32
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	3301      	adds	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285c:	e002      	b.n	8002864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3b01      	subs	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d102      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f2      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002884:	d110      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e00f      	b.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d007      	beq.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a0:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40007000 	.word	0x40007000
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80028ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d2:	6053      	str	r3, [r2, #4]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e3d8      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b97      	ldr	r3, [pc, #604]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	4b94      	ldr	r3, [pc, #592]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80e4 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_RCC_OscConfig+0x4a>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	f040 808b 	bne.w	8002a3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 8087 	bne.w	8002a3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800292e:	4b89      	ldr	r3, [pc, #548]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e3b0      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_RCC_OscConfig+0x7c>
 8002956:	4b7f      	ldr	r3, [pc, #508]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295e:	e005      	b.n	800296c <HAL_RCC_OscConfig+0x88>
 8002960:	4b7c      	ldr	r3, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800296c:	4293      	cmp	r3, r2
 800296e:	d223      	bcs.n	80029b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fd43 	bl	8003400 <RCC_SetFlashLatencyFromMSIRange>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e391      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002984:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a72      	ldr	r2, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	496d      	ldr	r1, [pc, #436]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a2:	4b6c      	ldr	r3, [pc, #432]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	4968      	ldr	r1, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
 80029b6:	e025      	b.n	8002a04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a65      	ldr	r2, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	4b63      	ldr	r3, [pc, #396]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4960      	ldr	r1, [pc, #384]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	495b      	ldr	r1, [pc, #364]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fd03 	bl	8003400 <RCC_SetFlashLatencyFromMSIRange>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e351      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a04:	f000 fc38 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b52      	ldr	r3, [pc, #328]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	4950      	ldr	r1, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0x274>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a20:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <HAL_RCC_OscConfig+0x278>)
 8002a22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a24:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <HAL_RCC_OscConfig+0x27c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fbaf 	bl	800218c <HAL_InitTick>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d052      	beq.n	8002ade <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	e335      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d032      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a44:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a42      	ldr	r2, [pc, #264]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a50:	f7ff fbec 	bl	800222c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a58:	f7ff fbe8 	bl	800222c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e31e      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	4931      	ldr	r1, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a94:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	492c      	ldr	r1, [pc, #176]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	e01a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fbb9 	bl	800222c <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002abe:	f7ff fbb5 	bl	800222c <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e2eb      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x1da>
 8002adc:	e000      	b.n	8002ae0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ade:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d074      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x21a>
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d10e      	bne.n	8002b16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d10b      	bne.n	8002b16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d064      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d160      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e2c8      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d106      	bne.n	8002b2e <HAL_RCC_OscConfig+0x24a>
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e026      	b.n	8002b7c <HAL_RCC_OscConfig+0x298>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b36:	d115      	bne.n	8002b64 <HAL_RCC_OscConfig+0x280>
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a02      	ldr	r2, [pc, #8]	; (8002b54 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x298>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800a104 	.word	0x0800a104
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004
 8002b64:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a9f      	ldr	r2, [pc, #636]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a9c      	ldr	r2, [pc, #624]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff fb52 	bl	800222c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7ff fb4e 	bl	800222c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e284      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x2a8>
 8002baa:	e014      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb3e 	bl	800222c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff fb3a 	bl	800222c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e270      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2d0>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d060      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x310>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d116      	bne.n	8002c22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf4:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x328>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e24d      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	4973      	ldr	r1, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c20:	e040      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d023      	beq.n	8002c72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7ff faf9 	bl	800222c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7ff faf5 	bl	800222c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e22b      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	495f      	ldr	r1, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
 8002c70:	e018      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7ff fad5 	bl	800222c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c86:	f7ff fad1 	bl	800222c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e207      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d03c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01c      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7ff fab0 	bl	800222c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7ff faac 	bl	800222c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1e2      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ef      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x3ec>
 8002cf0:	e01b      	b.n	8002d2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf8:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7ff fa93 	bl	800222c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7ff fa8f 	bl	800222c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e1c5      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ef      	bne.n	8002d0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80a6 	beq.w	8002e84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6593      	str	r3, [r2, #88]	; 0x58
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCC_OscConfig+0x508>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d118      	bne.n	8002da2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_RCC_OscConfig+0x508>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_RCC_OscConfig+0x508>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7c:	f7ff fa56 	bl	800222c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7ff fa52 	bl	800222c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e188      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x508>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d108      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4d8>
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	4a0d      	ldr	r2, [pc, #52]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dba:	e029      	b.n	8002e10 <HAL_RCC_OscConfig+0x52c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d115      	bne.n	8002df0 <HAL_RCC_OscConfig+0x50c>
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <HAL_RCC_OscConfig+0x504>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x52c>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
 8002df0:	4b91      	ldr	r3, [pc, #580]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a90      	ldr	r2, [pc, #576]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e00:	4b8d      	ldr	r3, [pc, #564]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	4a8c      	ldr	r2, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d016      	beq.n	8002e46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7ff fa08 	bl	800222c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7ff fa04 	bl	800222c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e138      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e36:	4b80      	ldr	r3, [pc, #512]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ed      	beq.n	8002e20 <HAL_RCC_OscConfig+0x53c>
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7ff f9f1 	bl	800222c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7ff f9ed 	bl	800222c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e121      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ed      	bne.n	8002e4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 810c 	beq.w	80030a6 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	f040 80d4 	bne.w	8003040 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d130      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d127      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11f      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed8:	2a07      	cmp	r2, #7
 8002eda:	bf14      	ite	ne
 8002edc:	2201      	movne	r2, #1
 8002ede:	2200      	moveq	r2, #0
 8002ee0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d113      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d06e      	beq.n	8002fec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d069      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f14:	4b48      	ldr	r3, [pc, #288]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f20:	4b45      	ldr	r3, [pc, #276]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0bb      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a40      	ldr	r2, [pc, #256]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f3c:	f7ff f976 	bl	800222c <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7ff f972 	bl	800222c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0a8      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f56:	4b38      	ldr	r3, [pc, #224]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f62:	4b35      	ldr	r3, [pc, #212]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_OscConfig+0x758>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7c:	0212      	lsls	r2, r2, #8
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f84:	0852      	lsrs	r2, r2, #1
 8002f86:	3a01      	subs	r2, #1
 8002f88:	0552      	lsls	r2, r2, #21
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f90:	0852      	lsrs	r2, r2, #1
 8002f92:	3a01      	subs	r2, #1
 8002f94:	0652      	lsls	r2, r2, #25
 8002f96:	4311      	orrs	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9c:	0912      	lsrs	r2, r2, #4
 8002f9e:	0452      	lsls	r2, r2, #17
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc0:	f7ff f934 	bl	800222c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff f930 	bl	800222c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e066      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe6:	e05e      	b.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e05d      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d156      	bne.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003010:	f7ff f90c 	bl	800222c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7ff f908 	bl	800222c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e03e      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302a:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_OscConfig+0x754>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x734>
 8003036:	e036      	b.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
 8003038:	40021000 	.word	0x40021000
 800303c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d02d      	beq.n	80030a2 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 800304c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003050:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003070:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff f8d7 	bl	800222c <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff f8d3 	bl	800222c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e009      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_OscConfig+0x7cc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x79e>
 80030a0:	e001      	b.n	80030a6 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0c8      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b66      	ldr	r3, [pc, #408]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d910      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4961      	ldr	r1, [pc, #388]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0b0      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d04c      	beq.n	800319e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310c:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d121      	bne.n	800315c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e09e      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d115      	bne.n	800315c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e092      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800313c:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e086      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314c:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e07e      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315c:	4b42      	ldr	r3, [pc, #264]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 0203 	bic.w	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	493f      	ldr	r1, [pc, #252]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316e:	f7ff f85d 	bl	800222c <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	e00a      	b.n	800318c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7ff f859 	bl	800222c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e066      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 020c 	and.w	r2, r3, #12
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	429a      	cmp	r2, r3
 800319c:	d1eb      	bne.n	8003176 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	492c      	ldr	r1, [pc, #176]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d210      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4924      	ldr	r1, [pc, #144]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b22      	ldr	r3, [pc, #136]	; (8003264 <HAL_RCC_ClockConfig+0x1b0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e036      	b.n	800325a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4918      	ldr	r1, [pc, #96]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4910      	ldr	r1, [pc, #64]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800322a:	f000 f825 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490c      	ldr	r1, [pc, #48]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe ff9c 	bl	800218c <HAL_InitTick>
 8003254:	4603      	mov	r3, r0
 8003256:	72fb      	strb	r3, [r7, #11]

  return status;
 8003258:	7afb      	ldrb	r3, [r7, #11]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000
 8003268:	40021000 	.word	0x40021000
 800326c:	0800a104 	.word	0x0800a104
 8003270:	20000000 	.word	0x20000000
 8003274:	20000004 	.word	0x20000004

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b089      	sub	sp, #36	; 0x24
 800327c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003286:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003290:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x34>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d11e      	bne.n	80032ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032ac:	4b34      	ldr	r3, [pc, #208]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	61fb      	str	r3, [r7, #28]
 80032c6:	e005      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10d      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d102      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_GetSysClockFreq+0x110>)
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e004      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032fc:	4b23      	ldr	r3, [pc, #140]	; (800338c <HAL_RCC_GetSysClockFreq+0x114>)
 80032fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d134      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0xa6>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d003      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0xac>
 800331c:	e005      	b.n	800332a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_RCC_GetSysClockFreq+0x110>)
 8003320:	617b      	str	r3, [r7, #20]
      break;
 8003322:	e005      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_GetSysClockFreq+0x114>)
 8003326:	617b      	str	r3, [r7, #20]
      break;
 8003328:	e002      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	617b      	str	r3, [r7, #20]
      break;
 800332e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	3301      	adds	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	fb03 f202 	mul.w	r2, r3, r2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	0e5b      	lsrs	r3, r3, #25
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	3301      	adds	r3, #1
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003370:	69bb      	ldr	r3, [r7, #24]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	0800a11c 	.word	0x0800a11c
 8003388:	00f42400 	.word	0x00f42400
 800338c:	007a1200 	.word	0x007a1200

08003390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000000 	.word	0x20000000

080033a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033ac:	f7ff fff0 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4904      	ldr	r1, [pc, #16]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	0800a114 	.word	0x0800a114

080033d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033d8:	f7ff ffda 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0adb      	lsrs	r3, r3, #11
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	0800a114 	.word	0x0800a114

08003400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003418:	f7ff f9f0 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 800341c:	6178      	str	r0, [r7, #20]
 800341e:	e014      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003438:	f7ff f9e0 	bl	80027fc <HAL_PWREx_GetVoltageRange>
 800343c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d10b      	bne.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d919      	bls.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2ba0      	cmp	r3, #160	; 0xa0
 800345c:	d902      	bls.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345e:	2302      	movs	r3, #2
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e013      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e010      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d902      	bls.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003470:	2303      	movs	r3, #3
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	e00a      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d102      	bne.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800347c:	2302      	movs	r3, #2
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e004      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d101      	bne.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 0207 	bic.w	r2, r3, #7
 8003494:	4909      	ldr	r1, [pc, #36]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d001      	beq.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40022000 	.word	0x40022000

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d041      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e4:	d02a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ea:	d824      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f0:	d008      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f6:	d81e      	bhi.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003500:	d010      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003502:	e018      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003504:	4b86      	ldr	r3, [pc, #536]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a85      	ldr	r2, [pc, #532]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003510:	e015      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 facb 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003522:	e00c      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3320      	adds	r3, #32
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fbb6 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003534:	e003      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	74fb      	strb	r3, [r7, #19]
      break;
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800353c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003544:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003552:	4973      	ldr	r1, [pc, #460]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800355a:	e001      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d041      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003574:	d02a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003576:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800357a:	d824      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800357c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003580:	d008      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003582:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003586:	d81e      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800358c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003590:	d010      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003592:	e018      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003594:	4b62      	ldr	r3, [pc, #392]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a61      	ldr	r2, [pc, #388]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035a0:	e015      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa83 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3320      	adds	r3, #32
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fb6e 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035d4:	4b52      	ldr	r3, [pc, #328]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	494f      	ldr	r1, [pc, #316]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80a0 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	4a40      	ldr	r2, [pc, #256]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	; 0x58
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003630:	2301      	movs	r3, #1
 8003632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800363a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003640:	f7fe fdf4 	bl	800222c <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003646:	e009      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003648:	f7fe fdf0 	bl	800222c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	74fb      	strb	r3, [r7, #19]
        break;
 800365a:	e005      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ef      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d15c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01f      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	429a      	cmp	r2, r3
 800368a:	d019      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a20      	ldr	r2, [pc, #128]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036b8:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d016      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fe fdaf 	bl	800222c <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d0:	e00b      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe fdab 	bl	800222c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d902      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	74fb      	strb	r3, [r7, #19]
            break;
 80036e8:	e006      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ec      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003716:	e009      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	74bb      	strb	r3, [r7, #18]
 800371c:	e006      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372c:	7c7b      	ldrb	r3, [r7, #17]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a9d      	ldr	r2, [pc, #628]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800374a:	4b98      	ldr	r3, [pc, #608]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f023 0203 	bic.w	r2, r3, #3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	4994      	ldr	r1, [pc, #592]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800376c:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 020c 	bic.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	498c      	ldr	r1, [pc, #560]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800378e:	4b87      	ldr	r3, [pc, #540]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4983      	ldr	r1, [pc, #524]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037b0:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	497b      	ldr	r1, [pc, #492]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	4972      	ldr	r1, [pc, #456]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f4:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	496a      	ldr	r1, [pc, #424]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	4961      	ldr	r1, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003838:	4b5c      	ldr	r3, [pc, #368]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	4959      	ldr	r1, [pc, #356]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385a:	4b54      	ldr	r3, [pc, #336]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	4950      	ldr	r1, [pc, #320]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800387c:	4b4b      	ldr	r3, [pc, #300]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	4948      	ldr	r1, [pc, #288]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	493f      	ldr	r1, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d028      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c0:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038de:	d106      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e0:	4b32      	ldr	r3, [pc, #200]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a31      	ldr	r2, [pc, #196]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ea:	60d3      	str	r3, [r2, #12]
 80038ec:	e011      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038f6:	d10c      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f8d8 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800390e:	7cfb      	ldrb	r3, [r7, #19]
 8003910:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d028      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	491f      	ldr	r1, [pc, #124]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393c:	d106      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003948:	60d3      	str	r3, [r2, #12]
 800394a:	e011      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003954:	d10c      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f8a9 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a02      	ldr	r2, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e014      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2101      	movs	r1, #1
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f877 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02f      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ee:	4928      	ldr	r1, [pc, #160]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f854 	bl	8003ab4 <RCCEx_PLLSAI1_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d014      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	74bb      	strb	r3, [r7, #18]
 8003a1a:	e011      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3320      	adds	r3, #32
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f935 	bl	8003c9c <RCCEx_PLLSAI2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	490d      	ldr	r1, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	4904      	ldr	r1, [pc, #16]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a9e:	f043 0304 	orr.w	r3, r3, #4
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ac2:	4b75      	ldr	r3, [pc, #468]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d018      	beq.n	8003b00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ace:	4b72      	ldr	r3, [pc, #456]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0203 	and.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d10d      	bne.n	8003afa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
       ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d047      	beq.n	8003b8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e044      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d018      	beq.n	8003b3a <RCCEx_PLLSAI1_Config+0x86>
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d825      	bhi.n	8003b58 <RCCEx_PLLSAI1_Config+0xa4>
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d002      	beq.n	8003b16 <RCCEx_PLLSAI1_Config+0x62>
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d009      	beq.n	8003b28 <RCCEx_PLLSAI1_Config+0x74>
 8003b14:	e020      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b16:	4b60      	ldr	r3, [pc, #384]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11d      	bne.n	8003b5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b26:	e01a      	b.n	8003b5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e013      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b3a:	4b57      	ldr	r3, [pc, #348]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b46:	4b54      	ldr	r3, [pc, #336]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b56:	e006      	b.n	8003b66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5c:	e004      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e002      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b62:	bf00      	nop
 8003b64:	e000      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b6e:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	430b      	orrs	r3, r1
 8003b84:	4944      	ldr	r1, [pc, #272]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d17d      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fb46 	bl	800222c <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba2:	e009      	b.n	8003bb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba4:	f7fe fb42 	bl	800222c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d902      	bls.n	8003bb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bb6:	e005      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bb8:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ef      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d160      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd0:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	0211      	lsls	r1, r2, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	0912      	lsrs	r2, r2, #4
 8003be8:	0452      	lsls	r2, r2, #17
 8003bea:	430a      	orrs	r2, r1
 8003bec:	492a      	ldr	r1, [pc, #168]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	610b      	str	r3, [r1, #16]
 8003bf2:	e027      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d112      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bfa:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	0211      	lsls	r1, r2, #8
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6912      	ldr	r2, [r2, #16]
 8003c10:	0852      	lsrs	r2, r2, #1
 8003c12:	3a01      	subs	r2, #1
 8003c14:	0552      	lsls	r2, r2, #21
 8003c16:	430a      	orrs	r2, r1
 8003c18:	491f      	ldr	r1, [pc, #124]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	610b      	str	r3, [r1, #16]
 8003c1e:	e011      	b.n	8003c44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6952      	ldr	r2, [r2, #20]
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0652      	lsls	r2, r2, #25
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	4916      	ldr	r1, [pc, #88]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fe faec 	bl	800222c <HAL_GetTick>
 8003c54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c56:	e009      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c58:	f7fe fae8 	bl	800222c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d902      	bls.n	8003c6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	73fb      	strb	r3, [r7, #15]
          break;
 8003c6a:	e005      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ef      	beq.n	8003c58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	4904      	ldr	r1, [pc, #16]	; (8003c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000

08003c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cb6:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10d      	bne.n	8003ce2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cce:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d047      	beq.n	8003d72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e044      	b.n	8003d72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d018      	beq.n	8003d22 <RCCEx_PLLSAI2_Config+0x86>
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d825      	bhi.n	8003d40 <RCCEx_PLLSAI2_Config+0xa4>
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d002      	beq.n	8003cfe <RCCEx_PLLSAI2_Config+0x62>
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d009      	beq.n	8003d10 <RCCEx_PLLSAI2_Config+0x74>
 8003cfc:	e020      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cfe:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11d      	bne.n	8003d46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0e:	e01a      	b.n	8003d46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d20:	e013      	b.n	8003d4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d22:	4b4c      	ldr	r3, [pc, #304]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d2e:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d3e:	e006      	b.n	8003d4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e004      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	4939      	ldr	r1, [pc, #228]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d167      	bne.n	8003e48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fe fa52 	bl	800222c <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d8c:	f7fe fa4e 	bl	800222c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003da0:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ef      	bne.n	8003d8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d14a      	bne.n	8003e48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003db8:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	0211      	lsls	r1, r2, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	0912      	lsrs	r2, r2, #4
 8003dd0:	0452      	lsls	r2, r2, #17
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	491f      	ldr	r1, [pc, #124]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	614b      	str	r3, [r1, #20]
 8003dda:	e011      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	0211      	lsls	r1, r2, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6912      	ldr	r2, [r2, #16]
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4916      	ldr	r1, [pc, #88]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fa0e 	bl	800222c <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e14:	f7fe fa0a 	bl	800222c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
          break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4904      	ldr	r1, [pc, #16]	; (8003e54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e095      	b.n	8003f96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e7a:	d009      	beq.n	8003e90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	61da      	str	r2, [r3, #28]
 8003e82:	e005      	b.n	8003e90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd ff80 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed0:	d902      	bls.n	8003ed8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e002      	b.n	8003ede <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ee6:	d007      	beq.n	8003ef8 <HAL_SPI_Init+0xa0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	ea42 0103 	orr.w	r1, r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	0c1b      	lsrs	r3, r3, #16
 8003f54:	f003 0204 	and.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f74:	ea42 0103 	orr.w	r1, r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b088      	sub	sp, #32
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_SPI_Transmit+0x22>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e158      	b.n	8004272 <HAL_SPI_Transmit+0x2d4>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc8:	f7fe f930 	bl	800222c <HAL_GetTick>
 8003fcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fe2:	e13d      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Transmit+0x52>
 8003fea:	88fb      	ldrh	r3, [r7, #6]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ff4:	e134      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d10f      	bne.n	8004062 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d007      	beq.n	8004080 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004088:	d94b      	bls.n	8004122 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_Transmit+0xfa>
 8004092:	8afb      	ldrh	r3, [r7, #22]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d13e      	bne.n	8004116 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040bc:	e02b      	b.n	8004116 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d112      	bne.n	80040f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	881a      	ldrh	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	1c9a      	adds	r2, r3, #2
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f0:	e011      	b.n	8004116 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040f2:	f7fe f89b 	bl	800222c <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d803      	bhi.n	800410a <HAL_SPI_Transmit+0x16c>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d102      	bne.n	8004110 <HAL_SPI_Transmit+0x172>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004114:	e0a4      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ce      	bne.n	80040be <HAL_SPI_Transmit+0x120>
 8004120:	e07c      	b.n	800421c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Transmit+0x192>
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d170      	bne.n	8004212 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d912      	bls.n	8004160 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	881a      	ldrh	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	1c9a      	adds	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b02      	subs	r3, #2
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800415e:	e058      	b.n	8004212 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004186:	e044      	b.n	8004212 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d12b      	bne.n	80041ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d912      	bls.n	80041c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	1c9a      	adds	r2, r3, #2
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b02      	subs	r3, #2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c4:	e025      	b.n	8004212 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ec:	e011      	b.n	8004212 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ee:	f7fe f81d 	bl	800222c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d803      	bhi.n	8004206 <HAL_SPI_Transmit+0x268>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d102      	bne.n	800420c <HAL_SPI_Transmit+0x26e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004210:	e026      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1b5      	bne.n	8004188 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	6839      	ldr	r1, [r7, #0]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fce3 	bl	8004bec <SPI_EndRxTxTransaction>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e000      	b.n	8004260 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800425e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004270:	7ffb      	ldrb	r3, [r7, #31]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af02      	add	r7, sp, #8
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d112      	bne.n	80042be <HAL_SPI_Receive+0x44>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10e      	bne.n	80042be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f910 	bl	80044da <HAL_SPI_TransmitReceive>
 80042ba:	4603      	mov	r3, r0
 80042bc:	e109      	b.n	80044d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_SPI_Receive+0x52>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e102      	b.n	80044d2 <HAL_SPI_Receive+0x258>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d4:	f7fd ffaa 	bl	800222c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042ea:	e0e9      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Receive+0x7e>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fc:	e0e0      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2204      	movs	r2, #4
 8004302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d908      	bls.n	800435c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	e007      	b.n	800436c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d10f      	bne.n	8004396 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d007      	beq.n	80043b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d867      	bhi.n	800448e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043be:	e030      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d117      	bne.n	80043fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f103 020c 	add.w	r2, r3, #12
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80043fc:	e011      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fe:	f7fd ff15 	bl	800222c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_Receive+0x19c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_Receive+0x1a2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004420:	e04e      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c8      	bne.n	80043c0 <HAL_SPI_Receive+0x146>
 800442e:	e034      	b.n	800449a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d115      	bne.n	800446a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	b292      	uxth	r2, r2
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004468:	e011      	b.n	800448e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fd fedf 	bl	800222c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Receive+0x208>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Receive+0x20e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800448c:	e018      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ca      	bne.n	8004430 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fb4c 	bl	8004b3c <SPI_EndRxTransaction>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e000      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

error :
 80044be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x26>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e1fb      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x41e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004508:	f7fd fe90 	bl	800222c <HAL_GetTick>
 800450c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004514:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d00e      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004530:	d106      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
 800453a:	7efb      	ldrb	r3, [r7, #27]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004546:	e1cd      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004560:	e1c0      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b8:	d802      	bhi.n	80045c0 <HAL_SPI_TransmitReceive+0xe6>
 80045ba:	8a3b      	ldrh	r3, [r7, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d908      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e007      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d007      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004608:	d97c      	bls.n	8004704 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x13e>
 8004612:	8a7b      	ldrh	r3, [r7, #18]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d169      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463c:	e056      	b.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d113      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d11c      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	b292      	uxth	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046cc:	f7fd fdae 	bl	800222c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d807      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x212>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d003      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046ea:	e0fb      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1a3      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d19d      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 8004702:	e0df      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x23a>
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 80cb 	bne.w	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d912      	bls.n	8004744 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b02      	subs	r3, #2
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004742:	e0b2      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476a:	e09e      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d134      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02f      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12c      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d912      	bls.n	80047ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b02      	subs	r3, #2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b8:	e012      	b.n	80047e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d148      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d042      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d923      	bls.n	8004852 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	b292      	uxth	r2, r2
 8004816:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b02      	subs	r3, #2
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d81f      	bhi.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e016      	b.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f103 020c 	add.w	r2, r3, #12
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004884:	f7fd fcd2 	bl	800222c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_TransmitReceive+0x3c2>
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x3c8>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048a8:	e01c      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af5b 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f47f af54 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f98f 	bl	8004bec <SPI_EndRxTxTransaction>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	661a      	str	r2, [r3, #96]	; 0x60
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004910:	f7fd fc8c 	bl	800222c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4413      	add	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004920:	f7fd fc84 	bl	800222c <HAL_GetTick>
 8004924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	015b      	lsls	r3, r3, #5
 800492c:	0d1b      	lsrs	r3, r3, #20
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004936:	e054      	b.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d050      	beq.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004940:	f7fd fc74 	bl	800222c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	d902      	bls.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d13d      	bne.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d111      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	d004      	beq.n	8004984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d107      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d10f      	bne.n	80049be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e017      	b.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3b01      	subs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d19b      	bne.n	8004938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000000 	.word	0x20000000

08004a10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a22:	f7fd fc03 	bl	800222c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a32:	f7fd fbfb 	bl	800222c <HAL_GetTick>
 8004a36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	00da      	lsls	r2, r3, #3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	0d1b      	lsrs	r3, r3, #20
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a58:	e060      	b.n	8004b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a60:	d107      	bne.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d050      	beq.n	8004b1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a7a:	f7fd fbd7 	bl	800222c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d902      	bls.n	8004a90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d13d      	bne.n	8004b0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa8:	d111      	bne.n	8004ace <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab2:	d004      	beq.n	8004abe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d107      	bne.n	8004ace <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004acc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	d10f      	bne.n	8004af8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e010      	b.n	8004b2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4013      	ands	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d196      	bne.n	8004a5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3728      	adds	r7, #40	; 0x28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000000 	.word	0x20000000

08004b3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b50:	d111      	bne.n	8004b76 <SPI_EndRxTransaction+0x3a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5a:	d004      	beq.n	8004b66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b64:	d107      	bne.n	8004b76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2180      	movs	r1, #128	; 0x80
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7ff febd 	bl	8004900 <SPI_WaitFlagStateUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e023      	b.n	8004be4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba4:	d11d      	bne.n	8004be2 <SPI_EndRxTransaction+0xa6>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d004      	beq.n	8004bba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d113      	bne.n	8004be2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff ff22 	bl	8004a10 <SPI_WaitFifoStateUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e000      	b.n	8004be4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff ff03 	bl	8004a10 <SPI_WaitFifoStateUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	f043 0220 	orr.w	r2, r3, #32
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e027      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff fe68 	bl	8004900 <SPI_WaitFlagStateUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e014      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fedc 	bl	8004a10 <SPI_WaitFifoStateUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0220 	orr.w	r2, r3, #32
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e000      	b.n	8004c70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e040      	b.n	8004d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fd f8cc 	bl	8001e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8c0 	bl	8004e3c <UART_SetConfig>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e022      	b.n	8004d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fb6c 	bl	80053ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fbf3 	bl	80054f0 <UART_CheckIdleState>
 8004d0a:	4603      	mov	r3, r0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	f040 8082 	bne.w	8004e32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_Transmit+0x26>
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07a      	b.n	8004e34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit+0x38>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e073      	b.n	8004e34 <HAL_UART_Transmit+0x120>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	; 0x21
 8004d60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d62:	f7fd fa63 	bl	800222c <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Transmit+0x80>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004da4:	e02d      	b.n	8004e02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2180      	movs	r1, #128	; 0x80
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fbe6 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e039      	b.n	8004e34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10b      	bne.n	8004dde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	881a      	ldrh	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3302      	adds	r3, #2
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	e008      	b.n	8004df0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	b292      	uxth	r2, r2
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3301      	adds	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1cb      	bne.n	8004da6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2140      	movs	r1, #64	; 0x40
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fbb2 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e005      	b.n	8004e34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b08a      	sub	sp, #40	; 0x28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4ba4      	ldr	r3, [pc, #656]	; (80050fc <UART_SetConfig+0x2c0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a99      	ldr	r2, [pc, #612]	; (8005100 <UART_SetConfig+0x2c4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a90      	ldr	r2, [pc, #576]	; (8005104 <UART_SetConfig+0x2c8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d126      	bne.n	8004f14 <UART_SetConfig+0xd8>
 8004ec6:	4b90      	ldr	r3, [pc, #576]	; (8005108 <UART_SetConfig+0x2cc>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d81b      	bhi.n	8004f0c <UART_SetConfig+0xd0>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0xa0>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004efd 	.word	0x08004efd
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004f05 	.word	0x08004f05
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e116      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e112      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004efc:	2304      	movs	r3, #4
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e10e      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f04:	2308      	movs	r3, #8
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e10a      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f12:	e106      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a7c      	ldr	r2, [pc, #496]	; (800510c <UART_SetConfig+0x2d0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d138      	bne.n	8004f90 <UART_SetConfig+0x154>
 8004f1e:	4b7a      	ldr	r3, [pc, #488]	; (8005108 <UART_SetConfig+0x2cc>)
 8004f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	d82d      	bhi.n	8004f88 <UART_SetConfig+0x14c>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0xf8>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f69 	.word	0x08004f69
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f89 	.word	0x08004f89
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f79 	.word	0x08004f79
 8004f48:	08004f89 	.word	0x08004f89
 8004f4c:	08004f89 	.word	0x08004f89
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f71 	.word	0x08004f71
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	08004f81 	.word	0x08004f81
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e0d8      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f70:	2302      	movs	r3, #2
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e0d4      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e0d0      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f80:	2308      	movs	r3, #8
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e0cc      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8e:	e0c8      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a5e      	ldr	r2, [pc, #376]	; (8005110 <UART_SetConfig+0x2d4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d125      	bne.n	8004fe6 <UART_SetConfig+0x1aa>
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <UART_SetConfig+0x2cc>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d016      	beq.n	8004fd6 <UART_SetConfig+0x19a>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d818      	bhi.n	8004fde <UART_SetConfig+0x1a2>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d00a      	beq.n	8004fc6 <UART_SetConfig+0x18a>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d814      	bhi.n	8004fde <UART_SetConfig+0x1a2>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <UART_SetConfig+0x182>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d008      	beq.n	8004fce <UART_SetConfig+0x192>
 8004fbc:	e00f      	b.n	8004fde <UART_SetConfig+0x1a2>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc4:	e0ad      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fcc:	e0a9      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd4:	e0a5      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fdc:	e0a1      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004fde:	2310      	movs	r3, #16
 8004fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe4:	e09d      	b.n	8005122 <UART_SetConfig+0x2e6>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a4a      	ldr	r2, [pc, #296]	; (8005114 <UART_SetConfig+0x2d8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d125      	bne.n	800503c <UART_SetConfig+0x200>
 8004ff0:	4b45      	ldr	r3, [pc, #276]	; (8005108 <UART_SetConfig+0x2cc>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8004ffc:	d016      	beq.n	800502c <UART_SetConfig+0x1f0>
 8004ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8005000:	d818      	bhi.n	8005034 <UART_SetConfig+0x1f8>
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d00a      	beq.n	800501c <UART_SetConfig+0x1e0>
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d814      	bhi.n	8005034 <UART_SetConfig+0x1f8>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <UART_SetConfig+0x1d8>
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d008      	beq.n	8005024 <UART_SetConfig+0x1e8>
 8005012:	e00f      	b.n	8005034 <UART_SetConfig+0x1f8>
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501a:	e082      	b.n	8005122 <UART_SetConfig+0x2e6>
 800501c:	2302      	movs	r3, #2
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005022:	e07e      	b.n	8005122 <UART_SetConfig+0x2e6>
 8005024:	2304      	movs	r3, #4
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e07a      	b.n	8005122 <UART_SetConfig+0x2e6>
 800502c:	2308      	movs	r3, #8
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e076      	b.n	8005122 <UART_SetConfig+0x2e6>
 8005034:	2310      	movs	r3, #16
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e072      	b.n	8005122 <UART_SetConfig+0x2e6>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a35      	ldr	r2, [pc, #212]	; (8005118 <UART_SetConfig+0x2dc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d12a      	bne.n	800509c <UART_SetConfig+0x260>
 8005046:	4b30      	ldr	r3, [pc, #192]	; (8005108 <UART_SetConfig+0x2cc>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005054:	d01a      	beq.n	800508c <UART_SetConfig+0x250>
 8005056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505a:	d81b      	bhi.n	8005094 <UART_SetConfig+0x258>
 800505c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005060:	d00c      	beq.n	800507c <UART_SetConfig+0x240>
 8005062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005066:	d815      	bhi.n	8005094 <UART_SetConfig+0x258>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <UART_SetConfig+0x238>
 800506c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x248>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x258>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e052      	b.n	8005122 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e04e      	b.n	8005122 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e04a      	b.n	8005122 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e046      	b.n	8005122 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e042      	b.n	8005122 <UART_SetConfig+0x2e6>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <UART_SetConfig+0x2c4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d13a      	bne.n	800511c <UART_SetConfig+0x2e0>
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <UART_SetConfig+0x2cc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b4:	d01a      	beq.n	80050ec <UART_SetConfig+0x2b0>
 80050b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0x2b8>
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d00c      	beq.n	80050dc <UART_SetConfig+0x2a0>
 80050c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c6:	d815      	bhi.n	80050f4 <UART_SetConfig+0x2b8>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x298>
 80050cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x2a8>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x2b8>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e022      	b.n	8005122 <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e01e      	b.n	8005122 <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e01a      	b.n	8005122 <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e016      	b.n	8005122 <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e012      	b.n	8005122 <UART_SetConfig+0x2e6>
 80050fc:	efff69f3 	.word	0xefff69f3
 8005100:	40008000 	.word	0x40008000
 8005104:	40013800 	.word	0x40013800
 8005108:	40021000 	.word	0x40021000
 800510c:	40004400 	.word	0x40004400
 8005110:	40004800 	.word	0x40004800
 8005114:	40004c00 	.word	0x40004c00
 8005118:	40005000 	.word	0x40005000
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a9f      	ldr	r2, [pc, #636]	; (80053a4 <UART_SetConfig+0x568>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d17a      	bne.n	8005222 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800512c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005130:	2b08      	cmp	r3, #8
 8005132:	d824      	bhi.n	800517e <UART_SetConfig+0x342>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x300>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005161 	.word	0x08005161
 8005140:	0800517f 	.word	0x0800517f
 8005144:	08005169 	.word	0x08005169
 8005148:	0800517f 	.word	0x0800517f
 800514c:	0800516f 	.word	0x0800516f
 8005150:	0800517f 	.word	0x0800517f
 8005154:	0800517f 	.word	0x0800517f
 8005158:	0800517f 	.word	0x0800517f
 800515c:	08005177 	.word	0x08005177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005160:	f7fe f922 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8005164:	61f8      	str	r0, [r7, #28]
        break;
 8005166:	e010      	b.n	800518a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005168:	4b8f      	ldr	r3, [pc, #572]	; (80053a8 <UART_SetConfig+0x56c>)
 800516a:	61fb      	str	r3, [r7, #28]
        break;
 800516c:	e00d      	b.n	800518a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516e:	f7fe f883 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8005172:	61f8      	str	r0, [r7, #28]
        break;
 8005174:	e009      	b.n	800518a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517a:	61fb      	str	r3, [r7, #28]
        break;
 800517c:	e005      	b.n	800518a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80fb 	beq.w	8005388 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d305      	bcc.n	80051ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d903      	bls.n	80051b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b4:	e0e8      	b.n	8005388 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2200      	movs	r2, #0
 80051ba:	461c      	mov	r4, r3
 80051bc:	4615      	mov	r5, r2
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	022b      	lsls	r3, r5, #8
 80051c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051cc:	0222      	lsls	r2, r4, #8
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6849      	ldr	r1, [r1, #4]
 80051d2:	0849      	lsrs	r1, r1, #1
 80051d4:	2000      	movs	r0, #0
 80051d6:	4688      	mov	r8, r1
 80051d8:	4681      	mov	r9, r0
 80051da:	eb12 0a08 	adds.w	sl, r2, r8
 80051de:	eb43 0b09 	adc.w	fp, r3, r9
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f0:	4650      	mov	r0, sl
 80051f2:	4659      	mov	r1, fp
 80051f4:	f7fb fd48 	bl	8000c88 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005206:	d308      	bcc.n	800521a <UART_SetConfig+0x3de>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520e:	d204      	bcs.n	800521a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]
 8005218:	e0b6      	b.n	8005388 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005220:	e0b2      	b.n	8005388 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d15e      	bne.n	80052ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800522c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005230:	2b08      	cmp	r3, #8
 8005232:	d828      	bhi.n	8005286 <UART_SetConfig+0x44a>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x400>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe f8a2 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8005264:	61f8      	str	r0, [r7, #28]
        break;
 8005266:	e014      	b.n	8005292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7fe f8b4 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 800526c:	61f8      	str	r0, [r7, #28]
        break;
 800526e:	e010      	b.n	8005292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <UART_SetConfig+0x56c>)
 8005272:	61fb      	str	r3, [r7, #28]
        break;
 8005274:	e00d      	b.n	8005292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fd ffff 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 800527a:	61f8      	str	r0, [r7, #28]
        break;
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61fb      	str	r3, [r7, #28]
        break;
 8005284:	e005      	b.n	8005292 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d077      	beq.n	8005388 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	005a      	lsls	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	441a      	add	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d916      	bls.n	80052e2 <UART_SetConfig+0x4a6>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ba:	d212      	bcs.n	80052e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f023 030f 	bic.w	r3, r3, #15
 80052c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	8afb      	ldrh	r3, [r7, #22]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	8afa      	ldrh	r2, [r7, #22]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e052      	b.n	8005388 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052e8:	e04e      	b.n	8005388 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d827      	bhi.n	8005342 <UART_SetConfig+0x506>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0x4bc>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	08005343 	.word	0x08005343
 8005308:	08005333 	.word	0x08005333
 800530c:	08005343 	.word	0x08005343
 8005310:	08005343 	.word	0x08005343
 8005314:	08005343 	.word	0x08005343
 8005318:	0800533b 	.word	0x0800533b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fe f844 	bl	80033a8 <HAL_RCC_GetPCLK1Freq>
 8005320:	61f8      	str	r0, [r7, #28]
        break;
 8005322:	e014      	b.n	800534e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe f856 	bl	80033d4 <HAL_RCC_GetPCLK2Freq>
 8005328:	61f8      	str	r0, [r7, #28]
        break;
 800532a:	e010      	b.n	800534e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <UART_SetConfig+0x56c>)
 800532e:	61fb      	str	r3, [r7, #28]
        break;
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fd ffa1 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8005336:	61f8      	str	r0, [r7, #28]
        break;
 8005338:	e009      	b.n	800534e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533e:	61fb      	str	r3, [r7, #28]
        break;
 8005340:	e005      	b.n	800534e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800534c:	bf00      	nop
    }

    if (pclk != 0U)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d019      	beq.n	8005388 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	085a      	lsrs	r2, r3, #1
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	441a      	add	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b0f      	cmp	r3, #15
 800536c:	d909      	bls.n	8005382 <UART_SetConfig+0x546>
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d205      	bcs.n	8005382 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e002      	b.n	8005388 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005394:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a2:	bf00      	nop
 80053a4:	40008000 	.word	0x40008000
 80053a8:	00f42400 	.word	0x00f42400

080053ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054aa:	d10a      	bne.n	80054c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005500:	f7fc fe94 	bl	800222c <HAL_GetTick>
 8005504:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10e      	bne.n	8005532 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f82d 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e023      	b.n	800557a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d10e      	bne.n	800555e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f817 	bl	8005582 <UART_WaitOnFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e00d      	b.n	800557a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b09c      	sub	sp, #112	; 0x70
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005592:	e0a5      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	f000 80a1 	beq.w	80056e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fc fe45 	bl	800222c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80055ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d13e      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e6      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	663b      	str	r3, [r7, #96]	; 0x60
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005606:	64ba      	str	r2, [r7, #72]	; 0x48
 8005608:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800560c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e5      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e067      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d04f      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	d147      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005658:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
 800567a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e6      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	e853 3f00 	ldrex	r3, [r3]
 800569a:	613b      	str	r3, [r7, #16]
   return(result);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056ac:	623a      	str	r2, [r7, #32]
 80056ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	69f9      	ldr	r1, [r7, #28]
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	e841 2300 	strex	r3, r2, [r1]
 80056b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e5      	bne.n	800568c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f43f af4a 	beq.w	8005594 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3770      	adds	r7, #112	; 0x70
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <__errno>:
 800570c:	4b01      	ldr	r3, [pc, #4]	; (8005714 <__errno+0x8>)
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	2000000c 	.word	0x2000000c

08005718 <__libc_init_array>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4d0d      	ldr	r5, [pc, #52]	; (8005750 <__libc_init_array+0x38>)
 800571c:	4c0d      	ldr	r4, [pc, #52]	; (8005754 <__libc_init_array+0x3c>)
 800571e:	1b64      	subs	r4, r4, r5
 8005720:	10a4      	asrs	r4, r4, #2
 8005722:	2600      	movs	r6, #0
 8005724:	42a6      	cmp	r6, r4
 8005726:	d109      	bne.n	800573c <__libc_init_array+0x24>
 8005728:	4d0b      	ldr	r5, [pc, #44]	; (8005758 <__libc_init_array+0x40>)
 800572a:	4c0c      	ldr	r4, [pc, #48]	; (800575c <__libc_init_array+0x44>)
 800572c:	f004 fca8 	bl	800a080 <_init>
 8005730:	1b64      	subs	r4, r4, r5
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	2600      	movs	r6, #0
 8005736:	42a6      	cmp	r6, r4
 8005738:	d105      	bne.n	8005746 <__libc_init_array+0x2e>
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005740:	4798      	blx	r3
 8005742:	3601      	adds	r6, #1
 8005744:	e7ee      	b.n	8005724 <__libc_init_array+0xc>
 8005746:	f855 3b04 	ldr.w	r3, [r5], #4
 800574a:	4798      	blx	r3
 800574c:	3601      	adds	r6, #1
 800574e:	e7f2      	b.n	8005736 <__libc_init_array+0x1e>
 8005750:	0800a604 	.word	0x0800a604
 8005754:	0800a604 	.word	0x0800a604
 8005758:	0800a604 	.word	0x0800a604
 800575c:	0800a608 	.word	0x0800a608

08005760 <memset>:
 8005760:	4402      	add	r2, r0
 8005762:	4603      	mov	r3, r0
 8005764:	4293      	cmp	r3, r2
 8005766:	d100      	bne.n	800576a <memset+0xa>
 8005768:	4770      	bx	lr
 800576a:	f803 1b01 	strb.w	r1, [r3], #1
 800576e:	e7f9      	b.n	8005764 <memset+0x4>

08005770 <__cvt>:
 8005770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	ec55 4b10 	vmov	r4, r5, d0
 8005778:	2d00      	cmp	r5, #0
 800577a:	460e      	mov	r6, r1
 800577c:	4619      	mov	r1, r3
 800577e:	462b      	mov	r3, r5
 8005780:	bfbb      	ittet	lt
 8005782:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005786:	461d      	movlt	r5, r3
 8005788:	2300      	movge	r3, #0
 800578a:	232d      	movlt	r3, #45	; 0x2d
 800578c:	700b      	strb	r3, [r1, #0]
 800578e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005790:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005794:	4691      	mov	r9, r2
 8005796:	f023 0820 	bic.w	r8, r3, #32
 800579a:	bfbc      	itt	lt
 800579c:	4622      	movlt	r2, r4
 800579e:	4614      	movlt	r4, r2
 80057a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a4:	d005      	beq.n	80057b2 <__cvt+0x42>
 80057a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057aa:	d100      	bne.n	80057ae <__cvt+0x3e>
 80057ac:	3601      	adds	r6, #1
 80057ae:	2102      	movs	r1, #2
 80057b0:	e000      	b.n	80057b4 <__cvt+0x44>
 80057b2:	2103      	movs	r1, #3
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	ab02      	add	r3, sp, #8
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	ec45 4b10 	vmov	d0, r4, r5
 80057c0:	4653      	mov	r3, sl
 80057c2:	4632      	mov	r2, r6
 80057c4:	f001 fdc4 	bl	8007350 <_dtoa_r>
 80057c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057cc:	4607      	mov	r7, r0
 80057ce:	d102      	bne.n	80057d6 <__cvt+0x66>
 80057d0:	f019 0f01 	tst.w	r9, #1
 80057d4:	d022      	beq.n	800581c <__cvt+0xac>
 80057d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057da:	eb07 0906 	add.w	r9, r7, r6
 80057de:	d110      	bne.n	8005802 <__cvt+0x92>
 80057e0:	783b      	ldrb	r3, [r7, #0]
 80057e2:	2b30      	cmp	r3, #48	; 0x30
 80057e4:	d10a      	bne.n	80057fc <__cvt+0x8c>
 80057e6:	2200      	movs	r2, #0
 80057e8:	2300      	movs	r3, #0
 80057ea:	4620      	mov	r0, r4
 80057ec:	4629      	mov	r1, r5
 80057ee:	f7fb f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80057f2:	b918      	cbnz	r0, 80057fc <__cvt+0x8c>
 80057f4:	f1c6 0601 	rsb	r6, r6, #1
 80057f8:	f8ca 6000 	str.w	r6, [sl]
 80057fc:	f8da 3000 	ldr.w	r3, [sl]
 8005800:	4499      	add	r9, r3
 8005802:	2200      	movs	r2, #0
 8005804:	2300      	movs	r3, #0
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fb f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800580e:	b108      	cbz	r0, 8005814 <__cvt+0xa4>
 8005810:	f8cd 900c 	str.w	r9, [sp, #12]
 8005814:	2230      	movs	r2, #48	; 0x30
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	454b      	cmp	r3, r9
 800581a:	d307      	bcc.n	800582c <__cvt+0xbc>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005820:	1bdb      	subs	r3, r3, r7
 8005822:	4638      	mov	r0, r7
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	b004      	add	sp, #16
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	9103      	str	r1, [sp, #12]
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e7f0      	b.n	8005816 <__cvt+0xa6>

08005834 <__exponent>:
 8005834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005836:	4603      	mov	r3, r0
 8005838:	2900      	cmp	r1, #0
 800583a:	bfb8      	it	lt
 800583c:	4249      	neglt	r1, r1
 800583e:	f803 2b02 	strb.w	r2, [r3], #2
 8005842:	bfb4      	ite	lt
 8005844:	222d      	movlt	r2, #45	; 0x2d
 8005846:	222b      	movge	r2, #43	; 0x2b
 8005848:	2909      	cmp	r1, #9
 800584a:	7042      	strb	r2, [r0, #1]
 800584c:	dd2a      	ble.n	80058a4 <__exponent+0x70>
 800584e:	f10d 0407 	add.w	r4, sp, #7
 8005852:	46a4      	mov	ip, r4
 8005854:	270a      	movs	r7, #10
 8005856:	46a6      	mov	lr, r4
 8005858:	460a      	mov	r2, r1
 800585a:	fb91 f6f7 	sdiv	r6, r1, r7
 800585e:	fb07 1516 	mls	r5, r7, r6, r1
 8005862:	3530      	adds	r5, #48	; 0x30
 8005864:	2a63      	cmp	r2, #99	; 0x63
 8005866:	f104 34ff 	add.w	r4, r4, #4294967295
 800586a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800586e:	4631      	mov	r1, r6
 8005870:	dcf1      	bgt.n	8005856 <__exponent+0x22>
 8005872:	3130      	adds	r1, #48	; 0x30
 8005874:	f1ae 0502 	sub.w	r5, lr, #2
 8005878:	f804 1c01 	strb.w	r1, [r4, #-1]
 800587c:	1c44      	adds	r4, r0, #1
 800587e:	4629      	mov	r1, r5
 8005880:	4561      	cmp	r1, ip
 8005882:	d30a      	bcc.n	800589a <__exponent+0x66>
 8005884:	f10d 0209 	add.w	r2, sp, #9
 8005888:	eba2 020e 	sub.w	r2, r2, lr
 800588c:	4565      	cmp	r5, ip
 800588e:	bf88      	it	hi
 8005890:	2200      	movhi	r2, #0
 8005892:	4413      	add	r3, r2
 8005894:	1a18      	subs	r0, r3, r0
 8005896:	b003      	add	sp, #12
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058a2:	e7ed      	b.n	8005880 <__exponent+0x4c>
 80058a4:	2330      	movs	r3, #48	; 0x30
 80058a6:	3130      	adds	r1, #48	; 0x30
 80058a8:	7083      	strb	r3, [r0, #2]
 80058aa:	70c1      	strb	r1, [r0, #3]
 80058ac:	1d03      	adds	r3, r0, #4
 80058ae:	e7f1      	b.n	8005894 <__exponent+0x60>

080058b0 <_printf_float>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	ed2d 8b02 	vpush	{d8}
 80058b8:	b08d      	sub	sp, #52	; 0x34
 80058ba:	460c      	mov	r4, r1
 80058bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058c0:	4616      	mov	r6, r2
 80058c2:	461f      	mov	r7, r3
 80058c4:	4605      	mov	r5, r0
 80058c6:	f002 ff95 	bl	80087f4 <_localeconv_r>
 80058ca:	f8d0 a000 	ldr.w	sl, [r0]
 80058ce:	4650      	mov	r0, sl
 80058d0:	f7fa fc7e 	bl	80001d0 <strlen>
 80058d4:	2300      	movs	r3, #0
 80058d6:	930a      	str	r3, [sp, #40]	; 0x28
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	f8d8 3000 	ldr.w	r3, [r8]
 80058e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058e4:	3307      	adds	r3, #7
 80058e6:	f023 0307 	bic.w	r3, r3, #7
 80058ea:	f103 0208 	add.w	r2, r3, #8
 80058ee:	f8c8 2000 	str.w	r2, [r8]
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005902:	9307      	str	r3, [sp, #28]
 8005904:	f8cd 8018 	str.w	r8, [sp, #24]
 8005908:	ee08 0a10 	vmov	s16, r0
 800590c:	4b9f      	ldr	r3, [pc, #636]	; (8005b8c <_printf_float+0x2dc>)
 800590e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	f7fb f909 	bl	8000b2c <__aeabi_dcmpun>
 800591a:	bb88      	cbnz	r0, 8005980 <_printf_float+0xd0>
 800591c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005920:	4b9a      	ldr	r3, [pc, #616]	; (8005b8c <_printf_float+0x2dc>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	f7fb f8e3 	bl	8000af0 <__aeabi_dcmple>
 800592a:	bb48      	cbnz	r0, 8005980 <_printf_float+0xd0>
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	4640      	mov	r0, r8
 8005932:	4649      	mov	r1, r9
 8005934:	f7fb f8d2 	bl	8000adc <__aeabi_dcmplt>
 8005938:	b110      	cbz	r0, 8005940 <_printf_float+0x90>
 800593a:	232d      	movs	r3, #45	; 0x2d
 800593c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005940:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <_printf_float+0x2e0>)
 8005942:	4894      	ldr	r0, [pc, #592]	; (8005b94 <_printf_float+0x2e4>)
 8005944:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005948:	bf94      	ite	ls
 800594a:	4698      	movls	r8, r3
 800594c:	4680      	movhi	r8, r0
 800594e:	2303      	movs	r3, #3
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	f023 0204 	bic.w	r2, r3, #4
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	f04f 0900 	mov.w	r9, #0
 800595e:	9700      	str	r7, [sp, #0]
 8005960:	4633      	mov	r3, r6
 8005962:	aa0b      	add	r2, sp, #44	; 0x2c
 8005964:	4621      	mov	r1, r4
 8005966:	4628      	mov	r0, r5
 8005968:	f000 f9d8 	bl	8005d1c <_printf_common>
 800596c:	3001      	adds	r0, #1
 800596e:	f040 8090 	bne.w	8005a92 <_printf_float+0x1e2>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	b00d      	add	sp, #52	; 0x34
 8005978:	ecbd 8b02 	vpop	{d8}
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8d0 	bl	8000b2c <__aeabi_dcmpun>
 800598c:	b140      	cbz	r0, 80059a0 <_printf_float+0xf0>
 800598e:	464b      	mov	r3, r9
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfbc      	itt	lt
 8005994:	232d      	movlt	r3, #45	; 0x2d
 8005996:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800599a:	487f      	ldr	r0, [pc, #508]	; (8005b98 <_printf_float+0x2e8>)
 800599c:	4b7f      	ldr	r3, [pc, #508]	; (8005b9c <_printf_float+0x2ec>)
 800599e:	e7d1      	b.n	8005944 <_printf_float+0x94>
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059a6:	9206      	str	r2, [sp, #24]
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	d13f      	bne.n	8005a2c <_printf_float+0x17c>
 80059ac:	2306      	movs	r3, #6
 80059ae:	6063      	str	r3, [r4, #4]
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	6861      	ldr	r1, [r4, #4]
 80059b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059b8:	2300      	movs	r3, #0
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	ab0a      	add	r3, sp, #40	; 0x28
 80059be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059c2:	ab09      	add	r3, sp, #36	; 0x24
 80059c4:	ec49 8b10 	vmov	d0, r8, r9
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fecd 	bl	8005770 <__cvt>
 80059d6:	9b06      	ldr	r3, [sp, #24]
 80059d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059da:	2b47      	cmp	r3, #71	; 0x47
 80059dc:	4680      	mov	r8, r0
 80059de:	d108      	bne.n	80059f2 <_printf_float+0x142>
 80059e0:	1cc8      	adds	r0, r1, #3
 80059e2:	db02      	blt.n	80059ea <_printf_float+0x13a>
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	4299      	cmp	r1, r3
 80059e8:	dd41      	ble.n	8005a6e <_printf_float+0x1be>
 80059ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80059ee:	fa5f fb8b 	uxtb.w	fp, fp
 80059f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059f6:	d820      	bhi.n	8005a3a <_printf_float+0x18a>
 80059f8:	3901      	subs	r1, #1
 80059fa:	465a      	mov	r2, fp
 80059fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a00:	9109      	str	r1, [sp, #36]	; 0x24
 8005a02:	f7ff ff17 	bl	8005834 <__exponent>
 8005a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a08:	1813      	adds	r3, r2, r0
 8005a0a:	2a01      	cmp	r2, #1
 8005a0c:	4681      	mov	r9, r0
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	dc02      	bgt.n	8005a18 <_printf_float+0x168>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	07d2      	lsls	r2, r2, #31
 8005a16:	d501      	bpl.n	8005a1c <_printf_float+0x16c>
 8005a18:	3301      	adds	r3, #1
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d09c      	beq.n	800595e <_printf_float+0xae>
 8005a24:	232d      	movs	r3, #45	; 0x2d
 8005a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2a:	e798      	b.n	800595e <_printf_float+0xae>
 8005a2c:	9a06      	ldr	r2, [sp, #24]
 8005a2e:	2a47      	cmp	r2, #71	; 0x47
 8005a30:	d1be      	bne.n	80059b0 <_printf_float+0x100>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1bc      	bne.n	80059b0 <_printf_float+0x100>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e7b9      	b.n	80059ae <_printf_float+0xfe>
 8005a3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a3e:	d118      	bne.n	8005a72 <_printf_float+0x1c2>
 8005a40:	2900      	cmp	r1, #0
 8005a42:	6863      	ldr	r3, [r4, #4]
 8005a44:	dd0b      	ble.n	8005a5e <_printf_float+0x1ae>
 8005a46:	6121      	str	r1, [r4, #16]
 8005a48:	b913      	cbnz	r3, 8005a50 <_printf_float+0x1a0>
 8005a4a:	6822      	ldr	r2, [r4, #0]
 8005a4c:	07d0      	lsls	r0, r2, #31
 8005a4e:	d502      	bpl.n	8005a56 <_printf_float+0x1a6>
 8005a50:	3301      	adds	r3, #1
 8005a52:	440b      	add	r3, r1
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a58:	f04f 0900 	mov.w	r9, #0
 8005a5c:	e7de      	b.n	8005a1c <_printf_float+0x16c>
 8005a5e:	b913      	cbnz	r3, 8005a66 <_printf_float+0x1b6>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	07d2      	lsls	r2, r2, #31
 8005a64:	d501      	bpl.n	8005a6a <_printf_float+0x1ba>
 8005a66:	3302      	adds	r3, #2
 8005a68:	e7f4      	b.n	8005a54 <_printf_float+0x1a4>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e7f2      	b.n	8005a54 <_printf_float+0x1a4>
 8005a6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	4299      	cmp	r1, r3
 8005a76:	db05      	blt.n	8005a84 <_printf_float+0x1d4>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	6121      	str	r1, [r4, #16]
 8005a7c:	07d8      	lsls	r0, r3, #31
 8005a7e:	d5ea      	bpl.n	8005a56 <_printf_float+0x1a6>
 8005a80:	1c4b      	adds	r3, r1, #1
 8005a82:	e7e7      	b.n	8005a54 <_printf_float+0x1a4>
 8005a84:	2900      	cmp	r1, #0
 8005a86:	bfd4      	ite	le
 8005a88:	f1c1 0202 	rsble	r2, r1, #2
 8005a8c:	2201      	movgt	r2, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	e7e0      	b.n	8005a54 <_printf_float+0x1a4>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	055a      	lsls	r2, r3, #21
 8005a96:	d407      	bmi.n	8005aa8 <_printf_float+0x1f8>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d12c      	bne.n	8005b00 <_printf_float+0x250>
 8005aa6:	e764      	b.n	8005972 <_printf_float+0xc2>
 8005aa8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aac:	f240 80e0 	bls.w	8005c70 <_printf_float+0x3c0>
 8005ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f7fb f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d034      	beq.n	8005b2a <_printf_float+0x27a>
 8005ac0:	4a37      	ldr	r2, [pc, #220]	; (8005ba0 <_printf_float+0x2f0>)
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	47b8      	blx	r7
 8005aca:	3001      	adds	r0, #1
 8005acc:	f43f af51 	beq.w	8005972 <_printf_float+0xc2>
 8005ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	db02      	blt.n	8005ade <_printf_float+0x22e>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	07d8      	lsls	r0, r3, #31
 8005adc:	d510      	bpl.n	8005b00 <_printf_float+0x250>
 8005ade:	ee18 3a10 	vmov	r3, s16
 8005ae2:	4652      	mov	r2, sl
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af41 	beq.w	8005972 <_printf_float+0xc2>
 8005af0:	f04f 0800 	mov.w	r8, #0
 8005af4:	f104 091a 	add.w	r9, r4, #26
 8005af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	4543      	cmp	r3, r8
 8005afe:	dc09      	bgt.n	8005b14 <_printf_float+0x264>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	079b      	lsls	r3, r3, #30
 8005b04:	f100 8105 	bmi.w	8005d12 <_printf_float+0x462>
 8005b08:	68e0      	ldr	r0, [r4, #12]
 8005b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0c:	4298      	cmp	r0, r3
 8005b0e:	bfb8      	it	lt
 8005b10:	4618      	movlt	r0, r3
 8005b12:	e730      	b.n	8005976 <_printf_float+0xc6>
 8005b14:	2301      	movs	r3, #1
 8005b16:	464a      	mov	r2, r9
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f af27 	beq.w	8005972 <_printf_float+0xc2>
 8005b24:	f108 0801 	add.w	r8, r8, #1
 8005b28:	e7e6      	b.n	8005af8 <_printf_float+0x248>
 8005b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	dc39      	bgt.n	8005ba4 <_printf_float+0x2f4>
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <_printf_float+0x2f0>)
 8005b32:	2301      	movs	r3, #1
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af19 	beq.w	8005972 <_printf_float+0xc2>
 8005b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b44:	4313      	orrs	r3, r2
 8005b46:	d102      	bne.n	8005b4e <_printf_float+0x29e>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	d5d8      	bpl.n	8005b00 <_printf_float+0x250>
 8005b4e:	ee18 3a10 	vmov	r3, s16
 8005b52:	4652      	mov	r2, sl
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af09 	beq.w	8005972 <_printf_float+0xc2>
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	f104 0a1a 	add.w	sl, r4, #26
 8005b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6a:	425b      	negs	r3, r3
 8005b6c:	454b      	cmp	r3, r9
 8005b6e:	dc01      	bgt.n	8005b74 <_printf_float+0x2c4>
 8005b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b72:	e792      	b.n	8005a9a <_printf_float+0x1ea>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4652      	mov	r2, sl
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f43f aef7 	beq.w	8005972 <_printf_float+0xc2>
 8005b84:	f109 0901 	add.w	r9, r9, #1
 8005b88:	e7ee      	b.n	8005b68 <_printf_float+0x2b8>
 8005b8a:	bf00      	nop
 8005b8c:	7fefffff 	.word	0x7fefffff
 8005b90:	0800a150 	.word	0x0800a150
 8005b94:	0800a154 	.word	0x0800a154
 8005b98:	0800a15c 	.word	0x0800a15c
 8005b9c:	0800a158 	.word	0x0800a158
 8005ba0:	0800a160 	.word	0x0800a160
 8005ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ba6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bfa8      	it	ge
 8005bac:	461a      	movge	r2, r3
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	4691      	mov	r9, r2
 8005bb2:	dc37      	bgt.n	8005c24 <_printf_float+0x374>
 8005bb4:	f04f 0b00 	mov.w	fp, #0
 8005bb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bbc:	f104 021a 	add.w	r2, r4, #26
 8005bc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bc2:	9305      	str	r3, [sp, #20]
 8005bc4:	eba3 0309 	sub.w	r3, r3, r9
 8005bc8:	455b      	cmp	r3, fp
 8005bca:	dc33      	bgt.n	8005c34 <_printf_float+0x384>
 8005bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	db3b      	blt.n	8005c4c <_printf_float+0x39c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07da      	lsls	r2, r3, #31
 8005bd8:	d438      	bmi.n	8005c4c <_printf_float+0x39c>
 8005bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bdc:	9a05      	ldr	r2, [sp, #20]
 8005bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be0:	1a9a      	subs	r2, r3, r2
 8005be2:	eba3 0901 	sub.w	r9, r3, r1
 8005be6:	4591      	cmp	r9, r2
 8005be8:	bfa8      	it	ge
 8005bea:	4691      	movge	r9, r2
 8005bec:	f1b9 0f00 	cmp.w	r9, #0
 8005bf0:	dc35      	bgt.n	8005c5e <_printf_float+0x3ae>
 8005bf2:	f04f 0800 	mov.w	r8, #0
 8005bf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfa:	f104 0a1a 	add.w	sl, r4, #26
 8005bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	eba3 0309 	sub.w	r3, r3, r9
 8005c08:	4543      	cmp	r3, r8
 8005c0a:	f77f af79 	ble.w	8005b00 <_printf_float+0x250>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4652      	mov	r2, sl
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b8      	blx	r7
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f43f aeaa 	beq.w	8005972 <_printf_float+0xc2>
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	e7ec      	b.n	8005bfe <_printf_float+0x34e>
 8005c24:	4613      	mov	r3, r2
 8005c26:	4631      	mov	r1, r6
 8005c28:	4642      	mov	r2, r8
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d1c0      	bne.n	8005bb4 <_printf_float+0x304>
 8005c32:	e69e      	b.n	8005972 <_printf_float+0xc2>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	9205      	str	r2, [sp, #20]
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f ae97 	beq.w	8005972 <_printf_float+0xc2>
 8005c44:	9a05      	ldr	r2, [sp, #20]
 8005c46:	f10b 0b01 	add.w	fp, fp, #1
 8005c4a:	e7b9      	b.n	8005bc0 <_printf_float+0x310>
 8005c4c:	ee18 3a10 	vmov	r3, s16
 8005c50:	4652      	mov	r2, sl
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1be      	bne.n	8005bda <_printf_float+0x32a>
 8005c5c:	e689      	b.n	8005972 <_printf_float+0xc2>
 8005c5e:	9a05      	ldr	r2, [sp, #20]
 8005c60:	464b      	mov	r3, r9
 8005c62:	4442      	add	r2, r8
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d1c1      	bne.n	8005bf2 <_printf_float+0x342>
 8005c6e:	e680      	b.n	8005972 <_printf_float+0xc2>
 8005c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c72:	2a01      	cmp	r2, #1
 8005c74:	dc01      	bgt.n	8005c7a <_printf_float+0x3ca>
 8005c76:	07db      	lsls	r3, r3, #31
 8005c78:	d538      	bpl.n	8005cec <_printf_float+0x43c>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	f43f ae74 	beq.w	8005972 <_printf_float+0xc2>
 8005c8a:	ee18 3a10 	vmov	r3, s16
 8005c8e:	4652      	mov	r2, sl
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f ae6b 	beq.w	8005972 <_printf_float+0xc2>
 8005c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f7fa ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca8:	b9d8      	cbnz	r0, 8005ce2 <_printf_float+0x432>
 8005caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cac:	f108 0201 	add.w	r2, r8, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d10e      	bne.n	8005cda <_printf_float+0x42a>
 8005cbc:	e659      	b.n	8005972 <_printf_float+0xc2>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae52 	beq.w	8005972 <_printf_float+0xc2>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	4543      	cmp	r3, r8
 8005cd8:	dcf1      	bgt.n	8005cbe <_printf_float+0x40e>
 8005cda:	464b      	mov	r3, r9
 8005cdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ce0:	e6dc      	b.n	8005a9c <_printf_float+0x1ec>
 8005ce2:	f04f 0800 	mov.w	r8, #0
 8005ce6:	f104 0a1a 	add.w	sl, r4, #26
 8005cea:	e7f2      	b.n	8005cd2 <_printf_float+0x422>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4642      	mov	r2, r8
 8005cf0:	e7df      	b.n	8005cb2 <_printf_float+0x402>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	464a      	mov	r2, r9
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	f43f ae38 	beq.w	8005972 <_printf_float+0xc2>
 8005d02:	f108 0801 	add.w	r8, r8, #1
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d0a:	1a5b      	subs	r3, r3, r1
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	dcf0      	bgt.n	8005cf2 <_printf_float+0x442>
 8005d10:	e6fa      	b.n	8005b08 <_printf_float+0x258>
 8005d12:	f04f 0800 	mov.w	r8, #0
 8005d16:	f104 0919 	add.w	r9, r4, #25
 8005d1a:	e7f4      	b.n	8005d06 <_printf_float+0x456>

08005d1c <_printf_common>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	4616      	mov	r6, r2
 8005d22:	4699      	mov	r9, r3
 8005d24:	688a      	ldr	r2, [r1, #8]
 8005d26:	690b      	ldr	r3, [r1, #16]
 8005d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bfb8      	it	lt
 8005d30:	4613      	movlt	r3, r2
 8005d32:	6033      	str	r3, [r6, #0]
 8005d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d38:	4607      	mov	r7, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	b10a      	cbz	r2, 8005d42 <_printf_common+0x26>
 8005d3e:	3301      	adds	r3, #1
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	6833      	ldrmi	r3, [r6, #0]
 8005d4a:	3302      	addmi	r3, #2
 8005d4c:	6033      	strmi	r3, [r6, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	f015 0506 	ands.w	r5, r5, #6
 8005d54:	d106      	bne.n	8005d64 <_printf_common+0x48>
 8005d56:	f104 0a19 	add.w	sl, r4, #25
 8005d5a:	68e3      	ldr	r3, [r4, #12]
 8005d5c:	6832      	ldr	r2, [r6, #0]
 8005d5e:	1a9b      	subs	r3, r3, r2
 8005d60:	42ab      	cmp	r3, r5
 8005d62:	dc26      	bgt.n	8005db2 <_printf_common+0x96>
 8005d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d68:	1e13      	subs	r3, r2, #0
 8005d6a:	6822      	ldr	r2, [r4, #0]
 8005d6c:	bf18      	it	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	0692      	lsls	r2, r2, #26
 8005d72:	d42b      	bmi.n	8005dcc <_printf_common+0xb0>
 8005d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d78:	4649      	mov	r1, r9
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	47c0      	blx	r8
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d01e      	beq.n	8005dc0 <_printf_common+0xa4>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	68e5      	ldr	r5, [r4, #12]
 8005d86:	6832      	ldr	r2, [r6, #0]
 8005d88:	f003 0306 	and.w	r3, r3, #6
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	bf08      	it	eq
 8005d90:	1aad      	subeq	r5, r5, r2
 8005d92:	68a3      	ldr	r3, [r4, #8]
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	bf0c      	ite	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	2500      	movne	r5, #0
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	bfc4      	itt	gt
 8005da2:	1a9b      	subgt	r3, r3, r2
 8005da4:	18ed      	addgt	r5, r5, r3
 8005da6:	2600      	movs	r6, #0
 8005da8:	341a      	adds	r4, #26
 8005daa:	42b5      	cmp	r5, r6
 8005dac:	d11a      	bne.n	8005de4 <_printf_common+0xc8>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e008      	b.n	8005dc4 <_printf_common+0xa8>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4652      	mov	r2, sl
 8005db6:	4649      	mov	r1, r9
 8005db8:	4638      	mov	r0, r7
 8005dba:	47c0      	blx	r8
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d103      	bne.n	8005dc8 <_printf_common+0xac>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc8:	3501      	adds	r5, #1
 8005dca:	e7c6      	b.n	8005d5a <_printf_common+0x3e>
 8005dcc:	18e1      	adds	r1, r4, r3
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	2030      	movs	r0, #48	; 0x30
 8005dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dd6:	4422      	add	r2, r4
 8005dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005de0:	3302      	adds	r3, #2
 8005de2:	e7c7      	b.n	8005d74 <_printf_common+0x58>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4622      	mov	r2, r4
 8005de8:	4649      	mov	r1, r9
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c0      	blx	r8
 8005dee:	3001      	adds	r0, #1
 8005df0:	d0e6      	beq.n	8005dc0 <_printf_common+0xa4>
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7d9      	b.n	8005daa <_printf_common+0x8e>
	...

08005df8 <_printf_i>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	7e0f      	ldrb	r7, [r1, #24]
 8005dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e00:	2f78      	cmp	r7, #120	; 0x78
 8005e02:	4691      	mov	r9, r2
 8005e04:	4680      	mov	r8, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	469a      	mov	sl, r3
 8005e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e0e:	d807      	bhi.n	8005e20 <_printf_i+0x28>
 8005e10:	2f62      	cmp	r7, #98	; 0x62
 8005e12:	d80a      	bhi.n	8005e2a <_printf_i+0x32>
 8005e14:	2f00      	cmp	r7, #0
 8005e16:	f000 80d8 	beq.w	8005fca <_printf_i+0x1d2>
 8005e1a:	2f58      	cmp	r7, #88	; 0x58
 8005e1c:	f000 80a3 	beq.w	8005f66 <_printf_i+0x16e>
 8005e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e28:	e03a      	b.n	8005ea0 <_printf_i+0xa8>
 8005e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e2e:	2b15      	cmp	r3, #21
 8005e30:	d8f6      	bhi.n	8005e20 <_printf_i+0x28>
 8005e32:	a101      	add	r1, pc, #4	; (adr r1, 8005e38 <_printf_i+0x40>)
 8005e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005ea5 	.word	0x08005ea5
 8005e40:	08005e21 	.word	0x08005e21
 8005e44:	08005e21 	.word	0x08005e21
 8005e48:	08005e21 	.word	0x08005e21
 8005e4c:	08005e21 	.word	0x08005e21
 8005e50:	08005ea5 	.word	0x08005ea5
 8005e54:	08005e21 	.word	0x08005e21
 8005e58:	08005e21 	.word	0x08005e21
 8005e5c:	08005e21 	.word	0x08005e21
 8005e60:	08005e21 	.word	0x08005e21
 8005e64:	08005fb1 	.word	0x08005fb1
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005f93 	.word	0x08005f93
 8005e70:	08005e21 	.word	0x08005e21
 8005e74:	08005e21 	.word	0x08005e21
 8005e78:	08005fd3 	.word	0x08005fd3
 8005e7c:	08005e21 	.word	0x08005e21
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e21 	.word	0x08005e21
 8005e88:	08005e21 	.word	0x08005e21
 8005e8c:	08005f9b 	.word	0x08005f9b
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	1d1a      	adds	r2, r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	602a      	str	r2, [r5, #0]
 8005e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0a3      	b.n	8005fec <_printf_i+0x1f4>
 8005ea4:	6820      	ldr	r0, [r4, #0]
 8005ea6:	6829      	ldr	r1, [r5, #0]
 8005ea8:	0606      	lsls	r6, r0, #24
 8005eaa:	f101 0304 	add.w	r3, r1, #4
 8005eae:	d50a      	bpl.n	8005ec6 <_printf_i+0xce>
 8005eb0:	680e      	ldr	r6, [r1, #0]
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	2e00      	cmp	r6, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xc8>
 8005eb8:	232d      	movs	r3, #45	; 0x2d
 8005eba:	4276      	negs	r6, r6
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec0:	485e      	ldr	r0, [pc, #376]	; (800603c <_printf_i+0x244>)
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e019      	b.n	8005efa <_printf_i+0x102>
 8005ec6:	680e      	ldr	r6, [r1, #0]
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ece:	bf18      	it	ne
 8005ed0:	b236      	sxthne	r6, r6
 8005ed2:	e7ef      	b.n	8005eb4 <_printf_i+0xbc>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	1d19      	adds	r1, r3, #4
 8005eda:	6029      	str	r1, [r5, #0]
 8005edc:	0601      	lsls	r1, r0, #24
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0xec>
 8005ee0:	681e      	ldr	r6, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <_printf_i+0xf2>
 8005ee4:	0646      	lsls	r6, r0, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0xe8>
 8005ee8:	881e      	ldrh	r6, [r3, #0]
 8005eea:	4854      	ldr	r0, [pc, #336]	; (800603c <_printf_i+0x244>)
 8005eec:	2f6f      	cmp	r7, #111	; 0x6f
 8005eee:	bf0c      	ite	eq
 8005ef0:	2308      	moveq	r3, #8
 8005ef2:	230a      	movne	r3, #10
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005efa:	6865      	ldr	r5, [r4, #4]
 8005efc:	60a5      	str	r5, [r4, #8]
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	bfa2      	ittt	ge
 8005f02:	6821      	ldrge	r1, [r4, #0]
 8005f04:	f021 0104 	bicge.w	r1, r1, #4
 8005f08:	6021      	strge	r1, [r4, #0]
 8005f0a:	b90e      	cbnz	r6, 8005f10 <_printf_i+0x118>
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	d04d      	beq.n	8005fac <_printf_i+0x1b4>
 8005f10:	4615      	mov	r5, r2
 8005f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f16:	fb03 6711 	mls	r7, r3, r1, r6
 8005f1a:	5dc7      	ldrb	r7, [r0, r7]
 8005f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f20:	4637      	mov	r7, r6
 8005f22:	42bb      	cmp	r3, r7
 8005f24:	460e      	mov	r6, r1
 8005f26:	d9f4      	bls.n	8005f12 <_printf_i+0x11a>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d10b      	bne.n	8005f44 <_printf_i+0x14c>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	07de      	lsls	r6, r3, #31
 8005f30:	d508      	bpl.n	8005f44 <_printf_i+0x14c>
 8005f32:	6923      	ldr	r3, [r4, #16]
 8005f34:	6861      	ldr	r1, [r4, #4]
 8005f36:	4299      	cmp	r1, r3
 8005f38:	bfde      	ittt	le
 8005f3a:	2330      	movle	r3, #48	; 0x30
 8005f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f44:	1b52      	subs	r2, r2, r5
 8005f46:	6122      	str	r2, [r4, #16]
 8005f48:	f8cd a000 	str.w	sl, [sp]
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	aa03      	add	r2, sp, #12
 8005f50:	4621      	mov	r1, r4
 8005f52:	4640      	mov	r0, r8
 8005f54:	f7ff fee2 	bl	8005d1c <_printf_common>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d14c      	bne.n	8005ff6 <_printf_i+0x1fe>
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b004      	add	sp, #16
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	4835      	ldr	r0, [pc, #212]	; (800603c <_printf_i+0x244>)
 8005f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f6c:	6829      	ldr	r1, [r5, #0]
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f74:	6029      	str	r1, [r5, #0]
 8005f76:	061d      	lsls	r5, r3, #24
 8005f78:	d514      	bpl.n	8005fa4 <_printf_i+0x1ac>
 8005f7a:	07df      	lsls	r7, r3, #31
 8005f7c:	bf44      	itt	mi
 8005f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f82:	6023      	strmi	r3, [r4, #0]
 8005f84:	b91e      	cbnz	r6, 8005f8e <_printf_i+0x196>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	f023 0320 	bic.w	r3, r3, #32
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	2310      	movs	r3, #16
 8005f90:	e7b0      	b.n	8005ef4 <_printf_i+0xfc>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f043 0320 	orr.w	r3, r3, #32
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	2378      	movs	r3, #120	; 0x78
 8005f9c:	4828      	ldr	r0, [pc, #160]	; (8006040 <_printf_i+0x248>)
 8005f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fa2:	e7e3      	b.n	8005f6c <_printf_i+0x174>
 8005fa4:	0659      	lsls	r1, r3, #25
 8005fa6:	bf48      	it	mi
 8005fa8:	b2b6      	uxthmi	r6, r6
 8005faa:	e7e6      	b.n	8005f7a <_printf_i+0x182>
 8005fac:	4615      	mov	r5, r2
 8005fae:	e7bb      	b.n	8005f28 <_printf_i+0x130>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	6826      	ldr	r6, [r4, #0]
 8005fb4:	6961      	ldr	r1, [r4, #20]
 8005fb6:	1d18      	adds	r0, r3, #4
 8005fb8:	6028      	str	r0, [r5, #0]
 8005fba:	0635      	lsls	r5, r6, #24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0x1cc>
 8005fc0:	6019      	str	r1, [r3, #0]
 8005fc2:	e002      	b.n	8005fca <_printf_i+0x1d2>
 8005fc4:	0670      	lsls	r0, r6, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0x1c8>
 8005fc8:	8019      	strh	r1, [r3, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	4615      	mov	r5, r2
 8005fd0:	e7ba      	b.n	8005f48 <_printf_i+0x150>
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	1d1a      	adds	r2, r3, #4
 8005fd6:	602a      	str	r2, [r5, #0]
 8005fd8:	681d      	ldr	r5, [r3, #0]
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7fa f8fe 	bl	80001e0 <memchr>
 8005fe4:	b108      	cbz	r0, 8005fea <_printf_i+0x1f2>
 8005fe6:	1b40      	subs	r0, r0, r5
 8005fe8:	6060      	str	r0, [r4, #4]
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff4:	e7a8      	b.n	8005f48 <_printf_i+0x150>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	462a      	mov	r2, r5
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d0ab      	beq.n	8005f5c <_printf_i+0x164>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	079b      	lsls	r3, r3, #30
 8006008:	d413      	bmi.n	8006032 <_printf_i+0x23a>
 800600a:	68e0      	ldr	r0, [r4, #12]
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	4298      	cmp	r0, r3
 8006010:	bfb8      	it	lt
 8006012:	4618      	movlt	r0, r3
 8006014:	e7a4      	b.n	8005f60 <_printf_i+0x168>
 8006016:	2301      	movs	r3, #1
 8006018:	4632      	mov	r2, r6
 800601a:	4649      	mov	r1, r9
 800601c:	4640      	mov	r0, r8
 800601e:	47d0      	blx	sl
 8006020:	3001      	adds	r0, #1
 8006022:	d09b      	beq.n	8005f5c <_printf_i+0x164>
 8006024:	3501      	adds	r5, #1
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	9903      	ldr	r1, [sp, #12]
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	42ab      	cmp	r3, r5
 800602e:	dcf2      	bgt.n	8006016 <_printf_i+0x21e>
 8006030:	e7eb      	b.n	800600a <_printf_i+0x212>
 8006032:	2500      	movs	r5, #0
 8006034:	f104 0619 	add.w	r6, r4, #25
 8006038:	e7f5      	b.n	8006026 <_printf_i+0x22e>
 800603a:	bf00      	nop
 800603c:	0800a162 	.word	0x0800a162
 8006040:	0800a173 	.word	0x0800a173

08006044 <_scanf_float>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	b087      	sub	sp, #28
 800604a:	4617      	mov	r7, r2
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	688b      	ldr	r3, [r1, #8]
 8006050:	1e5a      	subs	r2, r3, #1
 8006052:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006056:	bf83      	ittte	hi
 8006058:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800605c:	195b      	addhi	r3, r3, r5
 800605e:	9302      	strhi	r3, [sp, #8]
 8006060:	2300      	movls	r3, #0
 8006062:	bf86      	itte	hi
 8006064:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006068:	608b      	strhi	r3, [r1, #8]
 800606a:	9302      	strls	r3, [sp, #8]
 800606c:	680b      	ldr	r3, [r1, #0]
 800606e:	468b      	mov	fp, r1
 8006070:	2500      	movs	r5, #0
 8006072:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006076:	f84b 3b1c 	str.w	r3, [fp], #28
 800607a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800607e:	4680      	mov	r8, r0
 8006080:	460c      	mov	r4, r1
 8006082:	465e      	mov	r6, fp
 8006084:	46aa      	mov	sl, r5
 8006086:	46a9      	mov	r9, r5
 8006088:	9501      	str	r5, [sp, #4]
 800608a:	68a2      	ldr	r2, [r4, #8]
 800608c:	b152      	cbz	r2, 80060a4 <_scanf_float+0x60>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b4e      	cmp	r3, #78	; 0x4e
 8006094:	d864      	bhi.n	8006160 <_scanf_float+0x11c>
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d83c      	bhi.n	8006114 <_scanf_float+0xd0>
 800609a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800609e:	b2c8      	uxtb	r0, r1
 80060a0:	280e      	cmp	r0, #14
 80060a2:	d93a      	bls.n	800611a <_scanf_float+0xd6>
 80060a4:	f1b9 0f00 	cmp.w	r9, #0
 80060a8:	d003      	beq.n	80060b2 <_scanf_float+0x6e>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060b6:	f1ba 0f01 	cmp.w	sl, #1
 80060ba:	f200 8113 	bhi.w	80062e4 <_scanf_float+0x2a0>
 80060be:	455e      	cmp	r6, fp
 80060c0:	f200 8105 	bhi.w	80062ce <_scanf_float+0x28a>
 80060c4:	2501      	movs	r5, #1
 80060c6:	4628      	mov	r0, r5
 80060c8:	b007      	add	sp, #28
 80060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060d2:	2a0d      	cmp	r2, #13
 80060d4:	d8e6      	bhi.n	80060a4 <_scanf_float+0x60>
 80060d6:	a101      	add	r1, pc, #4	; (adr r1, 80060dc <_scanf_float+0x98>)
 80060d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060dc:	0800621b 	.word	0x0800621b
 80060e0:	080060a5 	.word	0x080060a5
 80060e4:	080060a5 	.word	0x080060a5
 80060e8:	080060a5 	.word	0x080060a5
 80060ec:	0800627b 	.word	0x0800627b
 80060f0:	08006253 	.word	0x08006253
 80060f4:	080060a5 	.word	0x080060a5
 80060f8:	080060a5 	.word	0x080060a5
 80060fc:	08006229 	.word	0x08006229
 8006100:	080060a5 	.word	0x080060a5
 8006104:	080060a5 	.word	0x080060a5
 8006108:	080060a5 	.word	0x080060a5
 800610c:	080060a5 	.word	0x080060a5
 8006110:	080061e1 	.word	0x080061e1
 8006114:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006118:	e7db      	b.n	80060d2 <_scanf_float+0x8e>
 800611a:	290e      	cmp	r1, #14
 800611c:	d8c2      	bhi.n	80060a4 <_scanf_float+0x60>
 800611e:	a001      	add	r0, pc, #4	; (adr r0, 8006124 <_scanf_float+0xe0>)
 8006120:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006124:	080061d3 	.word	0x080061d3
 8006128:	080060a5 	.word	0x080060a5
 800612c:	080061d3 	.word	0x080061d3
 8006130:	08006267 	.word	0x08006267
 8006134:	080060a5 	.word	0x080060a5
 8006138:	08006181 	.word	0x08006181
 800613c:	080061bd 	.word	0x080061bd
 8006140:	080061bd 	.word	0x080061bd
 8006144:	080061bd 	.word	0x080061bd
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061bd 	.word	0x080061bd
 8006150:	080061bd 	.word	0x080061bd
 8006154:	080061bd 	.word	0x080061bd
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061bd 	.word	0x080061bd
 8006160:	2b6e      	cmp	r3, #110	; 0x6e
 8006162:	d809      	bhi.n	8006178 <_scanf_float+0x134>
 8006164:	2b60      	cmp	r3, #96	; 0x60
 8006166:	d8b2      	bhi.n	80060ce <_scanf_float+0x8a>
 8006168:	2b54      	cmp	r3, #84	; 0x54
 800616a:	d077      	beq.n	800625c <_scanf_float+0x218>
 800616c:	2b59      	cmp	r3, #89	; 0x59
 800616e:	d199      	bne.n	80060a4 <_scanf_float+0x60>
 8006170:	2d07      	cmp	r5, #7
 8006172:	d197      	bne.n	80060a4 <_scanf_float+0x60>
 8006174:	2508      	movs	r5, #8
 8006176:	e029      	b.n	80061cc <_scanf_float+0x188>
 8006178:	2b74      	cmp	r3, #116	; 0x74
 800617a:	d06f      	beq.n	800625c <_scanf_float+0x218>
 800617c:	2b79      	cmp	r3, #121	; 0x79
 800617e:	e7f6      	b.n	800616e <_scanf_float+0x12a>
 8006180:	6821      	ldr	r1, [r4, #0]
 8006182:	05c8      	lsls	r0, r1, #23
 8006184:	d51a      	bpl.n	80061bc <_scanf_float+0x178>
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800618c:	6021      	str	r1, [r4, #0]
 800618e:	f109 0901 	add.w	r9, r9, #1
 8006192:	b11b      	cbz	r3, 800619c <_scanf_float+0x158>
 8006194:	3b01      	subs	r3, #1
 8006196:	3201      	adds	r2, #1
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	60a2      	str	r2, [r4, #8]
 800619c:	68a3      	ldr	r3, [r4, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	3301      	adds	r3, #1
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	f340 8084 	ble.w	80062bc <_scanf_float+0x278>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	e766      	b.n	800608a <_scanf_float+0x46>
 80061bc:	eb1a 0f05 	cmn.w	sl, r5
 80061c0:	f47f af70 	bne.w	80060a4 <_scanf_float+0x60>
 80061c4:	6822      	ldr	r2, [r4, #0]
 80061c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061ca:	6022      	str	r2, [r4, #0]
 80061cc:	f806 3b01 	strb.w	r3, [r6], #1
 80061d0:	e7e4      	b.n	800619c <_scanf_float+0x158>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	0610      	lsls	r0, r2, #24
 80061d6:	f57f af65 	bpl.w	80060a4 <_scanf_float+0x60>
 80061da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061de:	e7f4      	b.n	80061ca <_scanf_float+0x186>
 80061e0:	f1ba 0f00 	cmp.w	sl, #0
 80061e4:	d10e      	bne.n	8006204 <_scanf_float+0x1c0>
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	d10e      	bne.n	800620a <_scanf_float+0x1c6>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061f6:	d108      	bne.n	800620a <_scanf_float+0x1c6>
 80061f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	f04f 0a01 	mov.w	sl, #1
 8006202:	e7e3      	b.n	80061cc <_scanf_float+0x188>
 8006204:	f1ba 0f02 	cmp.w	sl, #2
 8006208:	d055      	beq.n	80062b6 <_scanf_float+0x272>
 800620a:	2d01      	cmp	r5, #1
 800620c:	d002      	beq.n	8006214 <_scanf_float+0x1d0>
 800620e:	2d04      	cmp	r5, #4
 8006210:	f47f af48 	bne.w	80060a4 <_scanf_float+0x60>
 8006214:	3501      	adds	r5, #1
 8006216:	b2ed      	uxtb	r5, r5
 8006218:	e7d8      	b.n	80061cc <_scanf_float+0x188>
 800621a:	f1ba 0f01 	cmp.w	sl, #1
 800621e:	f47f af41 	bne.w	80060a4 <_scanf_float+0x60>
 8006222:	f04f 0a02 	mov.w	sl, #2
 8006226:	e7d1      	b.n	80061cc <_scanf_float+0x188>
 8006228:	b97d      	cbnz	r5, 800624a <_scanf_float+0x206>
 800622a:	f1b9 0f00 	cmp.w	r9, #0
 800622e:	f47f af3c 	bne.w	80060aa <_scanf_float+0x66>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006238:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800623c:	f47f af39 	bne.w	80060b2 <_scanf_float+0x6e>
 8006240:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	2501      	movs	r5, #1
 8006248:	e7c0      	b.n	80061cc <_scanf_float+0x188>
 800624a:	2d03      	cmp	r5, #3
 800624c:	d0e2      	beq.n	8006214 <_scanf_float+0x1d0>
 800624e:	2d05      	cmp	r5, #5
 8006250:	e7de      	b.n	8006210 <_scanf_float+0x1cc>
 8006252:	2d02      	cmp	r5, #2
 8006254:	f47f af26 	bne.w	80060a4 <_scanf_float+0x60>
 8006258:	2503      	movs	r5, #3
 800625a:	e7b7      	b.n	80061cc <_scanf_float+0x188>
 800625c:	2d06      	cmp	r5, #6
 800625e:	f47f af21 	bne.w	80060a4 <_scanf_float+0x60>
 8006262:	2507      	movs	r5, #7
 8006264:	e7b2      	b.n	80061cc <_scanf_float+0x188>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	0591      	lsls	r1, r2, #22
 800626a:	f57f af1b 	bpl.w	80060a4 <_scanf_float+0x60>
 800626e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	f8cd 9004 	str.w	r9, [sp, #4]
 8006278:	e7a8      	b.n	80061cc <_scanf_float+0x188>
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006280:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006284:	d006      	beq.n	8006294 <_scanf_float+0x250>
 8006286:	0550      	lsls	r0, r2, #21
 8006288:	f57f af0c 	bpl.w	80060a4 <_scanf_float+0x60>
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	f43f af0f 	beq.w	80060b2 <_scanf_float+0x6e>
 8006294:	0591      	lsls	r1, r2, #22
 8006296:	bf58      	it	pl
 8006298:	9901      	ldrpl	r1, [sp, #4]
 800629a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800629e:	bf58      	it	pl
 80062a0:	eba9 0101 	subpl.w	r1, r9, r1
 80062a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80062a8:	bf58      	it	pl
 80062aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062ae:	6022      	str	r2, [r4, #0]
 80062b0:	f04f 0900 	mov.w	r9, #0
 80062b4:	e78a      	b.n	80061cc <_scanf_float+0x188>
 80062b6:	f04f 0a03 	mov.w	sl, #3
 80062ba:	e787      	b.n	80061cc <_scanf_float+0x188>
 80062bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062c0:	4639      	mov	r1, r7
 80062c2:	4640      	mov	r0, r8
 80062c4:	4798      	blx	r3
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f43f aedf 	beq.w	800608a <_scanf_float+0x46>
 80062cc:	e6ea      	b.n	80060a4 <_scanf_float+0x60>
 80062ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062d6:	463a      	mov	r2, r7
 80062d8:	4640      	mov	r0, r8
 80062da:	4798      	blx	r3
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	3b01      	subs	r3, #1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	e6ec      	b.n	80060be <_scanf_float+0x7a>
 80062e4:	1e6b      	subs	r3, r5, #1
 80062e6:	2b06      	cmp	r3, #6
 80062e8:	d825      	bhi.n	8006336 <_scanf_float+0x2f2>
 80062ea:	2d02      	cmp	r5, #2
 80062ec:	d836      	bhi.n	800635c <_scanf_float+0x318>
 80062ee:	455e      	cmp	r6, fp
 80062f0:	f67f aee8 	bls.w	80060c4 <_scanf_float+0x80>
 80062f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062fc:	463a      	mov	r2, r7
 80062fe:	4640      	mov	r0, r8
 8006300:	4798      	blx	r3
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	3b01      	subs	r3, #1
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	e7f1      	b.n	80062ee <_scanf_float+0x2aa>
 800630a:	9802      	ldr	r0, [sp, #8]
 800630c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006310:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006314:	9002      	str	r0, [sp, #8]
 8006316:	463a      	mov	r2, r7
 8006318:	4640      	mov	r0, r8
 800631a:	4798      	blx	r3
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	3b01      	subs	r3, #1
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006326:	fa5f fa8a 	uxtb.w	sl, sl
 800632a:	f1ba 0f02 	cmp.w	sl, #2
 800632e:	d1ec      	bne.n	800630a <_scanf_float+0x2c6>
 8006330:	3d03      	subs	r5, #3
 8006332:	b2ed      	uxtb	r5, r5
 8006334:	1b76      	subs	r6, r6, r5
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	05da      	lsls	r2, r3, #23
 800633a:	d52f      	bpl.n	800639c <_scanf_float+0x358>
 800633c:	055b      	lsls	r3, r3, #21
 800633e:	d510      	bpl.n	8006362 <_scanf_float+0x31e>
 8006340:	455e      	cmp	r6, fp
 8006342:	f67f aebf 	bls.w	80060c4 <_scanf_float+0x80>
 8006346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800634a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800634e:	463a      	mov	r2, r7
 8006350:	4640      	mov	r0, r8
 8006352:	4798      	blx	r3
 8006354:	6923      	ldr	r3, [r4, #16]
 8006356:	3b01      	subs	r3, #1
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	e7f1      	b.n	8006340 <_scanf_float+0x2fc>
 800635c:	46aa      	mov	sl, r5
 800635e:	9602      	str	r6, [sp, #8]
 8006360:	e7df      	b.n	8006322 <_scanf_float+0x2de>
 8006362:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	2965      	cmp	r1, #101	; 0x65
 800636a:	f103 33ff 	add.w	r3, r3, #4294967295
 800636e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	d00c      	beq.n	8006390 <_scanf_float+0x34c>
 8006376:	2945      	cmp	r1, #69	; 0x45
 8006378:	d00a      	beq.n	8006390 <_scanf_float+0x34c>
 800637a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800637e:	463a      	mov	r2, r7
 8006380:	4640      	mov	r0, r8
 8006382:	4798      	blx	r3
 8006384:	6923      	ldr	r3, [r4, #16]
 8006386:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800638a:	3b01      	subs	r3, #1
 800638c:	1eb5      	subs	r5, r6, #2
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006394:	463a      	mov	r2, r7
 8006396:	4640      	mov	r0, r8
 8006398:	4798      	blx	r3
 800639a:	462e      	mov	r6, r5
 800639c:	6825      	ldr	r5, [r4, #0]
 800639e:	f015 0510 	ands.w	r5, r5, #16
 80063a2:	d159      	bne.n	8006458 <_scanf_float+0x414>
 80063a4:	7035      	strb	r5, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b0:	d11b      	bne.n	80063ea <_scanf_float+0x3a6>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	454b      	cmp	r3, r9
 80063b6:	eba3 0209 	sub.w	r2, r3, r9
 80063ba:	d123      	bne.n	8006404 <_scanf_float+0x3c0>
 80063bc:	2200      	movs	r2, #0
 80063be:	4659      	mov	r1, fp
 80063c0:	4640      	mov	r0, r8
 80063c2:	f000 feaf 	bl	8007124 <_strtod_r>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	f012 0f02 	tst.w	r2, #2
 80063ce:	ec57 6b10 	vmov	r6, r7, d0
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	d021      	beq.n	800641a <_scanf_float+0x3d6>
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	600a      	str	r2, [r1, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	e9c3 6700 	strd	r6, r7, [r3]
 80063e2:	68e3      	ldr	r3, [r4, #12]
 80063e4:	3301      	adds	r3, #1
 80063e6:	60e3      	str	r3, [r4, #12]
 80063e8:	e66d      	b.n	80060c6 <_scanf_float+0x82>
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0e5      	beq.n	80063bc <_scanf_float+0x378>
 80063f0:	9905      	ldr	r1, [sp, #20]
 80063f2:	230a      	movs	r3, #10
 80063f4:	462a      	mov	r2, r5
 80063f6:	3101      	adds	r1, #1
 80063f8:	4640      	mov	r0, r8
 80063fa:	f000 ff1b 	bl	8007234 <_strtol_r>
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	9e05      	ldr	r6, [sp, #20]
 8006402:	1ac2      	subs	r2, r0, r3
 8006404:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006408:	429e      	cmp	r6, r3
 800640a:	bf28      	it	cs
 800640c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006410:	4912      	ldr	r1, [pc, #72]	; (800645c <_scanf_float+0x418>)
 8006412:	4630      	mov	r0, r6
 8006414:	f000 f844 	bl	80064a0 <siprintf>
 8006418:	e7d0      	b.n	80063bc <_scanf_float+0x378>
 800641a:	9903      	ldr	r1, [sp, #12]
 800641c:	f012 0f04 	tst.w	r2, #4
 8006420:	f103 0204 	add.w	r2, r3, #4
 8006424:	600a      	str	r2, [r1, #0]
 8006426:	d1d9      	bne.n	80063dc <_scanf_float+0x398>
 8006428:	f8d3 8000 	ldr.w	r8, [r3]
 800642c:	ee10 2a10 	vmov	r2, s0
 8006430:	ee10 0a10 	vmov	r0, s0
 8006434:	463b      	mov	r3, r7
 8006436:	4639      	mov	r1, r7
 8006438:	f7fa fb78 	bl	8000b2c <__aeabi_dcmpun>
 800643c:	b128      	cbz	r0, 800644a <_scanf_float+0x406>
 800643e:	4808      	ldr	r0, [pc, #32]	; (8006460 <_scanf_float+0x41c>)
 8006440:	f000 f828 	bl	8006494 <nanf>
 8006444:	ed88 0a00 	vstr	s0, [r8]
 8006448:	e7cb      	b.n	80063e2 <_scanf_float+0x39e>
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7fa fbcb 	bl	8000be8 <__aeabi_d2f>
 8006452:	f8c8 0000 	str.w	r0, [r8]
 8006456:	e7c4      	b.n	80063e2 <_scanf_float+0x39e>
 8006458:	2500      	movs	r5, #0
 800645a:	e634      	b.n	80060c6 <_scanf_float+0x82>
 800645c:	0800a184 	.word	0x0800a184
 8006460:	0800a5f8 	.word	0x0800a5f8

08006464 <iprintf>:
 8006464:	b40f      	push	{r0, r1, r2, r3}
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <iprintf+0x2c>)
 8006468:	b513      	push	{r0, r1, r4, lr}
 800646a:	681c      	ldr	r4, [r3, #0]
 800646c:	b124      	cbz	r4, 8006478 <iprintf+0x14>
 800646e:	69a3      	ldr	r3, [r4, #24]
 8006470:	b913      	cbnz	r3, 8006478 <iprintf+0x14>
 8006472:	4620      	mov	r0, r4
 8006474:	f001 fdb2 	bl	8007fdc <__sinit>
 8006478:	ab05      	add	r3, sp, #20
 800647a:	9a04      	ldr	r2, [sp, #16]
 800647c:	68a1      	ldr	r1, [r4, #8]
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	4620      	mov	r0, r4
 8006482:	f003 f925 	bl	80096d0 <_vfiprintf_r>
 8006486:	b002      	add	sp, #8
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	2000000c 	.word	0x2000000c

08006494 <nanf>:
 8006494:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800649c <nanf+0x8>
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	7fc00000 	.word	0x7fc00000

080064a0 <siprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	b500      	push	{lr}
 80064a4:	b09c      	sub	sp, #112	; 0x70
 80064a6:	ab1d      	add	r3, sp, #116	; 0x74
 80064a8:	9002      	str	r0, [sp, #8]
 80064aa:	9006      	str	r0, [sp, #24]
 80064ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b0:	4809      	ldr	r0, [pc, #36]	; (80064d8 <siprintf+0x38>)
 80064b2:	9107      	str	r1, [sp, #28]
 80064b4:	9104      	str	r1, [sp, #16]
 80064b6:	4909      	ldr	r1, [pc, #36]	; (80064dc <siprintf+0x3c>)
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	a902      	add	r1, sp, #8
 80064c4:	f002 ffda 	bl	800947c <_svfiprintf_r>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	b01c      	add	sp, #112	; 0x70
 80064d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d4:	b003      	add	sp, #12
 80064d6:	4770      	bx	lr
 80064d8:	2000000c 	.word	0x2000000c
 80064dc:	ffff0208 	.word	0xffff0208

080064e0 <sulp>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	ec45 4b10 	vmov	d0, r4, r5
 80064ea:	4616      	mov	r6, r2
 80064ec:	f002 fd24 	bl	8008f38 <__ulp>
 80064f0:	ec51 0b10 	vmov	r0, r1, d0
 80064f4:	b17e      	cbz	r6, 8006516 <sulp+0x36>
 80064f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064fe:	2b00      	cmp	r3, #0
 8006500:	dd09      	ble.n	8006516 <sulp+0x36>
 8006502:	051b      	lsls	r3, r3, #20
 8006504:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006508:	2400      	movs	r4, #0
 800650a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	f7fa f871 	bl	80005f8 <__aeabi_dmul>
 8006516:	bd70      	pop	{r4, r5, r6, pc}

08006518 <_strtod_l>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	ed2d 8b02 	vpush	{d8}
 8006520:	b09d      	sub	sp, #116	; 0x74
 8006522:	461f      	mov	r7, r3
 8006524:	2300      	movs	r3, #0
 8006526:	9318      	str	r3, [sp, #96]	; 0x60
 8006528:	4ba2      	ldr	r3, [pc, #648]	; (80067b4 <_strtod_l+0x29c>)
 800652a:	9213      	str	r2, [sp, #76]	; 0x4c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	9305      	str	r3, [sp, #20]
 8006530:	4604      	mov	r4, r0
 8006532:	4618      	mov	r0, r3
 8006534:	4688      	mov	r8, r1
 8006536:	f7f9 fe4b 	bl	80001d0 <strlen>
 800653a:	f04f 0a00 	mov.w	sl, #0
 800653e:	4605      	mov	r5, r0
 8006540:	f04f 0b00 	mov.w	fp, #0
 8006544:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	2a2b      	cmp	r2, #43	; 0x2b
 800654e:	d04e      	beq.n	80065ee <_strtod_l+0xd6>
 8006550:	d83b      	bhi.n	80065ca <_strtod_l+0xb2>
 8006552:	2a0d      	cmp	r2, #13
 8006554:	d834      	bhi.n	80065c0 <_strtod_l+0xa8>
 8006556:	2a08      	cmp	r2, #8
 8006558:	d834      	bhi.n	80065c4 <_strtod_l+0xac>
 800655a:	2a00      	cmp	r2, #0
 800655c:	d03e      	beq.n	80065dc <_strtod_l+0xc4>
 800655e:	2300      	movs	r3, #0
 8006560:	930a      	str	r3, [sp, #40]	; 0x28
 8006562:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006564:	7833      	ldrb	r3, [r6, #0]
 8006566:	2b30      	cmp	r3, #48	; 0x30
 8006568:	f040 80b0 	bne.w	80066cc <_strtod_l+0x1b4>
 800656c:	7873      	ldrb	r3, [r6, #1]
 800656e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006572:	2b58      	cmp	r3, #88	; 0x58
 8006574:	d168      	bne.n	8006648 <_strtod_l+0x130>
 8006576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	ab18      	add	r3, sp, #96	; 0x60
 800657c:	9702      	str	r7, [sp, #8]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4a8d      	ldr	r2, [pc, #564]	; (80067b8 <_strtod_l+0x2a0>)
 8006582:	ab19      	add	r3, sp, #100	; 0x64
 8006584:	a917      	add	r1, sp, #92	; 0x5c
 8006586:	4620      	mov	r0, r4
 8006588:	f001 fe2c 	bl	80081e4 <__gethex>
 800658c:	f010 0707 	ands.w	r7, r0, #7
 8006590:	4605      	mov	r5, r0
 8006592:	d005      	beq.n	80065a0 <_strtod_l+0x88>
 8006594:	2f06      	cmp	r7, #6
 8006596:	d12c      	bne.n	80065f2 <_strtod_l+0xda>
 8006598:	3601      	adds	r6, #1
 800659a:	2300      	movs	r3, #0
 800659c:	9617      	str	r6, [sp, #92]	; 0x5c
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 8590 	bne.w	80070c8 <_strtod_l+0xbb0>
 80065a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065aa:	b1eb      	cbz	r3, 80065e8 <_strtod_l+0xd0>
 80065ac:	4652      	mov	r2, sl
 80065ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80065b2:	ec43 2b10 	vmov	d0, r2, r3
 80065b6:	b01d      	add	sp, #116	; 0x74
 80065b8:	ecbd 8b02 	vpop	{d8}
 80065bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c0:	2a20      	cmp	r2, #32
 80065c2:	d1cc      	bne.n	800655e <_strtod_l+0x46>
 80065c4:	3301      	adds	r3, #1
 80065c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80065c8:	e7be      	b.n	8006548 <_strtod_l+0x30>
 80065ca:	2a2d      	cmp	r2, #45	; 0x2d
 80065cc:	d1c7      	bne.n	800655e <_strtod_l+0x46>
 80065ce:	2201      	movs	r2, #1
 80065d0:	920a      	str	r2, [sp, #40]	; 0x28
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1c2      	bne.n	8006562 <_strtod_l+0x4a>
 80065dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f040 856e 	bne.w	80070c4 <_strtod_l+0xbac>
 80065e8:	4652      	mov	r2, sl
 80065ea:	465b      	mov	r3, fp
 80065ec:	e7e1      	b.n	80065b2 <_strtod_l+0x9a>
 80065ee:	2200      	movs	r2, #0
 80065f0:	e7ee      	b.n	80065d0 <_strtod_l+0xb8>
 80065f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065f4:	b13a      	cbz	r2, 8006606 <_strtod_l+0xee>
 80065f6:	2135      	movs	r1, #53	; 0x35
 80065f8:	a81a      	add	r0, sp, #104	; 0x68
 80065fa:	f002 fda8 	bl	800914e <__copybits>
 80065fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006600:	4620      	mov	r0, r4
 8006602:	f002 f967 	bl	80088d4 <_Bfree>
 8006606:	3f01      	subs	r7, #1
 8006608:	2f04      	cmp	r7, #4
 800660a:	d806      	bhi.n	800661a <_strtod_l+0x102>
 800660c:	e8df f007 	tbb	[pc, r7]
 8006610:	1714030a 	.word	0x1714030a
 8006614:	0a          	.byte	0x0a
 8006615:	00          	.byte	0x00
 8006616:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800661a:	0728      	lsls	r0, r5, #28
 800661c:	d5c0      	bpl.n	80065a0 <_strtod_l+0x88>
 800661e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006622:	e7bd      	b.n	80065a0 <_strtod_l+0x88>
 8006624:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006628:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800662a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800662e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006632:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006636:	e7f0      	b.n	800661a <_strtod_l+0x102>
 8006638:	f8df b180 	ldr.w	fp, [pc, #384]	; 80067bc <_strtod_l+0x2a4>
 800663c:	e7ed      	b.n	800661a <_strtod_l+0x102>
 800663e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006642:	f04f 3aff 	mov.w	sl, #4294967295
 8006646:	e7e8      	b.n	800661a <_strtod_l+0x102>
 8006648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	9217      	str	r2, [sp, #92]	; 0x5c
 800664e:	785b      	ldrb	r3, [r3, #1]
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d0f9      	beq.n	8006648 <_strtod_l+0x130>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0a3      	beq.n	80065a0 <_strtod_l+0x88>
 8006658:	2301      	movs	r3, #1
 800665a:	f04f 0900 	mov.w	r9, #0
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006662:	9308      	str	r3, [sp, #32]
 8006664:	f8cd 901c 	str.w	r9, [sp, #28]
 8006668:	464f      	mov	r7, r9
 800666a:	220a      	movs	r2, #10
 800666c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800666e:	7806      	ldrb	r6, [r0, #0]
 8006670:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006674:	b2d9      	uxtb	r1, r3
 8006676:	2909      	cmp	r1, #9
 8006678:	d92a      	bls.n	80066d0 <_strtod_l+0x1b8>
 800667a:	9905      	ldr	r1, [sp, #20]
 800667c:	462a      	mov	r2, r5
 800667e:	f003 f9b2 	bl	80099e6 <strncmp>
 8006682:	b398      	cbz	r0, 80066ec <_strtod_l+0x1d4>
 8006684:	2000      	movs	r0, #0
 8006686:	4632      	mov	r2, r6
 8006688:	463d      	mov	r5, r7
 800668a:	9005      	str	r0, [sp, #20]
 800668c:	4603      	mov	r3, r0
 800668e:	2a65      	cmp	r2, #101	; 0x65
 8006690:	d001      	beq.n	8006696 <_strtod_l+0x17e>
 8006692:	2a45      	cmp	r2, #69	; 0x45
 8006694:	d118      	bne.n	80066c8 <_strtod_l+0x1b0>
 8006696:	b91d      	cbnz	r5, 80066a0 <_strtod_l+0x188>
 8006698:	9a04      	ldr	r2, [sp, #16]
 800669a:	4302      	orrs	r2, r0
 800669c:	d09e      	beq.n	80065dc <_strtod_l+0xc4>
 800669e:	2500      	movs	r5, #0
 80066a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80066a4:	f108 0201 	add.w	r2, r8, #1
 80066a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80066aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80066ae:	2a2b      	cmp	r2, #43	; 0x2b
 80066b0:	d075      	beq.n	800679e <_strtod_l+0x286>
 80066b2:	2a2d      	cmp	r2, #45	; 0x2d
 80066b4:	d07b      	beq.n	80067ae <_strtod_l+0x296>
 80066b6:	f04f 0c00 	mov.w	ip, #0
 80066ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80066be:	2909      	cmp	r1, #9
 80066c0:	f240 8082 	bls.w	80067c8 <_strtod_l+0x2b0>
 80066c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066c8:	2600      	movs	r6, #0
 80066ca:	e09d      	b.n	8006808 <_strtod_l+0x2f0>
 80066cc:	2300      	movs	r3, #0
 80066ce:	e7c4      	b.n	800665a <_strtod_l+0x142>
 80066d0:	2f08      	cmp	r7, #8
 80066d2:	bfd8      	it	le
 80066d4:	9907      	ldrle	r1, [sp, #28]
 80066d6:	f100 0001 	add.w	r0, r0, #1
 80066da:	bfda      	itte	le
 80066dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80066e0:	9307      	strle	r3, [sp, #28]
 80066e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80066e6:	3701      	adds	r7, #1
 80066e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80066ea:	e7bf      	b.n	800666c <_strtod_l+0x154>
 80066ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066ee:	195a      	adds	r2, r3, r5
 80066f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80066f2:	5d5a      	ldrb	r2, [r3, r5]
 80066f4:	2f00      	cmp	r7, #0
 80066f6:	d037      	beq.n	8006768 <_strtod_l+0x250>
 80066f8:	9005      	str	r0, [sp, #20]
 80066fa:	463d      	mov	r5, r7
 80066fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006700:	2b09      	cmp	r3, #9
 8006702:	d912      	bls.n	800672a <_strtod_l+0x212>
 8006704:	2301      	movs	r3, #1
 8006706:	e7c2      	b.n	800668e <_strtod_l+0x176>
 8006708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	9217      	str	r2, [sp, #92]	; 0x5c
 800670e:	785a      	ldrb	r2, [r3, #1]
 8006710:	3001      	adds	r0, #1
 8006712:	2a30      	cmp	r2, #48	; 0x30
 8006714:	d0f8      	beq.n	8006708 <_strtod_l+0x1f0>
 8006716:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800671a:	2b08      	cmp	r3, #8
 800671c:	f200 84d9 	bhi.w	80070d2 <_strtod_l+0xbba>
 8006720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006722:	9005      	str	r0, [sp, #20]
 8006724:	2000      	movs	r0, #0
 8006726:	9308      	str	r3, [sp, #32]
 8006728:	4605      	mov	r5, r0
 800672a:	3a30      	subs	r2, #48	; 0x30
 800672c:	f100 0301 	add.w	r3, r0, #1
 8006730:	d014      	beq.n	800675c <_strtod_l+0x244>
 8006732:	9905      	ldr	r1, [sp, #20]
 8006734:	4419      	add	r1, r3
 8006736:	9105      	str	r1, [sp, #20]
 8006738:	462b      	mov	r3, r5
 800673a:	eb00 0e05 	add.w	lr, r0, r5
 800673e:	210a      	movs	r1, #10
 8006740:	4573      	cmp	r3, lr
 8006742:	d113      	bne.n	800676c <_strtod_l+0x254>
 8006744:	182b      	adds	r3, r5, r0
 8006746:	2b08      	cmp	r3, #8
 8006748:	f105 0501 	add.w	r5, r5, #1
 800674c:	4405      	add	r5, r0
 800674e:	dc1c      	bgt.n	800678a <_strtod_l+0x272>
 8006750:	9907      	ldr	r1, [sp, #28]
 8006752:	230a      	movs	r3, #10
 8006754:	fb03 2301 	mla	r3, r3, r1, r2
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	2300      	movs	r3, #0
 800675c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800675e:	1c51      	adds	r1, r2, #1
 8006760:	9117      	str	r1, [sp, #92]	; 0x5c
 8006762:	7852      	ldrb	r2, [r2, #1]
 8006764:	4618      	mov	r0, r3
 8006766:	e7c9      	b.n	80066fc <_strtod_l+0x1e4>
 8006768:	4638      	mov	r0, r7
 800676a:	e7d2      	b.n	8006712 <_strtod_l+0x1fa>
 800676c:	2b08      	cmp	r3, #8
 800676e:	dc04      	bgt.n	800677a <_strtod_l+0x262>
 8006770:	9e07      	ldr	r6, [sp, #28]
 8006772:	434e      	muls	r6, r1
 8006774:	9607      	str	r6, [sp, #28]
 8006776:	3301      	adds	r3, #1
 8006778:	e7e2      	b.n	8006740 <_strtod_l+0x228>
 800677a:	f103 0c01 	add.w	ip, r3, #1
 800677e:	f1bc 0f10 	cmp.w	ip, #16
 8006782:	bfd8      	it	le
 8006784:	fb01 f909 	mulle.w	r9, r1, r9
 8006788:	e7f5      	b.n	8006776 <_strtod_l+0x25e>
 800678a:	2d10      	cmp	r5, #16
 800678c:	bfdc      	itt	le
 800678e:	230a      	movle	r3, #10
 8006790:	fb03 2909 	mlale	r9, r3, r9, r2
 8006794:	e7e1      	b.n	800675a <_strtod_l+0x242>
 8006796:	2300      	movs	r3, #0
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	2301      	movs	r3, #1
 800679c:	e77c      	b.n	8006698 <_strtod_l+0x180>
 800679e:	f04f 0c00 	mov.w	ip, #0
 80067a2:	f108 0202 	add.w	r2, r8, #2
 80067a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80067a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80067ac:	e785      	b.n	80066ba <_strtod_l+0x1a2>
 80067ae:	f04f 0c01 	mov.w	ip, #1
 80067b2:	e7f6      	b.n	80067a2 <_strtod_l+0x28a>
 80067b4:	0800a43c 	.word	0x0800a43c
 80067b8:	0800a18c 	.word	0x0800a18c
 80067bc:	7ff00000 	.word	0x7ff00000
 80067c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067c2:	1c51      	adds	r1, r2, #1
 80067c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80067c6:	7852      	ldrb	r2, [r2, #1]
 80067c8:	2a30      	cmp	r2, #48	; 0x30
 80067ca:	d0f9      	beq.n	80067c0 <_strtod_l+0x2a8>
 80067cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80067d0:	2908      	cmp	r1, #8
 80067d2:	f63f af79 	bhi.w	80066c8 <_strtod_l+0x1b0>
 80067d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80067da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067dc:	9206      	str	r2, [sp, #24]
 80067de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067e0:	1c51      	adds	r1, r2, #1
 80067e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80067e4:	7852      	ldrb	r2, [r2, #1]
 80067e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80067ea:	2e09      	cmp	r6, #9
 80067ec:	d937      	bls.n	800685e <_strtod_l+0x346>
 80067ee:	9e06      	ldr	r6, [sp, #24]
 80067f0:	1b89      	subs	r1, r1, r6
 80067f2:	2908      	cmp	r1, #8
 80067f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80067f8:	dc02      	bgt.n	8006800 <_strtod_l+0x2e8>
 80067fa:	4576      	cmp	r6, lr
 80067fc:	bfa8      	it	ge
 80067fe:	4676      	movge	r6, lr
 8006800:	f1bc 0f00 	cmp.w	ip, #0
 8006804:	d000      	beq.n	8006808 <_strtod_l+0x2f0>
 8006806:	4276      	negs	r6, r6
 8006808:	2d00      	cmp	r5, #0
 800680a:	d14d      	bne.n	80068a8 <_strtod_l+0x390>
 800680c:	9904      	ldr	r1, [sp, #16]
 800680e:	4301      	orrs	r1, r0
 8006810:	f47f aec6 	bne.w	80065a0 <_strtod_l+0x88>
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f aee1 	bne.w	80065dc <_strtod_l+0xc4>
 800681a:	2a69      	cmp	r2, #105	; 0x69
 800681c:	d027      	beq.n	800686e <_strtod_l+0x356>
 800681e:	dc24      	bgt.n	800686a <_strtod_l+0x352>
 8006820:	2a49      	cmp	r2, #73	; 0x49
 8006822:	d024      	beq.n	800686e <_strtod_l+0x356>
 8006824:	2a4e      	cmp	r2, #78	; 0x4e
 8006826:	f47f aed9 	bne.w	80065dc <_strtod_l+0xc4>
 800682a:	499f      	ldr	r1, [pc, #636]	; (8006aa8 <_strtod_l+0x590>)
 800682c:	a817      	add	r0, sp, #92	; 0x5c
 800682e:	f001 ff31 	bl	8008694 <__match>
 8006832:	2800      	cmp	r0, #0
 8006834:	f43f aed2 	beq.w	80065dc <_strtod_l+0xc4>
 8006838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b28      	cmp	r3, #40	; 0x28
 800683e:	d12d      	bne.n	800689c <_strtod_l+0x384>
 8006840:	499a      	ldr	r1, [pc, #616]	; (8006aac <_strtod_l+0x594>)
 8006842:	aa1a      	add	r2, sp, #104	; 0x68
 8006844:	a817      	add	r0, sp, #92	; 0x5c
 8006846:	f001 ff39 	bl	80086bc <__hexnan>
 800684a:	2805      	cmp	r0, #5
 800684c:	d126      	bne.n	800689c <_strtod_l+0x384>
 800684e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006850:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006854:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006858:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800685c:	e6a0      	b.n	80065a0 <_strtod_l+0x88>
 800685e:	210a      	movs	r1, #10
 8006860:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006864:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006868:	e7b9      	b.n	80067de <_strtod_l+0x2c6>
 800686a:	2a6e      	cmp	r2, #110	; 0x6e
 800686c:	e7db      	b.n	8006826 <_strtod_l+0x30e>
 800686e:	4990      	ldr	r1, [pc, #576]	; (8006ab0 <_strtod_l+0x598>)
 8006870:	a817      	add	r0, sp, #92	; 0x5c
 8006872:	f001 ff0f 	bl	8008694 <__match>
 8006876:	2800      	cmp	r0, #0
 8006878:	f43f aeb0 	beq.w	80065dc <_strtod_l+0xc4>
 800687c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800687e:	498d      	ldr	r1, [pc, #564]	; (8006ab4 <_strtod_l+0x59c>)
 8006880:	3b01      	subs	r3, #1
 8006882:	a817      	add	r0, sp, #92	; 0x5c
 8006884:	9317      	str	r3, [sp, #92]	; 0x5c
 8006886:	f001 ff05 	bl	8008694 <__match>
 800688a:	b910      	cbnz	r0, 8006892 <_strtod_l+0x37a>
 800688c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800688e:	3301      	adds	r3, #1
 8006890:	9317      	str	r3, [sp, #92]	; 0x5c
 8006892:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006ac4 <_strtod_l+0x5ac>
 8006896:	f04f 0a00 	mov.w	sl, #0
 800689a:	e681      	b.n	80065a0 <_strtod_l+0x88>
 800689c:	4886      	ldr	r0, [pc, #536]	; (8006ab8 <_strtod_l+0x5a0>)
 800689e:	f003 f847 	bl	8009930 <nan>
 80068a2:	ec5b ab10 	vmov	sl, fp, d0
 80068a6:	e67b      	b.n	80065a0 <_strtod_l+0x88>
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	9807      	ldr	r0, [sp, #28]
 80068ac:	1af3      	subs	r3, r6, r3
 80068ae:	2f00      	cmp	r7, #0
 80068b0:	bf08      	it	eq
 80068b2:	462f      	moveq	r7, r5
 80068b4:	2d10      	cmp	r5, #16
 80068b6:	9306      	str	r3, [sp, #24]
 80068b8:	46a8      	mov	r8, r5
 80068ba:	bfa8      	it	ge
 80068bc:	f04f 0810 	movge.w	r8, #16
 80068c0:	f7f9 fe20 	bl	8000504 <__aeabi_ui2d>
 80068c4:	2d09      	cmp	r5, #9
 80068c6:	4682      	mov	sl, r0
 80068c8:	468b      	mov	fp, r1
 80068ca:	dd13      	ble.n	80068f4 <_strtod_l+0x3dc>
 80068cc:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <_strtod_l+0x5a4>)
 80068ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	4682      	mov	sl, r0
 80068dc:	4648      	mov	r0, r9
 80068de:	468b      	mov	fp, r1
 80068e0:	f7f9 fe10 	bl	8000504 <__aeabi_ui2d>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4650      	mov	r0, sl
 80068ea:	4659      	mov	r1, fp
 80068ec:	f7f9 fcce 	bl	800028c <__adddf3>
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	2d0f      	cmp	r5, #15
 80068f6:	dc38      	bgt.n	800696a <_strtod_l+0x452>
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f43f ae50 	beq.w	80065a0 <_strtod_l+0x88>
 8006900:	dd24      	ble.n	800694c <_strtod_l+0x434>
 8006902:	2b16      	cmp	r3, #22
 8006904:	dc0b      	bgt.n	800691e <_strtod_l+0x406>
 8006906:	496d      	ldr	r1, [pc, #436]	; (8006abc <_strtod_l+0x5a4>)
 8006908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800690c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006910:	4652      	mov	r2, sl
 8006912:	465b      	mov	r3, fp
 8006914:	f7f9 fe70 	bl	80005f8 <__aeabi_dmul>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	e640      	b.n	80065a0 <_strtod_l+0x88>
 800691e:	9a06      	ldr	r2, [sp, #24]
 8006920:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006924:	4293      	cmp	r3, r2
 8006926:	db20      	blt.n	800696a <_strtod_l+0x452>
 8006928:	4c64      	ldr	r4, [pc, #400]	; (8006abc <_strtod_l+0x5a4>)
 800692a:	f1c5 050f 	rsb	r5, r5, #15
 800692e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006932:	4652      	mov	r2, sl
 8006934:	465b      	mov	r3, fp
 8006936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800693a:	f7f9 fe5d 	bl	80005f8 <__aeabi_dmul>
 800693e:	9b06      	ldr	r3, [sp, #24]
 8006940:	1b5d      	subs	r5, r3, r5
 8006942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800694a:	e7e3      	b.n	8006914 <_strtod_l+0x3fc>
 800694c:	9b06      	ldr	r3, [sp, #24]
 800694e:	3316      	adds	r3, #22
 8006950:	db0b      	blt.n	800696a <_strtod_l+0x452>
 8006952:	9b05      	ldr	r3, [sp, #20]
 8006954:	1b9e      	subs	r6, r3, r6
 8006956:	4b59      	ldr	r3, [pc, #356]	; (8006abc <_strtod_l+0x5a4>)
 8006958:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800695c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006960:	4650      	mov	r0, sl
 8006962:	4659      	mov	r1, fp
 8006964:	f7f9 ff72 	bl	800084c <__aeabi_ddiv>
 8006968:	e7d6      	b.n	8006918 <_strtod_l+0x400>
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	eba5 0808 	sub.w	r8, r5, r8
 8006970:	4498      	add	r8, r3
 8006972:	f1b8 0f00 	cmp.w	r8, #0
 8006976:	dd74      	ble.n	8006a62 <_strtod_l+0x54a>
 8006978:	f018 030f 	ands.w	r3, r8, #15
 800697c:	d00a      	beq.n	8006994 <_strtod_l+0x47c>
 800697e:	494f      	ldr	r1, [pc, #316]	; (8006abc <_strtod_l+0x5a4>)
 8006980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006984:	4652      	mov	r2, sl
 8006986:	465b      	mov	r3, fp
 8006988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698c:	f7f9 fe34 	bl	80005f8 <__aeabi_dmul>
 8006990:	4682      	mov	sl, r0
 8006992:	468b      	mov	fp, r1
 8006994:	f038 080f 	bics.w	r8, r8, #15
 8006998:	d04f      	beq.n	8006a3a <_strtod_l+0x522>
 800699a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800699e:	dd22      	ble.n	80069e6 <_strtod_l+0x4ce>
 80069a0:	2500      	movs	r5, #0
 80069a2:	462e      	mov	r6, r5
 80069a4:	9507      	str	r5, [sp, #28]
 80069a6:	9505      	str	r5, [sp, #20]
 80069a8:	2322      	movs	r3, #34	; 0x22
 80069aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006ac4 <_strtod_l+0x5ac>
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f43f adf2 	beq.w	80065a0 <_strtod_l+0x88>
 80069bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069be:	4620      	mov	r0, r4
 80069c0:	f001 ff88 	bl	80088d4 <_Bfree>
 80069c4:	9905      	ldr	r1, [sp, #20]
 80069c6:	4620      	mov	r0, r4
 80069c8:	f001 ff84 	bl	80088d4 <_Bfree>
 80069cc:	4631      	mov	r1, r6
 80069ce:	4620      	mov	r0, r4
 80069d0:	f001 ff80 	bl	80088d4 <_Bfree>
 80069d4:	9907      	ldr	r1, [sp, #28]
 80069d6:	4620      	mov	r0, r4
 80069d8:	f001 ff7c 	bl	80088d4 <_Bfree>
 80069dc:	4629      	mov	r1, r5
 80069de:	4620      	mov	r0, r4
 80069e0:	f001 ff78 	bl	80088d4 <_Bfree>
 80069e4:	e5dc      	b.n	80065a0 <_strtod_l+0x88>
 80069e6:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <_strtod_l+0x5a8>)
 80069e8:	9304      	str	r3, [sp, #16]
 80069ea:	2300      	movs	r3, #0
 80069ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80069f0:	4650      	mov	r0, sl
 80069f2:	4659      	mov	r1, fp
 80069f4:	4699      	mov	r9, r3
 80069f6:	f1b8 0f01 	cmp.w	r8, #1
 80069fa:	dc21      	bgt.n	8006a40 <_strtod_l+0x528>
 80069fc:	b10b      	cbz	r3, 8006a02 <_strtod_l+0x4ea>
 80069fe:	4682      	mov	sl, r0
 8006a00:	468b      	mov	fp, r1
 8006a02:	4b2f      	ldr	r3, [pc, #188]	; (8006ac0 <_strtod_l+0x5a8>)
 8006a04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006a08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	465b      	mov	r3, fp
 8006a10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006a14:	f7f9 fdf0 	bl	80005f8 <__aeabi_dmul>
 8006a18:	4b2a      	ldr	r3, [pc, #168]	; (8006ac4 <_strtod_l+0x5ac>)
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	492a      	ldr	r1, [pc, #168]	; (8006ac8 <_strtod_l+0x5b0>)
 8006a20:	428b      	cmp	r3, r1
 8006a22:	4682      	mov	sl, r0
 8006a24:	d8bc      	bhi.n	80069a0 <_strtod_l+0x488>
 8006a26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a2a:	428b      	cmp	r3, r1
 8006a2c:	bf86      	itte	hi
 8006a2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006acc <_strtod_l+0x5b4>
 8006a32:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	e084      	b.n	8006b4a <_strtod_l+0x632>
 8006a40:	f018 0f01 	tst.w	r8, #1
 8006a44:	d005      	beq.n	8006a52 <_strtod_l+0x53a>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	2301      	movs	r3, #1
 8006a52:	9a04      	ldr	r2, [sp, #16]
 8006a54:	3208      	adds	r2, #8
 8006a56:	f109 0901 	add.w	r9, r9, #1
 8006a5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a5e:	9204      	str	r2, [sp, #16]
 8006a60:	e7c9      	b.n	80069f6 <_strtod_l+0x4de>
 8006a62:	d0ea      	beq.n	8006a3a <_strtod_l+0x522>
 8006a64:	f1c8 0800 	rsb	r8, r8, #0
 8006a68:	f018 020f 	ands.w	r2, r8, #15
 8006a6c:	d00a      	beq.n	8006a84 <_strtod_l+0x56c>
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <_strtod_l+0x5a4>)
 8006a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a74:	4650      	mov	r0, sl
 8006a76:	4659      	mov	r1, fp
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fee6 	bl	800084c <__aeabi_ddiv>
 8006a80:	4682      	mov	sl, r0
 8006a82:	468b      	mov	fp, r1
 8006a84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a88:	d0d7      	beq.n	8006a3a <_strtod_l+0x522>
 8006a8a:	f1b8 0f1f 	cmp.w	r8, #31
 8006a8e:	dd1f      	ble.n	8006ad0 <_strtod_l+0x5b8>
 8006a90:	2500      	movs	r5, #0
 8006a92:	462e      	mov	r6, r5
 8006a94:	9507      	str	r5, [sp, #28]
 8006a96:	9505      	str	r5, [sp, #20]
 8006a98:	2322      	movs	r3, #34	; 0x22
 8006a9a:	f04f 0a00 	mov.w	sl, #0
 8006a9e:	f04f 0b00 	mov.w	fp, #0
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	e786      	b.n	80069b4 <_strtod_l+0x49c>
 8006aa6:	bf00      	nop
 8006aa8:	0800a15d 	.word	0x0800a15d
 8006aac:	0800a1a0 	.word	0x0800a1a0
 8006ab0:	0800a155 	.word	0x0800a155
 8006ab4:	0800a2e4 	.word	0x0800a2e4
 8006ab8:	0800a5f8 	.word	0x0800a5f8
 8006abc:	0800a4d8 	.word	0x0800a4d8
 8006ac0:	0800a4b0 	.word	0x0800a4b0
 8006ac4:	7ff00000 	.word	0x7ff00000
 8006ac8:	7ca00000 	.word	0x7ca00000
 8006acc:	7fefffff 	.word	0x7fefffff
 8006ad0:	f018 0310 	ands.w	r3, r8, #16
 8006ad4:	bf18      	it	ne
 8006ad6:	236a      	movne	r3, #106	; 0x6a
 8006ad8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006e88 <_strtod_l+0x970>
 8006adc:	9304      	str	r3, [sp, #16]
 8006ade:	4650      	mov	r0, sl
 8006ae0:	4659      	mov	r1, fp
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f018 0f01 	tst.w	r8, #1
 8006ae8:	d004      	beq.n	8006af4 <_strtod_l+0x5dc>
 8006aea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	2301      	movs	r3, #1
 8006af4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006af8:	f109 0908 	add.w	r9, r9, #8
 8006afc:	d1f2      	bne.n	8006ae4 <_strtod_l+0x5cc>
 8006afe:	b10b      	cbz	r3, 8006b04 <_strtod_l+0x5ec>
 8006b00:	4682      	mov	sl, r0
 8006b02:	468b      	mov	fp, r1
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	b1c3      	cbz	r3, 8006b3a <_strtod_l+0x622>
 8006b08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	4659      	mov	r1, fp
 8006b14:	dd11      	ble.n	8006b3a <_strtod_l+0x622>
 8006b16:	2b1f      	cmp	r3, #31
 8006b18:	f340 8124 	ble.w	8006d64 <_strtod_l+0x84c>
 8006b1c:	2b34      	cmp	r3, #52	; 0x34
 8006b1e:	bfde      	ittt	le
 8006b20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b24:	f04f 33ff 	movle.w	r3, #4294967295
 8006b28:	fa03 f202 	lslle.w	r2, r3, r2
 8006b2c:	f04f 0a00 	mov.w	sl, #0
 8006b30:	bfcc      	ite	gt
 8006b32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b36:	ea02 0b01 	andle.w	fp, r2, r1
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4650      	mov	r0, sl
 8006b40:	4659      	mov	r1, fp
 8006b42:	f7f9 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d1a2      	bne.n	8006a90 <_strtod_l+0x578>
 8006b4a:	9b07      	ldr	r3, [sp, #28]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	9908      	ldr	r1, [sp, #32]
 8006b50:	462b      	mov	r3, r5
 8006b52:	463a      	mov	r2, r7
 8006b54:	4620      	mov	r0, r4
 8006b56:	f001 ff25 	bl	80089a4 <__s2b>
 8006b5a:	9007      	str	r0, [sp, #28]
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f43f af1f 	beq.w	80069a0 <_strtod_l+0x488>
 8006b62:	9b05      	ldr	r3, [sp, #20]
 8006b64:	1b9e      	subs	r6, r3, r6
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	bfb4      	ite	lt
 8006b6c:	4633      	movlt	r3, r6
 8006b6e:	2300      	movge	r3, #0
 8006b70:	930c      	str	r3, [sp, #48]	; 0x30
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	2500      	movs	r5, #0
 8006b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006b7c:	462e      	mov	r6, r5
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	4620      	mov	r0, r4
 8006b82:	6859      	ldr	r1, [r3, #4]
 8006b84:	f001 fe66 	bl	8008854 <_Balloc>
 8006b88:	9005      	str	r0, [sp, #20]
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f43f af0c 	beq.w	80069a8 <_strtod_l+0x490>
 8006b90:	9b07      	ldr	r3, [sp, #28]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	3202      	adds	r2, #2
 8006b96:	f103 010c 	add.w	r1, r3, #12
 8006b9a:	0092      	lsls	r2, r2, #2
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	f001 fe4b 	bl	8008838 <memcpy>
 8006ba2:	ec4b ab10 	vmov	d0, sl, fp
 8006ba6:	aa1a      	add	r2, sp, #104	; 0x68
 8006ba8:	a919      	add	r1, sp, #100	; 0x64
 8006baa:	4620      	mov	r0, r4
 8006bac:	f002 fa40 	bl	8009030 <__d2b>
 8006bb0:	ec4b ab18 	vmov	d8, sl, fp
 8006bb4:	9018      	str	r0, [sp, #96]	; 0x60
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f43f aef6 	beq.w	80069a8 <_strtod_l+0x490>
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f001 ff8a 	bl	8008ad8 <__i2b>
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f43f aeee 	beq.w	80069a8 <_strtod_l+0x490>
 8006bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bce:	9904      	ldr	r1, [sp, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfab      	itete	ge
 8006bd4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006bd6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006bd8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006bda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006bde:	bfac      	ite	ge
 8006be0:	eb03 0902 	addge.w	r9, r3, r2
 8006be4:	1ad7      	sublt	r7, r2, r3
 8006be6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006be8:	eba3 0801 	sub.w	r8, r3, r1
 8006bec:	4490      	add	r8, r2
 8006bee:	4ba1      	ldr	r3, [pc, #644]	; (8006e74 <_strtod_l+0x95c>)
 8006bf0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bf4:	4598      	cmp	r8, r3
 8006bf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bfa:	f280 80c7 	bge.w	8006d8c <_strtod_l+0x874>
 8006bfe:	eba3 0308 	sub.w	r3, r3, r8
 8006c02:	2b1f      	cmp	r3, #31
 8006c04:	eba2 0203 	sub.w	r2, r2, r3
 8006c08:	f04f 0101 	mov.w	r1, #1
 8006c0c:	f300 80b1 	bgt.w	8006d72 <_strtod_l+0x85a>
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	930d      	str	r3, [sp, #52]	; 0x34
 8006c16:	2300      	movs	r3, #0
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	eb09 0802 	add.w	r8, r9, r2
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	45c1      	cmp	r9, r8
 8006c22:	4417      	add	r7, r2
 8006c24:	441f      	add	r7, r3
 8006c26:	464b      	mov	r3, r9
 8006c28:	bfa8      	it	ge
 8006c2a:	4643      	movge	r3, r8
 8006c2c:	42bb      	cmp	r3, r7
 8006c2e:	bfa8      	it	ge
 8006c30:	463b      	movge	r3, r7
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfc2      	ittt	gt
 8006c36:	eba8 0803 	subgt.w	r8, r8, r3
 8006c3a:	1aff      	subgt	r7, r7, r3
 8006c3c:	eba9 0903 	subgt.w	r9, r9, r3
 8006c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dd17      	ble.n	8006c76 <_strtod_l+0x75e>
 8006c46:	4631      	mov	r1, r6
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f002 f804 	bl	8008c58 <__pow5mult>
 8006c50:	4606      	mov	r6, r0
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f43f aea8 	beq.w	80069a8 <_strtod_l+0x490>
 8006c58:	4601      	mov	r1, r0
 8006c5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f001 ff51 	bl	8008b04 <__multiply>
 8006c62:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f43f ae9f 	beq.w	80069a8 <_strtod_l+0x490>
 8006c6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f001 fe31 	bl	80088d4 <_Bfree>
 8006c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c74:	9318      	str	r3, [sp, #96]	; 0x60
 8006c76:	f1b8 0f00 	cmp.w	r8, #0
 8006c7a:	f300 808c 	bgt.w	8006d96 <_strtod_l+0x87e>
 8006c7e:	9b06      	ldr	r3, [sp, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dd08      	ble.n	8006c96 <_strtod_l+0x77e>
 8006c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c86:	9905      	ldr	r1, [sp, #20]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f001 ffe5 	bl	8008c58 <__pow5mult>
 8006c8e:	9005      	str	r0, [sp, #20]
 8006c90:	2800      	cmp	r0, #0
 8006c92:	f43f ae89 	beq.w	80069a8 <_strtod_l+0x490>
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	dd08      	ble.n	8006cac <_strtod_l+0x794>
 8006c9a:	9905      	ldr	r1, [sp, #20]
 8006c9c:	463a      	mov	r2, r7
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f002 f834 	bl	8008d0c <__lshift>
 8006ca4:	9005      	str	r0, [sp, #20]
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f43f ae7e 	beq.w	80069a8 <_strtod_l+0x490>
 8006cac:	f1b9 0f00 	cmp.w	r9, #0
 8006cb0:	dd08      	ble.n	8006cc4 <_strtod_l+0x7ac>
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	464a      	mov	r2, r9
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f002 f828 	bl	8008d0c <__lshift>
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f ae72 	beq.w	80069a8 <_strtod_l+0x490>
 8006cc4:	9a05      	ldr	r2, [sp, #20]
 8006cc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f002 f8ab 	bl	8008e24 <__mdiff>
 8006cce:	4605      	mov	r5, r0
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	f43f ae69 	beq.w	80069a8 <_strtod_l+0x490>
 8006cd6:	68c3      	ldr	r3, [r0, #12]
 8006cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60c3      	str	r3, [r0, #12]
 8006cde:	4631      	mov	r1, r6
 8006ce0:	f002 f884 	bl	8008dec <__mcmp>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	da60      	bge.n	8006daa <_strtod_l+0x892>
 8006ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cea:	ea53 030a 	orrs.w	r3, r3, sl
 8006cee:	f040 8082 	bne.w	8006df6 <_strtod_l+0x8de>
 8006cf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d17d      	bne.n	8006df6 <_strtod_l+0x8de>
 8006cfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cfe:	0d1b      	lsrs	r3, r3, #20
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d06:	d976      	bls.n	8006df6 <_strtod_l+0x8de>
 8006d08:	696b      	ldr	r3, [r5, #20]
 8006d0a:	b913      	cbnz	r3, 8006d12 <_strtod_l+0x7fa>
 8006d0c:	692b      	ldr	r3, [r5, #16]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	dd71      	ble.n	8006df6 <_strtod_l+0x8de>
 8006d12:	4629      	mov	r1, r5
 8006d14:	2201      	movs	r2, #1
 8006d16:	4620      	mov	r0, r4
 8006d18:	f001 fff8 	bl	8008d0c <__lshift>
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4605      	mov	r5, r0
 8006d20:	f002 f864 	bl	8008dec <__mcmp>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	dd66      	ble.n	8006df6 <_strtod_l+0x8de>
 8006d28:	9904      	ldr	r1, [sp, #16]
 8006d2a:	4a53      	ldr	r2, [pc, #332]	; (8006e78 <_strtod_l+0x960>)
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	2900      	cmp	r1, #0
 8006d30:	f000 8081 	beq.w	8006e36 <_strtod_l+0x91e>
 8006d34:	ea02 010b 	and.w	r1, r2, fp
 8006d38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d3c:	dc7b      	bgt.n	8006e36 <_strtod_l+0x91e>
 8006d3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d42:	f77f aea9 	ble.w	8006a98 <_strtod_l+0x580>
 8006d46:	4b4d      	ldr	r3, [pc, #308]	; (8006e7c <_strtod_l+0x964>)
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f7f9 fc53 	bl	80005f8 <__aeabi_dmul>
 8006d52:	460b      	mov	r3, r1
 8006d54:	4303      	orrs	r3, r0
 8006d56:	bf08      	it	eq
 8006d58:	2322      	moveq	r3, #34	; 0x22
 8006d5a:	4682      	mov	sl, r0
 8006d5c:	468b      	mov	fp, r1
 8006d5e:	bf08      	it	eq
 8006d60:	6023      	streq	r3, [r4, #0]
 8006d62:	e62b      	b.n	80069bc <_strtod_l+0x4a4>
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	ea03 0a0a 	and.w	sl, r3, sl
 8006d70:	e6e3      	b.n	8006b3a <_strtod_l+0x622>
 8006d72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006d76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006d7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006d7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006d82:	fa01 f308 	lsl.w	r3, r1, r8
 8006d86:	9308      	str	r3, [sp, #32]
 8006d88:	910d      	str	r1, [sp, #52]	; 0x34
 8006d8a:	e746      	b.n	8006c1a <_strtod_l+0x702>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9308      	str	r3, [sp, #32]
 8006d90:	2301      	movs	r3, #1
 8006d92:	930d      	str	r3, [sp, #52]	; 0x34
 8006d94:	e741      	b.n	8006c1a <_strtod_l+0x702>
 8006d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d98:	4642      	mov	r2, r8
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f001 ffb6 	bl	8008d0c <__lshift>
 8006da0:	9018      	str	r0, [sp, #96]	; 0x60
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f47f af6b 	bne.w	8006c7e <_strtod_l+0x766>
 8006da8:	e5fe      	b.n	80069a8 <_strtod_l+0x490>
 8006daa:	465f      	mov	r7, fp
 8006dac:	d16e      	bne.n	8006e8c <_strtod_l+0x974>
 8006dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db4:	b342      	cbz	r2, 8006e08 <_strtod_l+0x8f0>
 8006db6:	4a32      	ldr	r2, [pc, #200]	; (8006e80 <_strtod_l+0x968>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d128      	bne.n	8006e0e <_strtod_l+0x8f6>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	b1eb      	cbz	r3, 8006dfe <_strtod_l+0x8e6>
 8006dc2:	4b2d      	ldr	r3, [pc, #180]	; (8006e78 <_strtod_l+0x960>)
 8006dc4:	403b      	ands	r3, r7
 8006dc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dca:	f04f 32ff 	mov.w	r2, #4294967295
 8006dce:	d819      	bhi.n	8006e04 <_strtod_l+0x8ec>
 8006dd0:	0d1b      	lsrs	r3, r3, #20
 8006dd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	d117      	bne.n	8006e0e <_strtod_l+0x8f6>
 8006dde:	4b29      	ldr	r3, [pc, #164]	; (8006e84 <_strtod_l+0x96c>)
 8006de0:	429f      	cmp	r7, r3
 8006de2:	d102      	bne.n	8006dea <_strtod_l+0x8d2>
 8006de4:	3101      	adds	r1, #1
 8006de6:	f43f addf 	beq.w	80069a8 <_strtod_l+0x490>
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <_strtod_l+0x960>)
 8006dec:	403b      	ands	r3, r7
 8006dee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006df2:	f04f 0a00 	mov.w	sl, #0
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1a4      	bne.n	8006d46 <_strtod_l+0x82e>
 8006dfc:	e5de      	b.n	80069bc <_strtod_l+0x4a4>
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	e7ea      	b.n	8006dda <_strtod_l+0x8c2>
 8006e04:	4613      	mov	r3, r2
 8006e06:	e7e8      	b.n	8006dda <_strtod_l+0x8c2>
 8006e08:	ea53 030a 	orrs.w	r3, r3, sl
 8006e0c:	d08c      	beq.n	8006d28 <_strtod_l+0x810>
 8006e0e:	9b08      	ldr	r3, [sp, #32]
 8006e10:	b1db      	cbz	r3, 8006e4a <_strtod_l+0x932>
 8006e12:	423b      	tst	r3, r7
 8006e14:	d0ef      	beq.n	8006df6 <_strtod_l+0x8de>
 8006e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e18:	9a04      	ldr	r2, [sp, #16]
 8006e1a:	4650      	mov	r0, sl
 8006e1c:	4659      	mov	r1, fp
 8006e1e:	b1c3      	cbz	r3, 8006e52 <_strtod_l+0x93a>
 8006e20:	f7ff fb5e 	bl	80064e0 <sulp>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	ec51 0b18 	vmov	r0, r1, d8
 8006e2c:	f7f9 fa2e 	bl	800028c <__adddf3>
 8006e30:	4682      	mov	sl, r0
 8006e32:	468b      	mov	fp, r1
 8006e34:	e7df      	b.n	8006df6 <_strtod_l+0x8de>
 8006e36:	4013      	ands	r3, r2
 8006e38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e44:	f04f 3aff 	mov.w	sl, #4294967295
 8006e48:	e7d5      	b.n	8006df6 <_strtod_l+0x8de>
 8006e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4c:	ea13 0f0a 	tst.w	r3, sl
 8006e50:	e7e0      	b.n	8006e14 <_strtod_l+0x8fc>
 8006e52:	f7ff fb45 	bl	80064e0 <sulp>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	ec51 0b18 	vmov	r0, r1, d8
 8006e5e:	f7f9 fa13 	bl	8000288 <__aeabi_dsub>
 8006e62:	2200      	movs	r2, #0
 8006e64:	2300      	movs	r3, #0
 8006e66:	4682      	mov	sl, r0
 8006e68:	468b      	mov	fp, r1
 8006e6a:	f7f9 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0c1      	beq.n	8006df6 <_strtod_l+0x8de>
 8006e72:	e611      	b.n	8006a98 <_strtod_l+0x580>
 8006e74:	fffffc02 	.word	0xfffffc02
 8006e78:	7ff00000 	.word	0x7ff00000
 8006e7c:	39500000 	.word	0x39500000
 8006e80:	000fffff 	.word	0x000fffff
 8006e84:	7fefffff 	.word	0x7fefffff
 8006e88:	0800a1b8 	.word	0x0800a1b8
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f002 f92a 	bl	80090e8 <__ratio>
 8006e94:	ec59 8b10 	vmov	r8, r9, d0
 8006e98:	ee10 0a10 	vmov	r0, s0
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 fe24 	bl	8000af0 <__aeabi_dcmple>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d07a      	beq.n	8006fa2 <_strtod_l+0xa8a>
 8006eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d04a      	beq.n	8006f48 <_strtod_l+0xa30>
 8006eb2:	4b95      	ldr	r3, [pc, #596]	; (8007108 <_strtod_l+0xbf0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006eba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007108 <_strtod_l+0xbf0>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	4b92      	ldr	r3, [pc, #584]	; (800710c <_strtod_l+0xbf4>)
 8006ec4:	403b      	ands	r3, r7
 8006ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006eca:	4b91      	ldr	r3, [pc, #580]	; (8007110 <_strtod_l+0xbf8>)
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	f040 80b0 	bne.w	8007032 <_strtod_l+0xb1a>
 8006ed2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ed6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006eda:	ec4b ab10 	vmov	d0, sl, fp
 8006ede:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ee2:	f002 f829 	bl	8008f38 <__ulp>
 8006ee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006eea:	ec53 2b10 	vmov	r2, r3, d0
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	460b      	mov	r3, r1
 8006efc:	4983      	ldr	r1, [pc, #524]	; (800710c <_strtod_l+0xbf4>)
 8006efe:	4a85      	ldr	r2, [pc, #532]	; (8007114 <_strtod_l+0xbfc>)
 8006f00:	4019      	ands	r1, r3
 8006f02:	4291      	cmp	r1, r2
 8006f04:	4682      	mov	sl, r0
 8006f06:	d960      	bls.n	8006fca <_strtod_l+0xab2>
 8006f08:	ee18 3a90 	vmov	r3, s17
 8006f0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d104      	bne.n	8006f1e <_strtod_l+0xa06>
 8006f14:	ee18 3a10 	vmov	r3, s16
 8006f18:	3301      	adds	r3, #1
 8006f1a:	f43f ad45 	beq.w	80069a8 <_strtod_l+0x490>
 8006f1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007120 <_strtod_l+0xc08>
 8006f22:	f04f 3aff 	mov.w	sl, #4294967295
 8006f26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f001 fcd3 	bl	80088d4 <_Bfree>
 8006f2e:	9905      	ldr	r1, [sp, #20]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f001 fccf 	bl	80088d4 <_Bfree>
 8006f36:	4631      	mov	r1, r6
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 fccb 	bl	80088d4 <_Bfree>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4620      	mov	r0, r4
 8006f42:	f001 fcc7 	bl	80088d4 <_Bfree>
 8006f46:	e61a      	b.n	8006b7e <_strtod_l+0x666>
 8006f48:	f1ba 0f00 	cmp.w	sl, #0
 8006f4c:	d11b      	bne.n	8006f86 <_strtod_l+0xa6e>
 8006f4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f52:	b9f3      	cbnz	r3, 8006f92 <_strtod_l+0xa7a>
 8006f54:	4b6c      	ldr	r3, [pc, #432]	; (8007108 <_strtod_l+0xbf0>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8006f60:	b9d0      	cbnz	r0, 8006f98 <_strtod_l+0xa80>
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	4b6c      	ldr	r3, [pc, #432]	; (8007118 <_strtod_l+0xc00>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	4680      	mov	r8, r0
 8006f70:	4689      	mov	r9, r1
 8006f72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006f7a:	9315      	str	r3, [sp, #84]	; 0x54
 8006f7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f84:	e79d      	b.n	8006ec2 <_strtod_l+0x9aa>
 8006f86:	f1ba 0f01 	cmp.w	sl, #1
 8006f8a:	d102      	bne.n	8006f92 <_strtod_l+0xa7a>
 8006f8c:	2f00      	cmp	r7, #0
 8006f8e:	f43f ad83 	beq.w	8006a98 <_strtod_l+0x580>
 8006f92:	4b62      	ldr	r3, [pc, #392]	; (800711c <_strtod_l+0xc04>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	e78e      	b.n	8006eb6 <_strtod_l+0x99e>
 8006f98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007118 <_strtod_l+0xc00>
 8006f9c:	f04f 0800 	mov.w	r8, #0
 8006fa0:	e7e7      	b.n	8006f72 <_strtod_l+0xa5a>
 8006fa2:	4b5d      	ldr	r3, [pc, #372]	; (8007118 <_strtod_l+0xc00>)
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4689      	mov	r9, r1
 8006fb4:	b933      	cbnz	r3, 8006fc4 <_strtod_l+0xaac>
 8006fb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fba:	900e      	str	r0, [sp, #56]	; 0x38
 8006fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006fc2:	e7dd      	b.n	8006f80 <_strtod_l+0xa68>
 8006fc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006fc8:	e7f9      	b.n	8006fbe <_strtod_l+0xaa6>
 8006fca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1a8      	bne.n	8006f26 <_strtod_l+0xa0e>
 8006fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fda:	0d1b      	lsrs	r3, r3, #20
 8006fdc:	051b      	lsls	r3, r3, #20
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d1a1      	bne.n	8006f26 <_strtod_l+0xa0e>
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 fe67 	bl	8000cb8 <__aeabi_d2lz>
 8006fea:	f7f9 fad7 	bl	800059c <__aeabi_l2d>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 f947 	bl	8000288 <__aeabi_dsub>
 8006ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007000:	ea43 030a 	orr.w	r3, r3, sl
 8007004:	4313      	orrs	r3, r2
 8007006:	4680      	mov	r8, r0
 8007008:	4689      	mov	r9, r1
 800700a:	d055      	beq.n	80070b8 <_strtod_l+0xba0>
 800700c:	a336      	add	r3, pc, #216	; (adr r3, 80070e8 <_strtod_l+0xbd0>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 fd63 	bl	8000adc <__aeabi_dcmplt>
 8007016:	2800      	cmp	r0, #0
 8007018:	f47f acd0 	bne.w	80069bc <_strtod_l+0x4a4>
 800701c:	a334      	add	r3, pc, #208	; (adr r3, 80070f0 <_strtod_l+0xbd8>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	4640      	mov	r0, r8
 8007024:	4649      	mov	r1, r9
 8007026:	f7f9 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800702a:	2800      	cmp	r0, #0
 800702c:	f43f af7b 	beq.w	8006f26 <_strtod_l+0xa0e>
 8007030:	e4c4      	b.n	80069bc <_strtod_l+0x4a4>
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	b333      	cbz	r3, 8007084 <_strtod_l+0xb6c>
 8007036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007038:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800703c:	d822      	bhi.n	8007084 <_strtod_l+0xb6c>
 800703e:	a32e      	add	r3, pc, #184	; (adr r3, 80070f8 <_strtod_l+0xbe0>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	4640      	mov	r0, r8
 8007046:	4649      	mov	r1, r9
 8007048:	f7f9 fd52 	bl	8000af0 <__aeabi_dcmple>
 800704c:	b1a0      	cbz	r0, 8007078 <_strtod_l+0xb60>
 800704e:	4649      	mov	r1, r9
 8007050:	4640      	mov	r0, r8
 8007052:	f7f9 fda9 	bl	8000ba8 <__aeabi_d2uiz>
 8007056:	2801      	cmp	r0, #1
 8007058:	bf38      	it	cc
 800705a:	2001      	movcc	r0, #1
 800705c:	f7f9 fa52 	bl	8000504 <__aeabi_ui2d>
 8007060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007062:	4680      	mov	r8, r0
 8007064:	4689      	mov	r9, r1
 8007066:	bb23      	cbnz	r3, 80070b2 <_strtod_l+0xb9a>
 8007068:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800706c:	9010      	str	r0, [sp, #64]	; 0x40
 800706e:	9311      	str	r3, [sp, #68]	; 0x44
 8007070:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007074:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800707c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007088:	eeb0 0a48 	vmov.f32	s0, s16
 800708c:	eef0 0a68 	vmov.f32	s1, s17
 8007090:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007094:	f001 ff50 	bl	8008f38 <__ulp>
 8007098:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800709c:	ec53 2b10 	vmov	r2, r3, d0
 80070a0:	f7f9 faaa 	bl	80005f8 <__aeabi_dmul>
 80070a4:	ec53 2b18 	vmov	r2, r3, d8
 80070a8:	f7f9 f8f0 	bl	800028c <__adddf3>
 80070ac:	4682      	mov	sl, r0
 80070ae:	468b      	mov	fp, r1
 80070b0:	e78d      	b.n	8006fce <_strtod_l+0xab6>
 80070b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80070b6:	e7db      	b.n	8007070 <_strtod_l+0xb58>
 80070b8:	a311      	add	r3, pc, #68	; (adr r3, 8007100 <_strtod_l+0xbe8>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 fd0d 	bl	8000adc <__aeabi_dcmplt>
 80070c2:	e7b2      	b.n	800702a <_strtod_l+0xb12>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	; 0x28
 80070c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	f7ff ba6b 	b.w	80065a8 <_strtod_l+0x90>
 80070d2:	2a65      	cmp	r2, #101	; 0x65
 80070d4:	f43f ab5f 	beq.w	8006796 <_strtod_l+0x27e>
 80070d8:	2a45      	cmp	r2, #69	; 0x45
 80070da:	f43f ab5c 	beq.w	8006796 <_strtod_l+0x27e>
 80070de:	2301      	movs	r3, #1
 80070e0:	f7ff bb94 	b.w	800680c <_strtod_l+0x2f4>
 80070e4:	f3af 8000 	nop.w
 80070e8:	94a03595 	.word	0x94a03595
 80070ec:	3fdfffff 	.word	0x3fdfffff
 80070f0:	35afe535 	.word	0x35afe535
 80070f4:	3fe00000 	.word	0x3fe00000
 80070f8:	ffc00000 	.word	0xffc00000
 80070fc:	41dfffff 	.word	0x41dfffff
 8007100:	94a03595 	.word	0x94a03595
 8007104:	3fcfffff 	.word	0x3fcfffff
 8007108:	3ff00000 	.word	0x3ff00000
 800710c:	7ff00000 	.word	0x7ff00000
 8007110:	7fe00000 	.word	0x7fe00000
 8007114:	7c9fffff 	.word	0x7c9fffff
 8007118:	3fe00000 	.word	0x3fe00000
 800711c:	bff00000 	.word	0xbff00000
 8007120:	7fefffff 	.word	0x7fefffff

08007124 <_strtod_r>:
 8007124:	4b01      	ldr	r3, [pc, #4]	; (800712c <_strtod_r+0x8>)
 8007126:	f7ff b9f7 	b.w	8006518 <_strtod_l>
 800712a:	bf00      	nop
 800712c:	20000074 	.word	0x20000074

08007130 <_strtol_l.constprop.0>:
 8007130:	2b01      	cmp	r3, #1
 8007132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007136:	d001      	beq.n	800713c <_strtol_l.constprop.0+0xc>
 8007138:	2b24      	cmp	r3, #36	; 0x24
 800713a:	d906      	bls.n	800714a <_strtol_l.constprop.0+0x1a>
 800713c:	f7fe fae6 	bl	800570c <__errno>
 8007140:	2316      	movs	r3, #22
 8007142:	6003      	str	r3, [r0, #0]
 8007144:	2000      	movs	r0, #0
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007230 <_strtol_l.constprop.0+0x100>
 800714e:	460d      	mov	r5, r1
 8007150:	462e      	mov	r6, r5
 8007152:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007156:	f814 700c 	ldrb.w	r7, [r4, ip]
 800715a:	f017 0708 	ands.w	r7, r7, #8
 800715e:	d1f7      	bne.n	8007150 <_strtol_l.constprop.0+0x20>
 8007160:	2c2d      	cmp	r4, #45	; 0x2d
 8007162:	d132      	bne.n	80071ca <_strtol_l.constprop.0+0x9a>
 8007164:	782c      	ldrb	r4, [r5, #0]
 8007166:	2701      	movs	r7, #1
 8007168:	1cb5      	adds	r5, r6, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d05b      	beq.n	8007226 <_strtol_l.constprop.0+0xf6>
 800716e:	2b10      	cmp	r3, #16
 8007170:	d109      	bne.n	8007186 <_strtol_l.constprop.0+0x56>
 8007172:	2c30      	cmp	r4, #48	; 0x30
 8007174:	d107      	bne.n	8007186 <_strtol_l.constprop.0+0x56>
 8007176:	782c      	ldrb	r4, [r5, #0]
 8007178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800717c:	2c58      	cmp	r4, #88	; 0x58
 800717e:	d14d      	bne.n	800721c <_strtol_l.constprop.0+0xec>
 8007180:	786c      	ldrb	r4, [r5, #1]
 8007182:	2310      	movs	r3, #16
 8007184:	3502      	adds	r5, #2
 8007186:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800718a:	f108 38ff 	add.w	r8, r8, #4294967295
 800718e:	f04f 0c00 	mov.w	ip, #0
 8007192:	fbb8 f9f3 	udiv	r9, r8, r3
 8007196:	4666      	mov	r6, ip
 8007198:	fb03 8a19 	mls	sl, r3, r9, r8
 800719c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80071a0:	f1be 0f09 	cmp.w	lr, #9
 80071a4:	d816      	bhi.n	80071d4 <_strtol_l.constprop.0+0xa4>
 80071a6:	4674      	mov	r4, lr
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	dd24      	ble.n	80071f6 <_strtol_l.constprop.0+0xc6>
 80071ac:	f1bc 0f00 	cmp.w	ip, #0
 80071b0:	db1e      	blt.n	80071f0 <_strtol_l.constprop.0+0xc0>
 80071b2:	45b1      	cmp	r9, r6
 80071b4:	d31c      	bcc.n	80071f0 <_strtol_l.constprop.0+0xc0>
 80071b6:	d101      	bne.n	80071bc <_strtol_l.constprop.0+0x8c>
 80071b8:	45a2      	cmp	sl, r4
 80071ba:	db19      	blt.n	80071f0 <_strtol_l.constprop.0+0xc0>
 80071bc:	fb06 4603 	mla	r6, r6, r3, r4
 80071c0:	f04f 0c01 	mov.w	ip, #1
 80071c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c8:	e7e8      	b.n	800719c <_strtol_l.constprop.0+0x6c>
 80071ca:	2c2b      	cmp	r4, #43	; 0x2b
 80071cc:	bf04      	itt	eq
 80071ce:	782c      	ldrbeq	r4, [r5, #0]
 80071d0:	1cb5      	addeq	r5, r6, #2
 80071d2:	e7ca      	b.n	800716a <_strtol_l.constprop.0+0x3a>
 80071d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80071d8:	f1be 0f19 	cmp.w	lr, #25
 80071dc:	d801      	bhi.n	80071e2 <_strtol_l.constprop.0+0xb2>
 80071de:	3c37      	subs	r4, #55	; 0x37
 80071e0:	e7e2      	b.n	80071a8 <_strtol_l.constprop.0+0x78>
 80071e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80071e6:	f1be 0f19 	cmp.w	lr, #25
 80071ea:	d804      	bhi.n	80071f6 <_strtol_l.constprop.0+0xc6>
 80071ec:	3c57      	subs	r4, #87	; 0x57
 80071ee:	e7db      	b.n	80071a8 <_strtol_l.constprop.0+0x78>
 80071f0:	f04f 3cff 	mov.w	ip, #4294967295
 80071f4:	e7e6      	b.n	80071c4 <_strtol_l.constprop.0+0x94>
 80071f6:	f1bc 0f00 	cmp.w	ip, #0
 80071fa:	da05      	bge.n	8007208 <_strtol_l.constprop.0+0xd8>
 80071fc:	2322      	movs	r3, #34	; 0x22
 80071fe:	6003      	str	r3, [r0, #0]
 8007200:	4646      	mov	r6, r8
 8007202:	b942      	cbnz	r2, 8007216 <_strtol_l.constprop.0+0xe6>
 8007204:	4630      	mov	r0, r6
 8007206:	e79e      	b.n	8007146 <_strtol_l.constprop.0+0x16>
 8007208:	b107      	cbz	r7, 800720c <_strtol_l.constprop.0+0xdc>
 800720a:	4276      	negs	r6, r6
 800720c:	2a00      	cmp	r2, #0
 800720e:	d0f9      	beq.n	8007204 <_strtol_l.constprop.0+0xd4>
 8007210:	f1bc 0f00 	cmp.w	ip, #0
 8007214:	d000      	beq.n	8007218 <_strtol_l.constprop.0+0xe8>
 8007216:	1e69      	subs	r1, r5, #1
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	e7f3      	b.n	8007204 <_strtol_l.constprop.0+0xd4>
 800721c:	2430      	movs	r4, #48	; 0x30
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1b1      	bne.n	8007186 <_strtol_l.constprop.0+0x56>
 8007222:	2308      	movs	r3, #8
 8007224:	e7af      	b.n	8007186 <_strtol_l.constprop.0+0x56>
 8007226:	2c30      	cmp	r4, #48	; 0x30
 8007228:	d0a5      	beq.n	8007176 <_strtol_l.constprop.0+0x46>
 800722a:	230a      	movs	r3, #10
 800722c:	e7ab      	b.n	8007186 <_strtol_l.constprop.0+0x56>
 800722e:	bf00      	nop
 8007230:	0800a1e1 	.word	0x0800a1e1

08007234 <_strtol_r>:
 8007234:	f7ff bf7c 	b.w	8007130 <_strtol_l.constprop.0>

08007238 <quorem>:
 8007238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	6903      	ldr	r3, [r0, #16]
 800723e:	690c      	ldr	r4, [r1, #16]
 8007240:	42a3      	cmp	r3, r4
 8007242:	4607      	mov	r7, r0
 8007244:	f2c0 8081 	blt.w	800734a <quorem+0x112>
 8007248:	3c01      	subs	r4, #1
 800724a:	f101 0814 	add.w	r8, r1, #20
 800724e:	f100 0514 	add.w	r5, r0, #20
 8007252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800725c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007260:	3301      	adds	r3, #1
 8007262:	429a      	cmp	r2, r3
 8007264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800726c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007270:	d331      	bcc.n	80072d6 <quorem+0x9e>
 8007272:	f04f 0e00 	mov.w	lr, #0
 8007276:	4640      	mov	r0, r8
 8007278:	46ac      	mov	ip, r5
 800727a:	46f2      	mov	sl, lr
 800727c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007280:	b293      	uxth	r3, r2
 8007282:	fb06 e303 	mla	r3, r6, r3, lr
 8007286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800728a:	b29b      	uxth	r3, r3
 800728c:	ebaa 0303 	sub.w	r3, sl, r3
 8007290:	f8dc a000 	ldr.w	sl, [ip]
 8007294:	0c12      	lsrs	r2, r2, #16
 8007296:	fa13 f38a 	uxtah	r3, r3, sl
 800729a:	fb06 e202 	mla	r2, r6, r2, lr
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	9b00      	ldr	r3, [sp, #0]
 80072a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072a6:	b292      	uxth	r2, r2
 80072a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80072b4:	4581      	cmp	r9, r0
 80072b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ba:	f84c 3b04 	str.w	r3, [ip], #4
 80072be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072c2:	d2db      	bcs.n	800727c <quorem+0x44>
 80072c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80072c8:	b92b      	cbnz	r3, 80072d6 <quorem+0x9e>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	429d      	cmp	r5, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	d32e      	bcc.n	8007332 <quorem+0xfa>
 80072d4:	613c      	str	r4, [r7, #16]
 80072d6:	4638      	mov	r0, r7
 80072d8:	f001 fd88 	bl	8008dec <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	db24      	blt.n	800732a <quorem+0xf2>
 80072e0:	3601      	adds	r6, #1
 80072e2:	4628      	mov	r0, r5
 80072e4:	f04f 0c00 	mov.w	ip, #0
 80072e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80072ec:	f8d0 e000 	ldr.w	lr, [r0]
 80072f0:	b293      	uxth	r3, r2
 80072f2:	ebac 0303 	sub.w	r3, ip, r3
 80072f6:	0c12      	lsrs	r2, r2, #16
 80072f8:	fa13 f38e 	uxtah	r3, r3, lr
 80072fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800730a:	45c1      	cmp	r9, r8
 800730c:	f840 3b04 	str.w	r3, [r0], #4
 8007310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007314:	d2e8      	bcs.n	80072e8 <quorem+0xb0>
 8007316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800731a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800731e:	b922      	cbnz	r2, 800732a <quorem+0xf2>
 8007320:	3b04      	subs	r3, #4
 8007322:	429d      	cmp	r5, r3
 8007324:	461a      	mov	r2, r3
 8007326:	d30a      	bcc.n	800733e <quorem+0x106>
 8007328:	613c      	str	r4, [r7, #16]
 800732a:	4630      	mov	r0, r6
 800732c:	b003      	add	sp, #12
 800732e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	3b04      	subs	r3, #4
 8007336:	2a00      	cmp	r2, #0
 8007338:	d1cc      	bne.n	80072d4 <quorem+0x9c>
 800733a:	3c01      	subs	r4, #1
 800733c:	e7c7      	b.n	80072ce <quorem+0x96>
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	3b04      	subs	r3, #4
 8007342:	2a00      	cmp	r2, #0
 8007344:	d1f0      	bne.n	8007328 <quorem+0xf0>
 8007346:	3c01      	subs	r4, #1
 8007348:	e7eb      	b.n	8007322 <quorem+0xea>
 800734a:	2000      	movs	r0, #0
 800734c:	e7ee      	b.n	800732c <quorem+0xf4>
	...

08007350 <_dtoa_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	ed2d 8b04 	vpush	{d8-d9}
 8007358:	ec57 6b10 	vmov	r6, r7, d0
 800735c:	b093      	sub	sp, #76	; 0x4c
 800735e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007364:	9106      	str	r1, [sp, #24]
 8007366:	ee10 aa10 	vmov	sl, s0
 800736a:	4604      	mov	r4, r0
 800736c:	9209      	str	r2, [sp, #36]	; 0x24
 800736e:	930c      	str	r3, [sp, #48]	; 0x30
 8007370:	46bb      	mov	fp, r7
 8007372:	b975      	cbnz	r5, 8007392 <_dtoa_r+0x42>
 8007374:	2010      	movs	r0, #16
 8007376:	f001 fa45 	bl	8008804 <malloc>
 800737a:	4602      	mov	r2, r0
 800737c:	6260      	str	r0, [r4, #36]	; 0x24
 800737e:	b920      	cbnz	r0, 800738a <_dtoa_r+0x3a>
 8007380:	4ba7      	ldr	r3, [pc, #668]	; (8007620 <_dtoa_r+0x2d0>)
 8007382:	21ea      	movs	r1, #234	; 0xea
 8007384:	48a7      	ldr	r0, [pc, #668]	; (8007624 <_dtoa_r+0x2d4>)
 8007386:	f002 fc23 	bl	8009bd0 <__assert_func>
 800738a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800738e:	6005      	str	r5, [r0, #0]
 8007390:	60c5      	str	r5, [r0, #12]
 8007392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007394:	6819      	ldr	r1, [r3, #0]
 8007396:	b151      	cbz	r1, 80073ae <_dtoa_r+0x5e>
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	604a      	str	r2, [r1, #4]
 800739c:	2301      	movs	r3, #1
 800739e:	4093      	lsls	r3, r2
 80073a0:	608b      	str	r3, [r1, #8]
 80073a2:	4620      	mov	r0, r4
 80073a4:	f001 fa96 	bl	80088d4 <_Bfree>
 80073a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	1e3b      	subs	r3, r7, #0
 80073b0:	bfaa      	itet	ge
 80073b2:	2300      	movge	r3, #0
 80073b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80073b8:	f8c8 3000 	strge.w	r3, [r8]
 80073bc:	4b9a      	ldr	r3, [pc, #616]	; (8007628 <_dtoa_r+0x2d8>)
 80073be:	bfbc      	itt	lt
 80073c0:	2201      	movlt	r2, #1
 80073c2:	f8c8 2000 	strlt.w	r2, [r8]
 80073c6:	ea33 030b 	bics.w	r3, r3, fp
 80073ca:	d11b      	bne.n	8007404 <_dtoa_r+0xb4>
 80073cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073d8:	4333      	orrs	r3, r6
 80073da:	f000 8592 	beq.w	8007f02 <_dtoa_r+0xbb2>
 80073de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073e0:	b963      	cbnz	r3, 80073fc <_dtoa_r+0xac>
 80073e2:	4b92      	ldr	r3, [pc, #584]	; (800762c <_dtoa_r+0x2dc>)
 80073e4:	e022      	b.n	800742c <_dtoa_r+0xdc>
 80073e6:	4b92      	ldr	r3, [pc, #584]	; (8007630 <_dtoa_r+0x2e0>)
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	3308      	adds	r3, #8
 80073ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	9801      	ldr	r0, [sp, #4]
 80073f2:	b013      	add	sp, #76	; 0x4c
 80073f4:	ecbd 8b04 	vpop	{d8-d9}
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	4b8b      	ldr	r3, [pc, #556]	; (800762c <_dtoa_r+0x2dc>)
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	3303      	adds	r3, #3
 8007402:	e7f3      	b.n	80073ec <_dtoa_r+0x9c>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4650      	mov	r0, sl
 800740a:	4659      	mov	r1, fp
 800740c:	f7f9 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007410:	ec4b ab19 	vmov	d9, sl, fp
 8007414:	4680      	mov	r8, r0
 8007416:	b158      	cbz	r0, 8007430 <_dtoa_r+0xe0>
 8007418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800741a:	2301      	movs	r3, #1
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 856b 	beq.w	8007efc <_dtoa_r+0xbac>
 8007426:	4883      	ldr	r0, [pc, #524]	; (8007634 <_dtoa_r+0x2e4>)
 8007428:	6018      	str	r0, [r3, #0]
 800742a:	1e43      	subs	r3, r0, #1
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	e7df      	b.n	80073f0 <_dtoa_r+0xa0>
 8007430:	ec4b ab10 	vmov	d0, sl, fp
 8007434:	aa10      	add	r2, sp, #64	; 0x40
 8007436:	a911      	add	r1, sp, #68	; 0x44
 8007438:	4620      	mov	r0, r4
 800743a:	f001 fdf9 	bl	8009030 <__d2b>
 800743e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007442:	ee08 0a10 	vmov	s16, r0
 8007446:	2d00      	cmp	r5, #0
 8007448:	f000 8084 	beq.w	8007554 <_dtoa_r+0x204>
 800744c:	ee19 3a90 	vmov	r3, s19
 8007450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007458:	4656      	mov	r6, sl
 800745a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800745e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007466:	4b74      	ldr	r3, [pc, #464]	; (8007638 <_dtoa_r+0x2e8>)
 8007468:	2200      	movs	r2, #0
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 ff0b 	bl	8000288 <__aeabi_dsub>
 8007472:	a365      	add	r3, pc, #404	; (adr r3, 8007608 <_dtoa_r+0x2b8>)
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f7f9 f8be 	bl	80005f8 <__aeabi_dmul>
 800747c:	a364      	add	r3, pc, #400	; (adr r3, 8007610 <_dtoa_r+0x2c0>)
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f7f8 ff03 	bl	800028c <__adddf3>
 8007486:	4606      	mov	r6, r0
 8007488:	4628      	mov	r0, r5
 800748a:	460f      	mov	r7, r1
 800748c:	f7f9 f84a 	bl	8000524 <__aeabi_i2d>
 8007490:	a361      	add	r3, pc, #388	; (adr r3, 8007618 <_dtoa_r+0x2c8>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f9 f8af 	bl	80005f8 <__aeabi_dmul>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f8 fef3 	bl	800028c <__adddf3>
 80074a6:	4606      	mov	r6, r0
 80074a8:	460f      	mov	r7, r1
 80074aa:	f7f9 fb55 	bl	8000b58 <__aeabi_d2iz>
 80074ae:	2200      	movs	r2, #0
 80074b0:	9000      	str	r0, [sp, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f9 fb10 	bl	8000adc <__aeabi_dcmplt>
 80074bc:	b150      	cbz	r0, 80074d4 <_dtoa_r+0x184>
 80074be:	9800      	ldr	r0, [sp, #0]
 80074c0:	f7f9 f830 	bl	8000524 <__aeabi_i2d>
 80074c4:	4632      	mov	r2, r6
 80074c6:	463b      	mov	r3, r7
 80074c8:	f7f9 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80074cc:	b910      	cbnz	r0, 80074d4 <_dtoa_r+0x184>
 80074ce:	9b00      	ldr	r3, [sp, #0]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	2b16      	cmp	r3, #22
 80074d8:	d85a      	bhi.n	8007590 <_dtoa_r+0x240>
 80074da:	9a00      	ldr	r2, [sp, #0]
 80074dc:	4b57      	ldr	r3, [pc, #348]	; (800763c <_dtoa_r+0x2ec>)
 80074de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	ec51 0b19 	vmov	r0, r1, d9
 80074ea:	f7f9 faf7 	bl	8000adc <__aeabi_dcmplt>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d050      	beq.n	8007594 <_dtoa_r+0x244>
 80074f2:	9b00      	ldr	r3, [sp, #0]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	2300      	movs	r3, #0
 80074fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074fe:	1b5d      	subs	r5, r3, r5
 8007500:	1e6b      	subs	r3, r5, #1
 8007502:	9305      	str	r3, [sp, #20]
 8007504:	bf45      	ittet	mi
 8007506:	f1c5 0301 	rsbmi	r3, r5, #1
 800750a:	9304      	strmi	r3, [sp, #16]
 800750c:	2300      	movpl	r3, #0
 800750e:	2300      	movmi	r3, #0
 8007510:	bf4c      	ite	mi
 8007512:	9305      	strmi	r3, [sp, #20]
 8007514:	9304      	strpl	r3, [sp, #16]
 8007516:	9b00      	ldr	r3, [sp, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	db3d      	blt.n	8007598 <_dtoa_r+0x248>
 800751c:	9b05      	ldr	r3, [sp, #20]
 800751e:	9a00      	ldr	r2, [sp, #0]
 8007520:	920a      	str	r2, [sp, #40]	; 0x28
 8007522:	4413      	add	r3, r2
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	2300      	movs	r3, #0
 8007528:	9307      	str	r3, [sp, #28]
 800752a:	9b06      	ldr	r3, [sp, #24]
 800752c:	2b09      	cmp	r3, #9
 800752e:	f200 8089 	bhi.w	8007644 <_dtoa_r+0x2f4>
 8007532:	2b05      	cmp	r3, #5
 8007534:	bfc4      	itt	gt
 8007536:	3b04      	subgt	r3, #4
 8007538:	9306      	strgt	r3, [sp, #24]
 800753a:	9b06      	ldr	r3, [sp, #24]
 800753c:	f1a3 0302 	sub.w	r3, r3, #2
 8007540:	bfcc      	ite	gt
 8007542:	2500      	movgt	r5, #0
 8007544:	2501      	movle	r5, #1
 8007546:	2b03      	cmp	r3, #3
 8007548:	f200 8087 	bhi.w	800765a <_dtoa_r+0x30a>
 800754c:	e8df f003 	tbb	[pc, r3]
 8007550:	59383a2d 	.word	0x59383a2d
 8007554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007558:	441d      	add	r5, r3
 800755a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800755e:	2b20      	cmp	r3, #32
 8007560:	bfc1      	itttt	gt
 8007562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800756a:	fa0b f303 	lslgt.w	r3, fp, r3
 800756e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007572:	bfda      	itte	le
 8007574:	f1c3 0320 	rsble	r3, r3, #32
 8007578:	fa06 f003 	lslle.w	r0, r6, r3
 800757c:	4318      	orrgt	r0, r3
 800757e:	f7f8 ffc1 	bl	8000504 <__aeabi_ui2d>
 8007582:	2301      	movs	r3, #1
 8007584:	4606      	mov	r6, r0
 8007586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800758a:	3d01      	subs	r5, #1
 800758c:	930e      	str	r3, [sp, #56]	; 0x38
 800758e:	e76a      	b.n	8007466 <_dtoa_r+0x116>
 8007590:	2301      	movs	r3, #1
 8007592:	e7b2      	b.n	80074fa <_dtoa_r+0x1aa>
 8007594:	900b      	str	r0, [sp, #44]	; 0x2c
 8007596:	e7b1      	b.n	80074fc <_dtoa_r+0x1ac>
 8007598:	9b04      	ldr	r3, [sp, #16]
 800759a:	9a00      	ldr	r2, [sp, #0]
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	9304      	str	r3, [sp, #16]
 80075a0:	4253      	negs	r3, r2
 80075a2:	9307      	str	r3, [sp, #28]
 80075a4:	2300      	movs	r3, #0
 80075a6:	930a      	str	r3, [sp, #40]	; 0x28
 80075a8:	e7bf      	b.n	800752a <_dtoa_r+0x1da>
 80075aa:	2300      	movs	r3, #0
 80075ac:	9308      	str	r3, [sp, #32]
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dc55      	bgt.n	8007660 <_dtoa_r+0x310>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075ba:	461a      	mov	r2, r3
 80075bc:	9209      	str	r2, [sp, #36]	; 0x24
 80075be:	e00c      	b.n	80075da <_dtoa_r+0x28a>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e7f3      	b.n	80075ac <_dtoa_r+0x25c>
 80075c4:	2300      	movs	r3, #0
 80075c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	9b00      	ldr	r3, [sp, #0]
 80075cc:	4413      	add	r3, r2
 80075ce:	9302      	str	r3, [sp, #8]
 80075d0:	3301      	adds	r3, #1
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	bfb8      	it	lt
 80075d8:	2301      	movlt	r3, #1
 80075da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075dc:	2200      	movs	r2, #0
 80075de:	6042      	str	r2, [r0, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	f102 0614 	add.w	r6, r2, #20
 80075e6:	429e      	cmp	r6, r3
 80075e8:	6841      	ldr	r1, [r0, #4]
 80075ea:	d93d      	bls.n	8007668 <_dtoa_r+0x318>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f001 f931 	bl	8008854 <_Balloc>
 80075f2:	9001      	str	r0, [sp, #4]
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d13b      	bne.n	8007670 <_dtoa_r+0x320>
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <_dtoa_r+0x2f0>)
 80075fa:	4602      	mov	r2, r0
 80075fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007600:	e6c0      	b.n	8007384 <_dtoa_r+0x34>
 8007602:	2301      	movs	r3, #1
 8007604:	e7df      	b.n	80075c6 <_dtoa_r+0x276>
 8007606:	bf00      	nop
 8007608:	636f4361 	.word	0x636f4361
 800760c:	3fd287a7 	.word	0x3fd287a7
 8007610:	8b60c8b3 	.word	0x8b60c8b3
 8007614:	3fc68a28 	.word	0x3fc68a28
 8007618:	509f79fb 	.word	0x509f79fb
 800761c:	3fd34413 	.word	0x3fd34413
 8007620:	0800a2ee 	.word	0x0800a2ee
 8007624:	0800a305 	.word	0x0800a305
 8007628:	7ff00000 	.word	0x7ff00000
 800762c:	0800a2ea 	.word	0x0800a2ea
 8007630:	0800a2e1 	.word	0x0800a2e1
 8007634:	0800a161 	.word	0x0800a161
 8007638:	3ff80000 	.word	0x3ff80000
 800763c:	0800a4d8 	.word	0x0800a4d8
 8007640:	0800a360 	.word	0x0800a360
 8007644:	2501      	movs	r5, #1
 8007646:	2300      	movs	r3, #0
 8007648:	9306      	str	r3, [sp, #24]
 800764a:	9508      	str	r5, [sp, #32]
 800764c:	f04f 33ff 	mov.w	r3, #4294967295
 8007650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007654:	2200      	movs	r2, #0
 8007656:	2312      	movs	r3, #18
 8007658:	e7b0      	b.n	80075bc <_dtoa_r+0x26c>
 800765a:	2301      	movs	r3, #1
 800765c:	9308      	str	r3, [sp, #32]
 800765e:	e7f5      	b.n	800764c <_dtoa_r+0x2fc>
 8007660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007666:	e7b8      	b.n	80075da <_dtoa_r+0x28a>
 8007668:	3101      	adds	r1, #1
 800766a:	6041      	str	r1, [r0, #4]
 800766c:	0052      	lsls	r2, r2, #1
 800766e:	e7b8      	b.n	80075e2 <_dtoa_r+0x292>
 8007670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	2b0e      	cmp	r3, #14
 800767a:	f200 809d 	bhi.w	80077b8 <_dtoa_r+0x468>
 800767e:	2d00      	cmp	r5, #0
 8007680:	f000 809a 	beq.w	80077b8 <_dtoa_r+0x468>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	dd32      	ble.n	80076f0 <_dtoa_r+0x3a0>
 800768a:	4ab7      	ldr	r2, [pc, #732]	; (8007968 <_dtoa_r+0x618>)
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007698:	9b00      	ldr	r3, [sp, #0]
 800769a:	05d8      	lsls	r0, r3, #23
 800769c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80076a0:	d516      	bpl.n	80076d0 <_dtoa_r+0x380>
 80076a2:	4bb2      	ldr	r3, [pc, #712]	; (800796c <_dtoa_r+0x61c>)
 80076a4:	ec51 0b19 	vmov	r0, r1, d9
 80076a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076ac:	f7f9 f8ce 	bl	800084c <__aeabi_ddiv>
 80076b0:	f007 070f 	and.w	r7, r7, #15
 80076b4:	4682      	mov	sl, r0
 80076b6:	468b      	mov	fp, r1
 80076b8:	2503      	movs	r5, #3
 80076ba:	4eac      	ldr	r6, [pc, #688]	; (800796c <_dtoa_r+0x61c>)
 80076bc:	b957      	cbnz	r7, 80076d4 <_dtoa_r+0x384>
 80076be:	4642      	mov	r2, r8
 80076c0:	464b      	mov	r3, r9
 80076c2:	4650      	mov	r0, sl
 80076c4:	4659      	mov	r1, fp
 80076c6:	f7f9 f8c1 	bl	800084c <__aeabi_ddiv>
 80076ca:	4682      	mov	sl, r0
 80076cc:	468b      	mov	fp, r1
 80076ce:	e028      	b.n	8007722 <_dtoa_r+0x3d2>
 80076d0:	2502      	movs	r5, #2
 80076d2:	e7f2      	b.n	80076ba <_dtoa_r+0x36a>
 80076d4:	07f9      	lsls	r1, r7, #31
 80076d6:	d508      	bpl.n	80076ea <_dtoa_r+0x39a>
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076e0:	f7f8 ff8a 	bl	80005f8 <__aeabi_dmul>
 80076e4:	3501      	adds	r5, #1
 80076e6:	4680      	mov	r8, r0
 80076e8:	4689      	mov	r9, r1
 80076ea:	107f      	asrs	r7, r7, #1
 80076ec:	3608      	adds	r6, #8
 80076ee:	e7e5      	b.n	80076bc <_dtoa_r+0x36c>
 80076f0:	f000 809b 	beq.w	800782a <_dtoa_r+0x4da>
 80076f4:	9b00      	ldr	r3, [sp, #0]
 80076f6:	4f9d      	ldr	r7, [pc, #628]	; (800796c <_dtoa_r+0x61c>)
 80076f8:	425e      	negs	r6, r3
 80076fa:	4b9b      	ldr	r3, [pc, #620]	; (8007968 <_dtoa_r+0x618>)
 80076fc:	f006 020f 	and.w	r2, r6, #15
 8007700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	ec51 0b19 	vmov	r0, r1, d9
 800770c:	f7f8 ff74 	bl	80005f8 <__aeabi_dmul>
 8007710:	1136      	asrs	r6, r6, #4
 8007712:	4682      	mov	sl, r0
 8007714:	468b      	mov	fp, r1
 8007716:	2300      	movs	r3, #0
 8007718:	2502      	movs	r5, #2
 800771a:	2e00      	cmp	r6, #0
 800771c:	d17a      	bne.n	8007814 <_dtoa_r+0x4c4>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1d3      	bne.n	80076ca <_dtoa_r+0x37a>
 8007722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8082 	beq.w	800782e <_dtoa_r+0x4de>
 800772a:	4b91      	ldr	r3, [pc, #580]	; (8007970 <_dtoa_r+0x620>)
 800772c:	2200      	movs	r2, #0
 800772e:	4650      	mov	r0, sl
 8007730:	4659      	mov	r1, fp
 8007732:	f7f9 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8007736:	2800      	cmp	r0, #0
 8007738:	d079      	beq.n	800782e <_dtoa_r+0x4de>
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d076      	beq.n	800782e <_dtoa_r+0x4de>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dd36      	ble.n	80077b4 <_dtoa_r+0x464>
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	4650      	mov	r0, sl
 800774a:	4659      	mov	r1, fp
 800774c:	1e5f      	subs	r7, r3, #1
 800774e:	2200      	movs	r2, #0
 8007750:	4b88      	ldr	r3, [pc, #544]	; (8007974 <_dtoa_r+0x624>)
 8007752:	f7f8 ff51 	bl	80005f8 <__aeabi_dmul>
 8007756:	9e02      	ldr	r6, [sp, #8]
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	3501      	adds	r5, #1
 800775e:	4628      	mov	r0, r5
 8007760:	f7f8 fee0 	bl	8000524 <__aeabi_i2d>
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	f7f8 ff46 	bl	80005f8 <__aeabi_dmul>
 800776c:	4b82      	ldr	r3, [pc, #520]	; (8007978 <_dtoa_r+0x628>)
 800776e:	2200      	movs	r2, #0
 8007770:	f7f8 fd8c 	bl	800028c <__adddf3>
 8007774:	46d0      	mov	r8, sl
 8007776:	46d9      	mov	r9, fp
 8007778:	4682      	mov	sl, r0
 800777a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800777e:	2e00      	cmp	r6, #0
 8007780:	d158      	bne.n	8007834 <_dtoa_r+0x4e4>
 8007782:	4b7e      	ldr	r3, [pc, #504]	; (800797c <_dtoa_r+0x62c>)
 8007784:	2200      	movs	r2, #0
 8007786:	4640      	mov	r0, r8
 8007788:	4649      	mov	r1, r9
 800778a:	f7f8 fd7d 	bl	8000288 <__aeabi_dsub>
 800778e:	4652      	mov	r2, sl
 8007790:	465b      	mov	r3, fp
 8007792:	4680      	mov	r8, r0
 8007794:	4689      	mov	r9, r1
 8007796:	f7f9 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800779a:	2800      	cmp	r0, #0
 800779c:	f040 8295 	bne.w	8007cca <_dtoa_r+0x97a>
 80077a0:	4652      	mov	r2, sl
 80077a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f9 f997 	bl	8000adc <__aeabi_dcmplt>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f040 8289 	bne.w	8007cc6 <_dtoa_r+0x976>
 80077b4:	ec5b ab19 	vmov	sl, fp, d9
 80077b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f2c0 8148 	blt.w	8007a50 <_dtoa_r+0x700>
 80077c0:	9a00      	ldr	r2, [sp, #0]
 80077c2:	2a0e      	cmp	r2, #14
 80077c4:	f300 8144 	bgt.w	8007a50 <_dtoa_r+0x700>
 80077c8:	4b67      	ldr	r3, [pc, #412]	; (8007968 <_dtoa_r+0x618>)
 80077ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f280 80d5 	bge.w	8007984 <_dtoa_r+0x634>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f300 80d1 	bgt.w	8007984 <_dtoa_r+0x634>
 80077e2:	f040 826f 	bne.w	8007cc4 <_dtoa_r+0x974>
 80077e6:	4b65      	ldr	r3, [pc, #404]	; (800797c <_dtoa_r+0x62c>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	4640      	mov	r0, r8
 80077ec:	4649      	mov	r1, r9
 80077ee:	f7f8 ff03 	bl	80005f8 <__aeabi_dmul>
 80077f2:	4652      	mov	r2, sl
 80077f4:	465b      	mov	r3, fp
 80077f6:	f7f9 f985 	bl	8000b04 <__aeabi_dcmpge>
 80077fa:	9e03      	ldr	r6, [sp, #12]
 80077fc:	4637      	mov	r7, r6
 80077fe:	2800      	cmp	r0, #0
 8007800:	f040 8245 	bne.w	8007c8e <_dtoa_r+0x93e>
 8007804:	9d01      	ldr	r5, [sp, #4]
 8007806:	2331      	movs	r3, #49	; 0x31
 8007808:	f805 3b01 	strb.w	r3, [r5], #1
 800780c:	9b00      	ldr	r3, [sp, #0]
 800780e:	3301      	adds	r3, #1
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	e240      	b.n	8007c96 <_dtoa_r+0x946>
 8007814:	07f2      	lsls	r2, r6, #31
 8007816:	d505      	bpl.n	8007824 <_dtoa_r+0x4d4>
 8007818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	3501      	adds	r5, #1
 8007822:	2301      	movs	r3, #1
 8007824:	1076      	asrs	r6, r6, #1
 8007826:	3708      	adds	r7, #8
 8007828:	e777      	b.n	800771a <_dtoa_r+0x3ca>
 800782a:	2502      	movs	r5, #2
 800782c:	e779      	b.n	8007722 <_dtoa_r+0x3d2>
 800782e:	9f00      	ldr	r7, [sp, #0]
 8007830:	9e03      	ldr	r6, [sp, #12]
 8007832:	e794      	b.n	800775e <_dtoa_r+0x40e>
 8007834:	9901      	ldr	r1, [sp, #4]
 8007836:	4b4c      	ldr	r3, [pc, #304]	; (8007968 <_dtoa_r+0x618>)
 8007838:	4431      	add	r1, r6
 800783a:	910d      	str	r1, [sp, #52]	; 0x34
 800783c:	9908      	ldr	r1, [sp, #32]
 800783e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007846:	2900      	cmp	r1, #0
 8007848:	d043      	beq.n	80078d2 <_dtoa_r+0x582>
 800784a:	494d      	ldr	r1, [pc, #308]	; (8007980 <_dtoa_r+0x630>)
 800784c:	2000      	movs	r0, #0
 800784e:	f7f8 fffd 	bl	800084c <__aeabi_ddiv>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f8 fd17 	bl	8000288 <__aeabi_dsub>
 800785a:	9d01      	ldr	r5, [sp, #4]
 800785c:	4682      	mov	sl, r0
 800785e:	468b      	mov	fp, r1
 8007860:	4649      	mov	r1, r9
 8007862:	4640      	mov	r0, r8
 8007864:	f7f9 f978 	bl	8000b58 <__aeabi_d2iz>
 8007868:	4606      	mov	r6, r0
 800786a:	f7f8 fe5b 	bl	8000524 <__aeabi_i2d>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fd07 	bl	8000288 <__aeabi_dsub>
 800787a:	3630      	adds	r6, #48	; 0x30
 800787c:	f805 6b01 	strb.w	r6, [r5], #1
 8007880:	4652      	mov	r2, sl
 8007882:	465b      	mov	r3, fp
 8007884:	4680      	mov	r8, r0
 8007886:	4689      	mov	r9, r1
 8007888:	f7f9 f928 	bl	8000adc <__aeabi_dcmplt>
 800788c:	2800      	cmp	r0, #0
 800788e:	d163      	bne.n	8007958 <_dtoa_r+0x608>
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	4936      	ldr	r1, [pc, #216]	; (8007970 <_dtoa_r+0x620>)
 8007896:	2000      	movs	r0, #0
 8007898:	f7f8 fcf6 	bl	8000288 <__aeabi_dsub>
 800789c:	4652      	mov	r2, sl
 800789e:	465b      	mov	r3, fp
 80078a0:	f7f9 f91c 	bl	8000adc <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f040 80b5 	bne.w	8007a14 <_dtoa_r+0x6c4>
 80078aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ac:	429d      	cmp	r5, r3
 80078ae:	d081      	beq.n	80077b4 <_dtoa_r+0x464>
 80078b0:	4b30      	ldr	r3, [pc, #192]	; (8007974 <_dtoa_r+0x624>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	4650      	mov	r0, sl
 80078b6:	4659      	mov	r1, fp
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <_dtoa_r+0x624>)
 80078be:	4682      	mov	sl, r0
 80078c0:	468b      	mov	fp, r1
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	2200      	movs	r2, #0
 80078c8:	f7f8 fe96 	bl	80005f8 <__aeabi_dmul>
 80078cc:	4680      	mov	r8, r0
 80078ce:	4689      	mov	r9, r1
 80078d0:	e7c6      	b.n	8007860 <_dtoa_r+0x510>
 80078d2:	4650      	mov	r0, sl
 80078d4:	4659      	mov	r1, fp
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078dc:	9d01      	ldr	r5, [sp, #4]
 80078de:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e0:	4682      	mov	sl, r0
 80078e2:	468b      	mov	fp, r1
 80078e4:	4649      	mov	r1, r9
 80078e6:	4640      	mov	r0, r8
 80078e8:	f7f9 f936 	bl	8000b58 <__aeabi_d2iz>
 80078ec:	4606      	mov	r6, r0
 80078ee:	f7f8 fe19 	bl	8000524 <__aeabi_i2d>
 80078f2:	3630      	adds	r6, #48	; 0x30
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4640      	mov	r0, r8
 80078fa:	4649      	mov	r1, r9
 80078fc:	f7f8 fcc4 	bl	8000288 <__aeabi_dsub>
 8007900:	f805 6b01 	strb.w	r6, [r5], #1
 8007904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007906:	429d      	cmp	r5, r3
 8007908:	4680      	mov	r8, r0
 800790a:	4689      	mov	r9, r1
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	d124      	bne.n	800795c <_dtoa_r+0x60c>
 8007912:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <_dtoa_r+0x630>)
 8007914:	4650      	mov	r0, sl
 8007916:	4659      	mov	r1, fp
 8007918:	f7f8 fcb8 	bl	800028c <__adddf3>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4640      	mov	r0, r8
 8007922:	4649      	mov	r1, r9
 8007924:	f7f9 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 8007928:	2800      	cmp	r0, #0
 800792a:	d173      	bne.n	8007a14 <_dtoa_r+0x6c4>
 800792c:	4652      	mov	r2, sl
 800792e:	465b      	mov	r3, fp
 8007930:	4913      	ldr	r1, [pc, #76]	; (8007980 <_dtoa_r+0x630>)
 8007932:	2000      	movs	r0, #0
 8007934:	f7f8 fca8 	bl	8000288 <__aeabi_dsub>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f af35 	beq.w	80077b4 <_dtoa_r+0x464>
 800794a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800794c:	1e6b      	subs	r3, r5, #1
 800794e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007954:	2b30      	cmp	r3, #48	; 0x30
 8007956:	d0f8      	beq.n	800794a <_dtoa_r+0x5fa>
 8007958:	9700      	str	r7, [sp, #0]
 800795a:	e049      	b.n	80079f0 <_dtoa_r+0x6a0>
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <_dtoa_r+0x624>)
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	4680      	mov	r8, r0
 8007964:	4689      	mov	r9, r1
 8007966:	e7bd      	b.n	80078e4 <_dtoa_r+0x594>
 8007968:	0800a4d8 	.word	0x0800a4d8
 800796c:	0800a4b0 	.word	0x0800a4b0
 8007970:	3ff00000 	.word	0x3ff00000
 8007974:	40240000 	.word	0x40240000
 8007978:	401c0000 	.word	0x401c0000
 800797c:	40140000 	.word	0x40140000
 8007980:	3fe00000 	.word	0x3fe00000
 8007984:	9d01      	ldr	r5, [sp, #4]
 8007986:	4656      	mov	r6, sl
 8007988:	465f      	mov	r7, fp
 800798a:	4642      	mov	r2, r8
 800798c:	464b      	mov	r3, r9
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 ff5b 	bl	800084c <__aeabi_ddiv>
 8007996:	f7f9 f8df 	bl	8000b58 <__aeabi_d2iz>
 800799a:	4682      	mov	sl, r0
 800799c:	f7f8 fdc2 	bl	8000524 <__aeabi_i2d>
 80079a0:	4642      	mov	r2, r8
 80079a2:	464b      	mov	r3, r9
 80079a4:	f7f8 fe28 	bl	80005f8 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	f805 6b01 	strb.w	r6, [r5], #1
 80079bc:	9e01      	ldr	r6, [sp, #4]
 80079be:	9f03      	ldr	r7, [sp, #12]
 80079c0:	1bae      	subs	r6, r5, r6
 80079c2:	42b7      	cmp	r7, r6
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	d135      	bne.n	8007a36 <_dtoa_r+0x6e6>
 80079ca:	f7f8 fc5f 	bl	800028c <__adddf3>
 80079ce:	4642      	mov	r2, r8
 80079d0:	464b      	mov	r3, r9
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	f7f9 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 80079da:	b9d0      	cbnz	r0, 8007a12 <_dtoa_r+0x6c2>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	4630      	mov	r0, r6
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f9 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e8:	b110      	cbz	r0, 80079f0 <_dtoa_r+0x6a0>
 80079ea:	f01a 0f01 	tst.w	sl, #1
 80079ee:	d110      	bne.n	8007a12 <_dtoa_r+0x6c2>
 80079f0:	4620      	mov	r0, r4
 80079f2:	ee18 1a10 	vmov	r1, s16
 80079f6:	f000 ff6d 	bl	80088d4 <_Bfree>
 80079fa:	2300      	movs	r3, #0
 80079fc:	9800      	ldr	r0, [sp, #0]
 80079fe:	702b      	strb	r3, [r5, #0]
 8007a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a02:	3001      	adds	r0, #1
 8007a04:	6018      	str	r0, [r3, #0]
 8007a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f43f acf1 	beq.w	80073f0 <_dtoa_r+0xa0>
 8007a0e:	601d      	str	r5, [r3, #0]
 8007a10:	e4ee      	b.n	80073f0 <_dtoa_r+0xa0>
 8007a12:	9f00      	ldr	r7, [sp, #0]
 8007a14:	462b      	mov	r3, r5
 8007a16:	461d      	mov	r5, r3
 8007a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a1c:	2a39      	cmp	r2, #57	; 0x39
 8007a1e:	d106      	bne.n	8007a2e <_dtoa_r+0x6de>
 8007a20:	9a01      	ldr	r2, [sp, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d1f7      	bne.n	8007a16 <_dtoa_r+0x6c6>
 8007a26:	9901      	ldr	r1, [sp, #4]
 8007a28:	2230      	movs	r2, #48	; 0x30
 8007a2a:	3701      	adds	r7, #1
 8007a2c:	700a      	strb	r2, [r1, #0]
 8007a2e:	781a      	ldrb	r2, [r3, #0]
 8007a30:	3201      	adds	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e790      	b.n	8007958 <_dtoa_r+0x608>
 8007a36:	4ba6      	ldr	r3, [pc, #664]	; (8007cd0 <_dtoa_r+0x980>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	f7f9 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d09d      	beq.n	800798a <_dtoa_r+0x63a>
 8007a4e:	e7cf      	b.n	80079f0 <_dtoa_r+0x6a0>
 8007a50:	9a08      	ldr	r2, [sp, #32]
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	f000 80d7 	beq.w	8007c06 <_dtoa_r+0x8b6>
 8007a58:	9a06      	ldr	r2, [sp, #24]
 8007a5a:	2a01      	cmp	r2, #1
 8007a5c:	f300 80ba 	bgt.w	8007bd4 <_dtoa_r+0x884>
 8007a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	f000 80b2 	beq.w	8007bcc <_dtoa_r+0x87c>
 8007a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a6c:	9e07      	ldr	r6, [sp, #28]
 8007a6e:	9d04      	ldr	r5, [sp, #16]
 8007a70:	9a04      	ldr	r2, [sp, #16]
 8007a72:	441a      	add	r2, r3
 8007a74:	9204      	str	r2, [sp, #16]
 8007a76:	9a05      	ldr	r2, [sp, #20]
 8007a78:	2101      	movs	r1, #1
 8007a7a:	441a      	add	r2, r3
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	9205      	str	r2, [sp, #20]
 8007a80:	f001 f82a 	bl	8008ad8 <__i2b>
 8007a84:	4607      	mov	r7, r0
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	dd0c      	ble.n	8007aa4 <_dtoa_r+0x754>
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dd09      	ble.n	8007aa4 <_dtoa_r+0x754>
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	9a04      	ldr	r2, [sp, #16]
 8007a94:	bfa8      	it	ge
 8007a96:	462b      	movge	r3, r5
 8007a98:	1ad2      	subs	r2, r2, r3
 8007a9a:	9204      	str	r2, [sp, #16]
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	1aed      	subs	r5, r5, r3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	b31b      	cbz	r3, 8007af0 <_dtoa_r+0x7a0>
 8007aa8:	9b08      	ldr	r3, [sp, #32]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80af 	beq.w	8007c0e <_dtoa_r+0x8be>
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	dd13      	ble.n	8007adc <_dtoa_r+0x78c>
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4632      	mov	r2, r6
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f001 f8cd 	bl	8008c58 <__pow5mult>
 8007abe:	ee18 2a10 	vmov	r2, s16
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f001 f81c 	bl	8008b04 <__multiply>
 8007acc:	ee18 1a10 	vmov	r1, s16
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 fefe 	bl	80088d4 <_Bfree>
 8007ad8:	ee08 8a10 	vmov	s16, r8
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	1b9a      	subs	r2, r3, r6
 8007ae0:	d006      	beq.n	8007af0 <_dtoa_r+0x7a0>
 8007ae2:	ee18 1a10 	vmov	r1, s16
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f001 f8b6 	bl	8008c58 <__pow5mult>
 8007aec:	ee08 0a10 	vmov	s16, r0
 8007af0:	2101      	movs	r1, #1
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fff0 	bl	8008ad8 <__i2b>
 8007af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	4606      	mov	r6, r0
 8007afe:	f340 8088 	ble.w	8007c12 <_dtoa_r+0x8c2>
 8007b02:	461a      	mov	r2, r3
 8007b04:	4601      	mov	r1, r0
 8007b06:	4620      	mov	r0, r4
 8007b08:	f001 f8a6 	bl	8008c58 <__pow5mult>
 8007b0c:	9b06      	ldr	r3, [sp, #24]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	4606      	mov	r6, r0
 8007b12:	f340 8081 	ble.w	8007c18 <_dtoa_r+0x8c8>
 8007b16:	f04f 0800 	mov.w	r8, #0
 8007b1a:	6933      	ldr	r3, [r6, #16]
 8007b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b20:	6918      	ldr	r0, [r3, #16]
 8007b22:	f000 ff89 	bl	8008a38 <__hi0bits>
 8007b26:	f1c0 0020 	rsb	r0, r0, #32
 8007b2a:	9b05      	ldr	r3, [sp, #20]
 8007b2c:	4418      	add	r0, r3
 8007b2e:	f010 001f 	ands.w	r0, r0, #31
 8007b32:	f000 8092 	beq.w	8007c5a <_dtoa_r+0x90a>
 8007b36:	f1c0 0320 	rsb	r3, r0, #32
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	f340 808a 	ble.w	8007c54 <_dtoa_r+0x904>
 8007b40:	f1c0 001c 	rsb	r0, r0, #28
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	4403      	add	r3, r0
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	9b05      	ldr	r3, [sp, #20]
 8007b4c:	4403      	add	r3, r0
 8007b4e:	4405      	add	r5, r0
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd07      	ble.n	8007b68 <_dtoa_r+0x818>
 8007b58:	ee18 1a10 	vmov	r1, s16
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f001 f8d4 	bl	8008d0c <__lshift>
 8007b64:	ee08 0a10 	vmov	s16, r0
 8007b68:	9b05      	ldr	r3, [sp, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x82a>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	461a      	mov	r2, r3
 8007b72:	4620      	mov	r0, r4
 8007b74:	f001 f8ca 	bl	8008d0c <__lshift>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d06e      	beq.n	8007c5e <_dtoa_r+0x90e>
 8007b80:	ee18 0a10 	vmov	r0, s16
 8007b84:	4631      	mov	r1, r6
 8007b86:	f001 f931 	bl	8008dec <__mcmp>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	da67      	bge.n	8007c5e <_dtoa_r+0x90e>
 8007b8e:	9b00      	ldr	r3, [sp, #0]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	ee18 1a10 	vmov	r1, s16
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	220a      	movs	r2, #10
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 febb 	bl	8008918 <__multadd>
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	ee08 0a10 	vmov	s16, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 81b1 	beq.w	8007f10 <_dtoa_r+0xbc0>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	220a      	movs	r2, #10
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f000 feaf 	bl	8008918 <__multadd>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	4607      	mov	r7, r0
 8007bc0:	f300 808e 	bgt.w	8007ce0 <_dtoa_r+0x990>
 8007bc4:	9b06      	ldr	r3, [sp, #24]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	dc51      	bgt.n	8007c6e <_dtoa_r+0x91e>
 8007bca:	e089      	b.n	8007ce0 <_dtoa_r+0x990>
 8007bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bd2:	e74b      	b.n	8007a6c <_dtoa_r+0x71c>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	1e5e      	subs	r6, r3, #1
 8007bd8:	9b07      	ldr	r3, [sp, #28]
 8007bda:	42b3      	cmp	r3, r6
 8007bdc:	bfbf      	itttt	lt
 8007bde:	9b07      	ldrlt	r3, [sp, #28]
 8007be0:	9607      	strlt	r6, [sp, #28]
 8007be2:	1af2      	sublt	r2, r6, r3
 8007be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007be6:	bfb6      	itet	lt
 8007be8:	189b      	addlt	r3, r3, r2
 8007bea:	1b9e      	subge	r6, r3, r6
 8007bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	bfb8      	it	lt
 8007bf2:	2600      	movlt	r6, #0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bfb7      	itett	lt
 8007bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c00:	1a9d      	sublt	r5, r3, r2
 8007c02:	2300      	movlt	r3, #0
 8007c04:	e734      	b.n	8007a70 <_dtoa_r+0x720>
 8007c06:	9e07      	ldr	r6, [sp, #28]
 8007c08:	9d04      	ldr	r5, [sp, #16]
 8007c0a:	9f08      	ldr	r7, [sp, #32]
 8007c0c:	e73b      	b.n	8007a86 <_dtoa_r+0x736>
 8007c0e:	9a07      	ldr	r2, [sp, #28]
 8007c10:	e767      	b.n	8007ae2 <_dtoa_r+0x792>
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	dc18      	bgt.n	8007c4a <_dtoa_r+0x8fa>
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	d115      	bne.n	8007c4a <_dtoa_r+0x8fa>
 8007c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c22:	b993      	cbnz	r3, 8007c4a <_dtoa_r+0x8fa>
 8007c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c28:	0d1b      	lsrs	r3, r3, #20
 8007c2a:	051b      	lsls	r3, r3, #20
 8007c2c:	b183      	cbz	r3, 8007c50 <_dtoa_r+0x900>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	3301      	adds	r3, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	9b05      	ldr	r3, [sp, #20]
 8007c36:	3301      	adds	r3, #1
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	f04f 0801 	mov.w	r8, #1
 8007c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f af6a 	bne.w	8007b1a <_dtoa_r+0x7ca>
 8007c46:	2001      	movs	r0, #1
 8007c48:	e76f      	b.n	8007b2a <_dtoa_r+0x7da>
 8007c4a:	f04f 0800 	mov.w	r8, #0
 8007c4e:	e7f6      	b.n	8007c3e <_dtoa_r+0x8ee>
 8007c50:	4698      	mov	r8, r3
 8007c52:	e7f4      	b.n	8007c3e <_dtoa_r+0x8ee>
 8007c54:	f43f af7d 	beq.w	8007b52 <_dtoa_r+0x802>
 8007c58:	4618      	mov	r0, r3
 8007c5a:	301c      	adds	r0, #28
 8007c5c:	e772      	b.n	8007b44 <_dtoa_r+0x7f4>
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dc37      	bgt.n	8007cd4 <_dtoa_r+0x984>
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	dd34      	ble.n	8007cd4 <_dtoa_r+0x984>
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	9b02      	ldr	r3, [sp, #8]
 8007c70:	b96b      	cbnz	r3, 8007c8e <_dtoa_r+0x93e>
 8007c72:	4631      	mov	r1, r6
 8007c74:	2205      	movs	r2, #5
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fe4e 	bl	8008918 <__multadd>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4606      	mov	r6, r0
 8007c80:	ee18 0a10 	vmov	r0, s16
 8007c84:	f001 f8b2 	bl	8008dec <__mcmp>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f73f adbb 	bgt.w	8007804 <_dtoa_r+0x4b4>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	9d01      	ldr	r5, [sp, #4]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fe19 	bl	80088d4 <_Bfree>
 8007ca2:	2f00      	cmp	r7, #0
 8007ca4:	f43f aea4 	beq.w	80079f0 <_dtoa_r+0x6a0>
 8007ca8:	f1b8 0f00 	cmp.w	r8, #0
 8007cac:	d005      	beq.n	8007cba <_dtoa_r+0x96a>
 8007cae:	45b8      	cmp	r8, r7
 8007cb0:	d003      	beq.n	8007cba <_dtoa_r+0x96a>
 8007cb2:	4641      	mov	r1, r8
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 fe0d 	bl	80088d4 <_Bfree>
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fe09 	bl	80088d4 <_Bfree>
 8007cc2:	e695      	b.n	80079f0 <_dtoa_r+0x6a0>
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	4637      	mov	r7, r6
 8007cc8:	e7e1      	b.n	8007c8e <_dtoa_r+0x93e>
 8007cca:	9700      	str	r7, [sp, #0]
 8007ccc:	4637      	mov	r7, r6
 8007cce:	e599      	b.n	8007804 <_dtoa_r+0x4b4>
 8007cd0:	40240000 	.word	0x40240000
 8007cd4:	9b08      	ldr	r3, [sp, #32]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80ca 	beq.w	8007e70 <_dtoa_r+0xb20>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	dd05      	ble.n	8007cf0 <_dtoa_r+0x9a0>
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	462a      	mov	r2, r5
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f001 f80f 	bl	8008d0c <__lshift>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	f1b8 0f00 	cmp.w	r8, #0
 8007cf4:	d05b      	beq.n	8007dae <_dtoa_r+0xa5e>
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fdab 	bl	8008854 <_Balloc>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b928      	cbnz	r0, 8007d0e <_dtoa_r+0x9be>
 8007d02:	4b87      	ldr	r3, [pc, #540]	; (8007f20 <_dtoa_r+0xbd0>)
 8007d04:	4602      	mov	r2, r0
 8007d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d0a:	f7ff bb3b 	b.w	8007384 <_dtoa_r+0x34>
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	3202      	adds	r2, #2
 8007d12:	0092      	lsls	r2, r2, #2
 8007d14:	f107 010c 	add.w	r1, r7, #12
 8007d18:	300c      	adds	r0, #12
 8007d1a:	f000 fd8d 	bl	8008838 <memcpy>
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4629      	mov	r1, r5
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 fff2 	bl	8008d0c <__lshift>
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	f103 0901 	add.w	r9, r3, #1
 8007d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	f00a 0301 	and.w	r3, sl, #1
 8007d3a:	46b8      	mov	r8, r7
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	4607      	mov	r7, r0
 8007d40:	4631      	mov	r1, r6
 8007d42:	ee18 0a10 	vmov	r0, s16
 8007d46:	f7ff fa77 	bl	8007238 <quorem>
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d52:	ee18 0a10 	vmov	r0, s16
 8007d56:	f001 f849 	bl	8008dec <__mcmp>
 8007d5a:	463a      	mov	r2, r7
 8007d5c:	9003      	str	r0, [sp, #12]
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4620      	mov	r0, r4
 8007d62:	f001 f85f 	bl	8008e24 <__mdiff>
 8007d66:	68c2      	ldr	r2, [r0, #12]
 8007d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	bb02      	cbnz	r2, 8007db2 <_dtoa_r+0xa62>
 8007d70:	4601      	mov	r1, r0
 8007d72:	ee18 0a10 	vmov	r0, s16
 8007d76:	f001 f839 	bl	8008dec <__mcmp>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4620      	mov	r0, r4
 8007d80:	9207      	str	r2, [sp, #28]
 8007d82:	f000 fda7 	bl	80088d4 <_Bfree>
 8007d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d8a:	ea43 0102 	orr.w	r1, r3, r2
 8007d8e:	9b04      	ldr	r3, [sp, #16]
 8007d90:	430b      	orrs	r3, r1
 8007d92:	464d      	mov	r5, r9
 8007d94:	d10f      	bne.n	8007db6 <_dtoa_r+0xa66>
 8007d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d9a:	d02a      	beq.n	8007df2 <_dtoa_r+0xaa2>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd02      	ble.n	8007da8 <_dtoa_r+0xa58>
 8007da2:	9b02      	ldr	r3, [sp, #8]
 8007da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007da8:	f88b a000 	strb.w	sl, [fp]
 8007dac:	e775      	b.n	8007c9a <_dtoa_r+0x94a>
 8007dae:	4638      	mov	r0, r7
 8007db0:	e7ba      	b.n	8007d28 <_dtoa_r+0x9d8>
 8007db2:	2201      	movs	r2, #1
 8007db4:	e7e2      	b.n	8007d7c <_dtoa_r+0xa2c>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	db04      	blt.n	8007dc6 <_dtoa_r+0xa76>
 8007dbc:	9906      	ldr	r1, [sp, #24]
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	9904      	ldr	r1, [sp, #16]
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	d122      	bne.n	8007e0c <_dtoa_r+0xabc>
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	ddee      	ble.n	8007da8 <_dtoa_r+0xa58>
 8007dca:	ee18 1a10 	vmov	r1, s16
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 ff9b 	bl	8008d0c <__lshift>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	ee08 0a10 	vmov	s16, r0
 8007ddc:	f001 f806 	bl	8008dec <__mcmp>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dc03      	bgt.n	8007dec <_dtoa_r+0xa9c>
 8007de4:	d1e0      	bne.n	8007da8 <_dtoa_r+0xa58>
 8007de6:	f01a 0f01 	tst.w	sl, #1
 8007dea:	d0dd      	beq.n	8007da8 <_dtoa_r+0xa58>
 8007dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007df0:	d1d7      	bne.n	8007da2 <_dtoa_r+0xa52>
 8007df2:	2339      	movs	r3, #57	; 0x39
 8007df4:	f88b 3000 	strb.w	r3, [fp]
 8007df8:	462b      	mov	r3, r5
 8007dfa:	461d      	mov	r5, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e02:	2a39      	cmp	r2, #57	; 0x39
 8007e04:	d071      	beq.n	8007eea <_dtoa_r+0xb9a>
 8007e06:	3201      	adds	r2, #1
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e746      	b.n	8007c9a <_dtoa_r+0x94a>
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	dd07      	ble.n	8007e20 <_dtoa_r+0xad0>
 8007e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e14:	d0ed      	beq.n	8007df2 <_dtoa_r+0xaa2>
 8007e16:	f10a 0301 	add.w	r3, sl, #1
 8007e1a:	f88b 3000 	strb.w	r3, [fp]
 8007e1e:	e73c      	b.n	8007c9a <_dtoa_r+0x94a>
 8007e20:	9b05      	ldr	r3, [sp, #20]
 8007e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e26:	4599      	cmp	r9, r3
 8007e28:	d047      	beq.n	8007eba <_dtoa_r+0xb6a>
 8007e2a:	ee18 1a10 	vmov	r1, s16
 8007e2e:	2300      	movs	r3, #0
 8007e30:	220a      	movs	r2, #10
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fd70 	bl	8008918 <__multadd>
 8007e38:	45b8      	cmp	r8, r7
 8007e3a:	ee08 0a10 	vmov	s16, r0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	f04f 020a 	mov.w	r2, #10
 8007e46:	4641      	mov	r1, r8
 8007e48:	4620      	mov	r0, r4
 8007e4a:	d106      	bne.n	8007e5a <_dtoa_r+0xb0a>
 8007e4c:	f000 fd64 	bl	8008918 <__multadd>
 8007e50:	4680      	mov	r8, r0
 8007e52:	4607      	mov	r7, r0
 8007e54:	f109 0901 	add.w	r9, r9, #1
 8007e58:	e772      	b.n	8007d40 <_dtoa_r+0x9f0>
 8007e5a:	f000 fd5d 	bl	8008918 <__multadd>
 8007e5e:	4639      	mov	r1, r7
 8007e60:	4680      	mov	r8, r0
 8007e62:	2300      	movs	r3, #0
 8007e64:	220a      	movs	r2, #10
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 fd56 	bl	8008918 <__multadd>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	e7f1      	b.n	8007e54 <_dtoa_r+0xb04>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	9302      	str	r3, [sp, #8]
 8007e74:	9d01      	ldr	r5, [sp, #4]
 8007e76:	ee18 0a10 	vmov	r0, s16
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	f7ff f9dc 	bl	8007238 <quorem>
 8007e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	f805 ab01 	strb.w	sl, [r5], #1
 8007e8a:	1aea      	subs	r2, r5, r3
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	dd09      	ble.n	8007ea6 <_dtoa_r+0xb56>
 8007e92:	ee18 1a10 	vmov	r1, s16
 8007e96:	2300      	movs	r3, #0
 8007e98:	220a      	movs	r2, #10
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fd3c 	bl	8008918 <__multadd>
 8007ea0:	ee08 0a10 	vmov	s16, r0
 8007ea4:	e7e7      	b.n	8007e76 <_dtoa_r+0xb26>
 8007ea6:	9b02      	ldr	r3, [sp, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	bfc8      	it	gt
 8007eac:	461d      	movgt	r5, r3
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	bfd8      	it	le
 8007eb2:	2501      	movle	r5, #1
 8007eb4:	441d      	add	r5, r3
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	ee18 1a10 	vmov	r1, s16
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 ff23 	bl	8008d0c <__lshift>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	ee08 0a10 	vmov	s16, r0
 8007ecc:	f000 ff8e 	bl	8008dec <__mcmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dc91      	bgt.n	8007df8 <_dtoa_r+0xaa8>
 8007ed4:	d102      	bne.n	8007edc <_dtoa_r+0xb8c>
 8007ed6:	f01a 0f01 	tst.w	sl, #1
 8007eda:	d18d      	bne.n	8007df8 <_dtoa_r+0xaa8>
 8007edc:	462b      	mov	r3, r5
 8007ede:	461d      	mov	r5, r3
 8007ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee4:	2a30      	cmp	r2, #48	; 0x30
 8007ee6:	d0fa      	beq.n	8007ede <_dtoa_r+0xb8e>
 8007ee8:	e6d7      	b.n	8007c9a <_dtoa_r+0x94a>
 8007eea:	9a01      	ldr	r2, [sp, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d184      	bne.n	8007dfa <_dtoa_r+0xaaa>
 8007ef0:	9b00      	ldr	r3, [sp, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	2331      	movs	r3, #49	; 0x31
 8007ef8:	7013      	strb	r3, [r2, #0]
 8007efa:	e6ce      	b.n	8007c9a <_dtoa_r+0x94a>
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_dtoa_r+0xbd4>)
 8007efe:	f7ff ba95 	b.w	800742c <_dtoa_r+0xdc>
 8007f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f47f aa6e 	bne.w	80073e6 <_dtoa_r+0x96>
 8007f0a:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <_dtoa_r+0xbd8>)
 8007f0c:	f7ff ba8e 	b.w	800742c <_dtoa_r+0xdc>
 8007f10:	9b02      	ldr	r3, [sp, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dcae      	bgt.n	8007e74 <_dtoa_r+0xb24>
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	f73f aea8 	bgt.w	8007c6e <_dtoa_r+0x91e>
 8007f1e:	e7a9      	b.n	8007e74 <_dtoa_r+0xb24>
 8007f20:	0800a360 	.word	0x0800a360
 8007f24:	0800a160 	.word	0x0800a160
 8007f28:	0800a2e1 	.word	0x0800a2e1

08007f2c <std>:
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	b510      	push	{r4, lr}
 8007f30:	4604      	mov	r4, r0
 8007f32:	e9c0 3300 	strd	r3, r3, [r0]
 8007f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f3a:	6083      	str	r3, [r0, #8]
 8007f3c:	8181      	strh	r1, [r0, #12]
 8007f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f40:	81c2      	strh	r2, [r0, #14]
 8007f42:	6183      	str	r3, [r0, #24]
 8007f44:	4619      	mov	r1, r3
 8007f46:	2208      	movs	r2, #8
 8007f48:	305c      	adds	r0, #92	; 0x5c
 8007f4a:	f7fd fc09 	bl	8005760 <memset>
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <std+0x38>)
 8007f50:	6263      	str	r3, [r4, #36]	; 0x24
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <std+0x3c>)
 8007f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f56:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <std+0x40>)
 8007f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f5a:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <std+0x44>)
 8007f5c:	6224      	str	r4, [r4, #32]
 8007f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	08009961 	.word	0x08009961
 8007f68:	08009983 	.word	0x08009983
 8007f6c:	080099bb 	.word	0x080099bb
 8007f70:	080099df 	.word	0x080099df

08007f74 <_cleanup_r>:
 8007f74:	4901      	ldr	r1, [pc, #4]	; (8007f7c <_cleanup_r+0x8>)
 8007f76:	f000 b8af 	b.w	80080d8 <_fwalk_reent>
 8007f7a:	bf00      	nop
 8007f7c:	08009d39 	.word	0x08009d39

08007f80 <__sfmoreglue>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	2268      	movs	r2, #104	; 0x68
 8007f84:	1e4d      	subs	r5, r1, #1
 8007f86:	4355      	muls	r5, r2
 8007f88:	460e      	mov	r6, r1
 8007f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f8e:	f001 f9a5 	bl	80092dc <_malloc_r>
 8007f92:	4604      	mov	r4, r0
 8007f94:	b140      	cbz	r0, 8007fa8 <__sfmoreglue+0x28>
 8007f96:	2100      	movs	r1, #0
 8007f98:	e9c0 1600 	strd	r1, r6, [r0]
 8007f9c:	300c      	adds	r0, #12
 8007f9e:	60a0      	str	r0, [r4, #8]
 8007fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fa4:	f7fd fbdc 	bl	8005760 <memset>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	bd70      	pop	{r4, r5, r6, pc}

08007fac <__sfp_lock_acquire>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__sfp_lock_acquire+0x8>)
 8007fae:	f000 bc26 	b.w	80087fe <__retarget_lock_acquire_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	2000031d 	.word	0x2000031d

08007fb8 <__sfp_lock_release>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__sfp_lock_release+0x8>)
 8007fba:	f000 bc21 	b.w	8008800 <__retarget_lock_release_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	2000031d 	.word	0x2000031d

08007fc4 <__sinit_lock_acquire>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__sinit_lock_acquire+0x8>)
 8007fc6:	f000 bc1a 	b.w	80087fe <__retarget_lock_acquire_recursive>
 8007fca:	bf00      	nop
 8007fcc:	2000031e 	.word	0x2000031e

08007fd0 <__sinit_lock_release>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sinit_lock_release+0x8>)
 8007fd2:	f000 bc15 	b.w	8008800 <__retarget_lock_release_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	2000031e 	.word	0x2000031e

08007fdc <__sinit>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4604      	mov	r4, r0
 8007fe0:	f7ff fff0 	bl	8007fc4 <__sinit_lock_acquire>
 8007fe4:	69a3      	ldr	r3, [r4, #24]
 8007fe6:	b11b      	cbz	r3, 8007ff0 <__sinit+0x14>
 8007fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fec:	f7ff bff0 	b.w	8007fd0 <__sinit_lock_release>
 8007ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <__sinit+0x68>)
 8007ff8:	4a13      	ldr	r2, [pc, #76]	; (8008048 <__sinit+0x6c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	bf04      	itt	eq
 8008002:	2301      	moveq	r3, #1
 8008004:	61a3      	streq	r3, [r4, #24]
 8008006:	4620      	mov	r0, r4
 8008008:	f000 f820 	bl	800804c <__sfp>
 800800c:	6060      	str	r0, [r4, #4]
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f81c 	bl	800804c <__sfp>
 8008014:	60a0      	str	r0, [r4, #8]
 8008016:	4620      	mov	r0, r4
 8008018:	f000 f818 	bl	800804c <__sfp>
 800801c:	2200      	movs	r2, #0
 800801e:	60e0      	str	r0, [r4, #12]
 8008020:	2104      	movs	r1, #4
 8008022:	6860      	ldr	r0, [r4, #4]
 8008024:	f7ff ff82 	bl	8007f2c <std>
 8008028:	68a0      	ldr	r0, [r4, #8]
 800802a:	2201      	movs	r2, #1
 800802c:	2109      	movs	r1, #9
 800802e:	f7ff ff7d 	bl	8007f2c <std>
 8008032:	68e0      	ldr	r0, [r4, #12]
 8008034:	2202      	movs	r2, #2
 8008036:	2112      	movs	r1, #18
 8008038:	f7ff ff78 	bl	8007f2c <std>
 800803c:	2301      	movs	r3, #1
 800803e:	61a3      	str	r3, [r4, #24]
 8008040:	e7d2      	b.n	8007fe8 <__sinit+0xc>
 8008042:	bf00      	nop
 8008044:	0800a14c 	.word	0x0800a14c
 8008048:	08007f75 	.word	0x08007f75

0800804c <__sfp>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	4607      	mov	r7, r0
 8008050:	f7ff ffac 	bl	8007fac <__sfp_lock_acquire>
 8008054:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <__sfp+0x84>)
 8008056:	681e      	ldr	r6, [r3, #0]
 8008058:	69b3      	ldr	r3, [r6, #24]
 800805a:	b913      	cbnz	r3, 8008062 <__sfp+0x16>
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff ffbd 	bl	8007fdc <__sinit>
 8008062:	3648      	adds	r6, #72	; 0x48
 8008064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008068:	3b01      	subs	r3, #1
 800806a:	d503      	bpl.n	8008074 <__sfp+0x28>
 800806c:	6833      	ldr	r3, [r6, #0]
 800806e:	b30b      	cbz	r3, 80080b4 <__sfp+0x68>
 8008070:	6836      	ldr	r6, [r6, #0]
 8008072:	e7f7      	b.n	8008064 <__sfp+0x18>
 8008074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008078:	b9d5      	cbnz	r5, 80080b0 <__sfp+0x64>
 800807a:	4b16      	ldr	r3, [pc, #88]	; (80080d4 <__sfp+0x88>)
 800807c:	60e3      	str	r3, [r4, #12]
 800807e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008082:	6665      	str	r5, [r4, #100]	; 0x64
 8008084:	f000 fbba 	bl	80087fc <__retarget_lock_init_recursive>
 8008088:	f7ff ff96 	bl	8007fb8 <__sfp_lock_release>
 800808c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008094:	6025      	str	r5, [r4, #0]
 8008096:	61a5      	str	r5, [r4, #24]
 8008098:	2208      	movs	r2, #8
 800809a:	4629      	mov	r1, r5
 800809c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080a0:	f7fd fb5e 	bl	8005760 <memset>
 80080a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080ac:	4620      	mov	r0, r4
 80080ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b0:	3468      	adds	r4, #104	; 0x68
 80080b2:	e7d9      	b.n	8008068 <__sfp+0x1c>
 80080b4:	2104      	movs	r1, #4
 80080b6:	4638      	mov	r0, r7
 80080b8:	f7ff ff62 	bl	8007f80 <__sfmoreglue>
 80080bc:	4604      	mov	r4, r0
 80080be:	6030      	str	r0, [r6, #0]
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d1d5      	bne.n	8008070 <__sfp+0x24>
 80080c4:	f7ff ff78 	bl	8007fb8 <__sfp_lock_release>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	e7ee      	b.n	80080ac <__sfp+0x60>
 80080ce:	bf00      	nop
 80080d0:	0800a14c 	.word	0x0800a14c
 80080d4:	ffff0001 	.word	0xffff0001

080080d8 <_fwalk_reent>:
 80080d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080dc:	4606      	mov	r6, r0
 80080de:	4688      	mov	r8, r1
 80080e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080e4:	2700      	movs	r7, #0
 80080e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080ea:	f1b9 0901 	subs.w	r9, r9, #1
 80080ee:	d505      	bpl.n	80080fc <_fwalk_reent+0x24>
 80080f0:	6824      	ldr	r4, [r4, #0]
 80080f2:	2c00      	cmp	r4, #0
 80080f4:	d1f7      	bne.n	80080e6 <_fwalk_reent+0xe>
 80080f6:	4638      	mov	r0, r7
 80080f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fc:	89ab      	ldrh	r3, [r5, #12]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d907      	bls.n	8008112 <_fwalk_reent+0x3a>
 8008102:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008106:	3301      	adds	r3, #1
 8008108:	d003      	beq.n	8008112 <_fwalk_reent+0x3a>
 800810a:	4629      	mov	r1, r5
 800810c:	4630      	mov	r0, r6
 800810e:	47c0      	blx	r8
 8008110:	4307      	orrs	r7, r0
 8008112:	3568      	adds	r5, #104	; 0x68
 8008114:	e7e9      	b.n	80080ea <_fwalk_reent+0x12>

08008116 <rshift>:
 8008116:	6903      	ldr	r3, [r0, #16]
 8008118:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800811c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008120:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008124:	f100 0414 	add.w	r4, r0, #20
 8008128:	dd45      	ble.n	80081b6 <rshift+0xa0>
 800812a:	f011 011f 	ands.w	r1, r1, #31
 800812e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008132:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008136:	d10c      	bne.n	8008152 <rshift+0x3c>
 8008138:	f100 0710 	add.w	r7, r0, #16
 800813c:	4629      	mov	r1, r5
 800813e:	42b1      	cmp	r1, r6
 8008140:	d334      	bcc.n	80081ac <rshift+0x96>
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	1eea      	subs	r2, r5, #3
 8008148:	4296      	cmp	r6, r2
 800814a:	bf38      	it	cc
 800814c:	2300      	movcc	r3, #0
 800814e:	4423      	add	r3, r4
 8008150:	e015      	b.n	800817e <rshift+0x68>
 8008152:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008156:	f1c1 0820 	rsb	r8, r1, #32
 800815a:	40cf      	lsrs	r7, r1
 800815c:	f105 0e04 	add.w	lr, r5, #4
 8008160:	46a1      	mov	r9, r4
 8008162:	4576      	cmp	r6, lr
 8008164:	46f4      	mov	ip, lr
 8008166:	d815      	bhi.n	8008194 <rshift+0x7e>
 8008168:	1a9a      	subs	r2, r3, r2
 800816a:	0092      	lsls	r2, r2, #2
 800816c:	3a04      	subs	r2, #4
 800816e:	3501      	adds	r5, #1
 8008170:	42ae      	cmp	r6, r5
 8008172:	bf38      	it	cc
 8008174:	2200      	movcc	r2, #0
 8008176:	18a3      	adds	r3, r4, r2
 8008178:	50a7      	str	r7, [r4, r2]
 800817a:	b107      	cbz	r7, 800817e <rshift+0x68>
 800817c:	3304      	adds	r3, #4
 800817e:	1b1a      	subs	r2, r3, r4
 8008180:	42a3      	cmp	r3, r4
 8008182:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008186:	bf08      	it	eq
 8008188:	2300      	moveq	r3, #0
 800818a:	6102      	str	r2, [r0, #16]
 800818c:	bf08      	it	eq
 800818e:	6143      	streq	r3, [r0, #20]
 8008190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008194:	f8dc c000 	ldr.w	ip, [ip]
 8008198:	fa0c fc08 	lsl.w	ip, ip, r8
 800819c:	ea4c 0707 	orr.w	r7, ip, r7
 80081a0:	f849 7b04 	str.w	r7, [r9], #4
 80081a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081a8:	40cf      	lsrs	r7, r1
 80081aa:	e7da      	b.n	8008162 <rshift+0x4c>
 80081ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80081b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80081b4:	e7c3      	b.n	800813e <rshift+0x28>
 80081b6:	4623      	mov	r3, r4
 80081b8:	e7e1      	b.n	800817e <rshift+0x68>

080081ba <__hexdig_fun>:
 80081ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081be:	2b09      	cmp	r3, #9
 80081c0:	d802      	bhi.n	80081c8 <__hexdig_fun+0xe>
 80081c2:	3820      	subs	r0, #32
 80081c4:	b2c0      	uxtb	r0, r0
 80081c6:	4770      	bx	lr
 80081c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081cc:	2b05      	cmp	r3, #5
 80081ce:	d801      	bhi.n	80081d4 <__hexdig_fun+0x1a>
 80081d0:	3847      	subs	r0, #71	; 0x47
 80081d2:	e7f7      	b.n	80081c4 <__hexdig_fun+0xa>
 80081d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d801      	bhi.n	80081e0 <__hexdig_fun+0x26>
 80081dc:	3827      	subs	r0, #39	; 0x27
 80081de:	e7f1      	b.n	80081c4 <__hexdig_fun+0xa>
 80081e0:	2000      	movs	r0, #0
 80081e2:	4770      	bx	lr

080081e4 <__gethex>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	ed2d 8b02 	vpush	{d8}
 80081ec:	b089      	sub	sp, #36	; 0x24
 80081ee:	ee08 0a10 	vmov	s16, r0
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	4bb4      	ldr	r3, [pc, #720]	; (80084c8 <__gethex+0x2e4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	468b      	mov	fp, r1
 80081fe:	4690      	mov	r8, r2
 8008200:	f7f7 ffe6 	bl	80001d0 <strlen>
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	f8db 2000 	ldr.w	r2, [fp]
 800820a:	4403      	add	r3, r0
 800820c:	4682      	mov	sl, r0
 800820e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	1c93      	adds	r3, r2, #2
 8008216:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800821a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800821e:	32fe      	adds	r2, #254	; 0xfe
 8008220:	18d1      	adds	r1, r2, r3
 8008222:	461f      	mov	r7, r3
 8008224:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008228:	9100      	str	r1, [sp, #0]
 800822a:	2830      	cmp	r0, #48	; 0x30
 800822c:	d0f8      	beq.n	8008220 <__gethex+0x3c>
 800822e:	f7ff ffc4 	bl	80081ba <__hexdig_fun>
 8008232:	4604      	mov	r4, r0
 8008234:	2800      	cmp	r0, #0
 8008236:	d13a      	bne.n	80082ae <__gethex+0xca>
 8008238:	9901      	ldr	r1, [sp, #4]
 800823a:	4652      	mov	r2, sl
 800823c:	4638      	mov	r0, r7
 800823e:	f001 fbd2 	bl	80099e6 <strncmp>
 8008242:	4605      	mov	r5, r0
 8008244:	2800      	cmp	r0, #0
 8008246:	d168      	bne.n	800831a <__gethex+0x136>
 8008248:	f817 000a 	ldrb.w	r0, [r7, sl]
 800824c:	eb07 060a 	add.w	r6, r7, sl
 8008250:	f7ff ffb3 	bl	80081ba <__hexdig_fun>
 8008254:	2800      	cmp	r0, #0
 8008256:	d062      	beq.n	800831e <__gethex+0x13a>
 8008258:	4633      	mov	r3, r6
 800825a:	7818      	ldrb	r0, [r3, #0]
 800825c:	2830      	cmp	r0, #48	; 0x30
 800825e:	461f      	mov	r7, r3
 8008260:	f103 0301 	add.w	r3, r3, #1
 8008264:	d0f9      	beq.n	800825a <__gethex+0x76>
 8008266:	f7ff ffa8 	bl	80081ba <__hexdig_fun>
 800826a:	2301      	movs	r3, #1
 800826c:	fab0 f480 	clz	r4, r0
 8008270:	0964      	lsrs	r4, r4, #5
 8008272:	4635      	mov	r5, r6
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	463a      	mov	r2, r7
 8008278:	4616      	mov	r6, r2
 800827a:	3201      	adds	r2, #1
 800827c:	7830      	ldrb	r0, [r6, #0]
 800827e:	f7ff ff9c 	bl	80081ba <__hexdig_fun>
 8008282:	2800      	cmp	r0, #0
 8008284:	d1f8      	bne.n	8008278 <__gethex+0x94>
 8008286:	9901      	ldr	r1, [sp, #4]
 8008288:	4652      	mov	r2, sl
 800828a:	4630      	mov	r0, r6
 800828c:	f001 fbab 	bl	80099e6 <strncmp>
 8008290:	b980      	cbnz	r0, 80082b4 <__gethex+0xd0>
 8008292:	b94d      	cbnz	r5, 80082a8 <__gethex+0xc4>
 8008294:	eb06 050a 	add.w	r5, r6, sl
 8008298:	462a      	mov	r2, r5
 800829a:	4616      	mov	r6, r2
 800829c:	3201      	adds	r2, #1
 800829e:	7830      	ldrb	r0, [r6, #0]
 80082a0:	f7ff ff8b 	bl	80081ba <__hexdig_fun>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1f8      	bne.n	800829a <__gethex+0xb6>
 80082a8:	1bad      	subs	r5, r5, r6
 80082aa:	00ad      	lsls	r5, r5, #2
 80082ac:	e004      	b.n	80082b8 <__gethex+0xd4>
 80082ae:	2400      	movs	r4, #0
 80082b0:	4625      	mov	r5, r4
 80082b2:	e7e0      	b.n	8008276 <__gethex+0x92>
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	d1f7      	bne.n	80082a8 <__gethex+0xc4>
 80082b8:	7833      	ldrb	r3, [r6, #0]
 80082ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082be:	2b50      	cmp	r3, #80	; 0x50
 80082c0:	d13b      	bne.n	800833a <__gethex+0x156>
 80082c2:	7873      	ldrb	r3, [r6, #1]
 80082c4:	2b2b      	cmp	r3, #43	; 0x2b
 80082c6:	d02c      	beq.n	8008322 <__gethex+0x13e>
 80082c8:	2b2d      	cmp	r3, #45	; 0x2d
 80082ca:	d02e      	beq.n	800832a <__gethex+0x146>
 80082cc:	1c71      	adds	r1, r6, #1
 80082ce:	f04f 0900 	mov.w	r9, #0
 80082d2:	7808      	ldrb	r0, [r1, #0]
 80082d4:	f7ff ff71 	bl	80081ba <__hexdig_fun>
 80082d8:	1e43      	subs	r3, r0, #1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b18      	cmp	r3, #24
 80082de:	d82c      	bhi.n	800833a <__gethex+0x156>
 80082e0:	f1a0 0210 	sub.w	r2, r0, #16
 80082e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082e8:	f7ff ff67 	bl	80081ba <__hexdig_fun>
 80082ec:	1e43      	subs	r3, r0, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b18      	cmp	r3, #24
 80082f2:	d91d      	bls.n	8008330 <__gethex+0x14c>
 80082f4:	f1b9 0f00 	cmp.w	r9, #0
 80082f8:	d000      	beq.n	80082fc <__gethex+0x118>
 80082fa:	4252      	negs	r2, r2
 80082fc:	4415      	add	r5, r2
 80082fe:	f8cb 1000 	str.w	r1, [fp]
 8008302:	b1e4      	cbz	r4, 800833e <__gethex+0x15a>
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf14      	ite	ne
 800830a:	2700      	movne	r7, #0
 800830c:	2706      	moveq	r7, #6
 800830e:	4638      	mov	r0, r7
 8008310:	b009      	add	sp, #36	; 0x24
 8008312:	ecbd 8b02 	vpop	{d8}
 8008316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831a:	463e      	mov	r6, r7
 800831c:	4625      	mov	r5, r4
 800831e:	2401      	movs	r4, #1
 8008320:	e7ca      	b.n	80082b8 <__gethex+0xd4>
 8008322:	f04f 0900 	mov.w	r9, #0
 8008326:	1cb1      	adds	r1, r6, #2
 8008328:	e7d3      	b.n	80082d2 <__gethex+0xee>
 800832a:	f04f 0901 	mov.w	r9, #1
 800832e:	e7fa      	b.n	8008326 <__gethex+0x142>
 8008330:	230a      	movs	r3, #10
 8008332:	fb03 0202 	mla	r2, r3, r2, r0
 8008336:	3a10      	subs	r2, #16
 8008338:	e7d4      	b.n	80082e4 <__gethex+0x100>
 800833a:	4631      	mov	r1, r6
 800833c:	e7df      	b.n	80082fe <__gethex+0x11a>
 800833e:	1bf3      	subs	r3, r6, r7
 8008340:	3b01      	subs	r3, #1
 8008342:	4621      	mov	r1, r4
 8008344:	2b07      	cmp	r3, #7
 8008346:	dc0b      	bgt.n	8008360 <__gethex+0x17c>
 8008348:	ee18 0a10 	vmov	r0, s16
 800834c:	f000 fa82 	bl	8008854 <_Balloc>
 8008350:	4604      	mov	r4, r0
 8008352:	b940      	cbnz	r0, 8008366 <__gethex+0x182>
 8008354:	4b5d      	ldr	r3, [pc, #372]	; (80084cc <__gethex+0x2e8>)
 8008356:	4602      	mov	r2, r0
 8008358:	21de      	movs	r1, #222	; 0xde
 800835a:	485d      	ldr	r0, [pc, #372]	; (80084d0 <__gethex+0x2ec>)
 800835c:	f001 fc38 	bl	8009bd0 <__assert_func>
 8008360:	3101      	adds	r1, #1
 8008362:	105b      	asrs	r3, r3, #1
 8008364:	e7ee      	b.n	8008344 <__gethex+0x160>
 8008366:	f100 0914 	add.w	r9, r0, #20
 800836a:	f04f 0b00 	mov.w	fp, #0
 800836e:	f1ca 0301 	rsb	r3, sl, #1
 8008372:	f8cd 9008 	str.w	r9, [sp, #8]
 8008376:	f8cd b000 	str.w	fp, [sp]
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	42b7      	cmp	r7, r6
 800837e:	d340      	bcc.n	8008402 <__gethex+0x21e>
 8008380:	9802      	ldr	r0, [sp, #8]
 8008382:	9b00      	ldr	r3, [sp, #0]
 8008384:	f840 3b04 	str.w	r3, [r0], #4
 8008388:	eba0 0009 	sub.w	r0, r0, r9
 800838c:	1080      	asrs	r0, r0, #2
 800838e:	0146      	lsls	r6, r0, #5
 8008390:	6120      	str	r0, [r4, #16]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fb50 	bl	8008a38 <__hi0bits>
 8008398:	1a30      	subs	r0, r6, r0
 800839a:	f8d8 6000 	ldr.w	r6, [r8]
 800839e:	42b0      	cmp	r0, r6
 80083a0:	dd63      	ble.n	800846a <__gethex+0x286>
 80083a2:	1b87      	subs	r7, r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fef4 	bl	8009194 <__any_on>
 80083ac:	4682      	mov	sl, r0
 80083ae:	b1a8      	cbz	r0, 80083dc <__gethex+0x1f8>
 80083b0:	1e7b      	subs	r3, r7, #1
 80083b2:	1159      	asrs	r1, r3, #5
 80083b4:	f003 021f 	and.w	r2, r3, #31
 80083b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083bc:	f04f 0a01 	mov.w	sl, #1
 80083c0:	fa0a f202 	lsl.w	r2, sl, r2
 80083c4:	420a      	tst	r2, r1
 80083c6:	d009      	beq.n	80083dc <__gethex+0x1f8>
 80083c8:	4553      	cmp	r3, sl
 80083ca:	dd05      	ble.n	80083d8 <__gethex+0x1f4>
 80083cc:	1eb9      	subs	r1, r7, #2
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fee0 	bl	8009194 <__any_on>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d145      	bne.n	8008464 <__gethex+0x280>
 80083d8:	f04f 0a02 	mov.w	sl, #2
 80083dc:	4639      	mov	r1, r7
 80083de:	4620      	mov	r0, r4
 80083e0:	f7ff fe99 	bl	8008116 <rshift>
 80083e4:	443d      	add	r5, r7
 80083e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083ea:	42ab      	cmp	r3, r5
 80083ec:	da4c      	bge.n	8008488 <__gethex+0x2a4>
 80083ee:	ee18 0a10 	vmov	r0, s16
 80083f2:	4621      	mov	r1, r4
 80083f4:	f000 fa6e 	bl	80088d4 <_Bfree>
 80083f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083fa:	2300      	movs	r3, #0
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	27a3      	movs	r7, #163	; 0xa3
 8008400:	e785      	b.n	800830e <__gethex+0x12a>
 8008402:	1e73      	subs	r3, r6, #1
 8008404:	9a05      	ldr	r2, [sp, #20]
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800840c:	4293      	cmp	r3, r2
 800840e:	d019      	beq.n	8008444 <__gethex+0x260>
 8008410:	f1bb 0f20 	cmp.w	fp, #32
 8008414:	d107      	bne.n	8008426 <__gethex+0x242>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	9a00      	ldr	r2, [sp, #0]
 800841a:	f843 2b04 	str.w	r2, [r3], #4
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	469b      	mov	fp, r3
 8008426:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800842a:	f7ff fec6 	bl	80081ba <__hexdig_fun>
 800842e:	9b00      	ldr	r3, [sp, #0]
 8008430:	f000 000f 	and.w	r0, r0, #15
 8008434:	fa00 f00b 	lsl.w	r0, r0, fp
 8008438:	4303      	orrs	r3, r0
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	f10b 0b04 	add.w	fp, fp, #4
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	e00d      	b.n	8008460 <__gethex+0x27c>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	4413      	add	r3, r2
 800844a:	42bb      	cmp	r3, r7
 800844c:	d3e0      	bcc.n	8008410 <__gethex+0x22c>
 800844e:	4618      	mov	r0, r3
 8008450:	9901      	ldr	r1, [sp, #4]
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	4652      	mov	r2, sl
 8008456:	f001 fac6 	bl	80099e6 <strncmp>
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	2800      	cmp	r0, #0
 800845e:	d1d7      	bne.n	8008410 <__gethex+0x22c>
 8008460:	461e      	mov	r6, r3
 8008462:	e78b      	b.n	800837c <__gethex+0x198>
 8008464:	f04f 0a03 	mov.w	sl, #3
 8008468:	e7b8      	b.n	80083dc <__gethex+0x1f8>
 800846a:	da0a      	bge.n	8008482 <__gethex+0x29e>
 800846c:	1a37      	subs	r7, r6, r0
 800846e:	4621      	mov	r1, r4
 8008470:	ee18 0a10 	vmov	r0, s16
 8008474:	463a      	mov	r2, r7
 8008476:	f000 fc49 	bl	8008d0c <__lshift>
 800847a:	1bed      	subs	r5, r5, r7
 800847c:	4604      	mov	r4, r0
 800847e:	f100 0914 	add.w	r9, r0, #20
 8008482:	f04f 0a00 	mov.w	sl, #0
 8008486:	e7ae      	b.n	80083e6 <__gethex+0x202>
 8008488:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800848c:	42a8      	cmp	r0, r5
 800848e:	dd72      	ble.n	8008576 <__gethex+0x392>
 8008490:	1b45      	subs	r5, r0, r5
 8008492:	42ae      	cmp	r6, r5
 8008494:	dc36      	bgt.n	8008504 <__gethex+0x320>
 8008496:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d02a      	beq.n	80084f4 <__gethex+0x310>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d02c      	beq.n	80084fc <__gethex+0x318>
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d11c      	bne.n	80084e0 <__gethex+0x2fc>
 80084a6:	42ae      	cmp	r6, r5
 80084a8:	d11a      	bne.n	80084e0 <__gethex+0x2fc>
 80084aa:	2e01      	cmp	r6, #1
 80084ac:	d112      	bne.n	80084d4 <__gethex+0x2f0>
 80084ae:	9a04      	ldr	r2, [sp, #16]
 80084b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	2301      	movs	r3, #1
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	f8c9 3000 	str.w	r3, [r9]
 80084be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084c0:	2762      	movs	r7, #98	; 0x62
 80084c2:	601c      	str	r4, [r3, #0]
 80084c4:	e723      	b.n	800830e <__gethex+0x12a>
 80084c6:	bf00      	nop
 80084c8:	0800a43c 	.word	0x0800a43c
 80084cc:	0800a360 	.word	0x0800a360
 80084d0:	0800a3d4 	.word	0x0800a3d4
 80084d4:	1e71      	subs	r1, r6, #1
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fe5c 	bl	8009194 <__any_on>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1e6      	bne.n	80084ae <__gethex+0x2ca>
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	4621      	mov	r1, r4
 80084e6:	f000 f9f5 	bl	80088d4 <_Bfree>
 80084ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084ec:	2300      	movs	r3, #0
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	2750      	movs	r7, #80	; 0x50
 80084f2:	e70c      	b.n	800830e <__gethex+0x12a>
 80084f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1f2      	bne.n	80084e0 <__gethex+0x2fc>
 80084fa:	e7d8      	b.n	80084ae <__gethex+0x2ca>
 80084fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1d5      	bne.n	80084ae <__gethex+0x2ca>
 8008502:	e7ed      	b.n	80084e0 <__gethex+0x2fc>
 8008504:	1e6f      	subs	r7, r5, #1
 8008506:	f1ba 0f00 	cmp.w	sl, #0
 800850a:	d131      	bne.n	8008570 <__gethex+0x38c>
 800850c:	b127      	cbz	r7, 8008518 <__gethex+0x334>
 800850e:	4639      	mov	r1, r7
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fe3f 	bl	8009194 <__any_on>
 8008516:	4682      	mov	sl, r0
 8008518:	117b      	asrs	r3, r7, #5
 800851a:	2101      	movs	r1, #1
 800851c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008520:	f007 071f 	and.w	r7, r7, #31
 8008524:	fa01 f707 	lsl.w	r7, r1, r7
 8008528:	421f      	tst	r7, r3
 800852a:	4629      	mov	r1, r5
 800852c:	4620      	mov	r0, r4
 800852e:	bf18      	it	ne
 8008530:	f04a 0a02 	orrne.w	sl, sl, #2
 8008534:	1b76      	subs	r6, r6, r5
 8008536:	f7ff fdee 	bl	8008116 <rshift>
 800853a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800853e:	2702      	movs	r7, #2
 8008540:	f1ba 0f00 	cmp.w	sl, #0
 8008544:	d048      	beq.n	80085d8 <__gethex+0x3f4>
 8008546:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d015      	beq.n	800857a <__gethex+0x396>
 800854e:	2b03      	cmp	r3, #3
 8008550:	d017      	beq.n	8008582 <__gethex+0x39e>
 8008552:	2b01      	cmp	r3, #1
 8008554:	d109      	bne.n	800856a <__gethex+0x386>
 8008556:	f01a 0f02 	tst.w	sl, #2
 800855a:	d006      	beq.n	800856a <__gethex+0x386>
 800855c:	f8d9 0000 	ldr.w	r0, [r9]
 8008560:	ea4a 0a00 	orr.w	sl, sl, r0
 8008564:	f01a 0f01 	tst.w	sl, #1
 8008568:	d10e      	bne.n	8008588 <__gethex+0x3a4>
 800856a:	f047 0710 	orr.w	r7, r7, #16
 800856e:	e033      	b.n	80085d8 <__gethex+0x3f4>
 8008570:	f04f 0a01 	mov.w	sl, #1
 8008574:	e7d0      	b.n	8008518 <__gethex+0x334>
 8008576:	2701      	movs	r7, #1
 8008578:	e7e2      	b.n	8008540 <__gethex+0x35c>
 800857a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800857c:	f1c3 0301 	rsb	r3, r3, #1
 8008580:	9315      	str	r3, [sp, #84]	; 0x54
 8008582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0f0      	beq.n	800856a <__gethex+0x386>
 8008588:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800858c:	f104 0314 	add.w	r3, r4, #20
 8008590:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008594:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008598:	f04f 0c00 	mov.w	ip, #0
 800859c:	4618      	mov	r0, r3
 800859e:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085a6:	d01c      	beq.n	80085e2 <__gethex+0x3fe>
 80085a8:	3201      	adds	r2, #1
 80085aa:	6002      	str	r2, [r0, #0]
 80085ac:	2f02      	cmp	r7, #2
 80085ae:	f104 0314 	add.w	r3, r4, #20
 80085b2:	d13f      	bne.n	8008634 <__gethex+0x450>
 80085b4:	f8d8 2000 	ldr.w	r2, [r8]
 80085b8:	3a01      	subs	r2, #1
 80085ba:	42b2      	cmp	r2, r6
 80085bc:	d10a      	bne.n	80085d4 <__gethex+0x3f0>
 80085be:	1171      	asrs	r1, r6, #5
 80085c0:	2201      	movs	r2, #1
 80085c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085c6:	f006 061f 	and.w	r6, r6, #31
 80085ca:	fa02 f606 	lsl.w	r6, r2, r6
 80085ce:	421e      	tst	r6, r3
 80085d0:	bf18      	it	ne
 80085d2:	4617      	movne	r7, r2
 80085d4:	f047 0720 	orr.w	r7, r7, #32
 80085d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085da:	601c      	str	r4, [r3, #0]
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	601d      	str	r5, [r3, #0]
 80085e0:	e695      	b.n	800830e <__gethex+0x12a>
 80085e2:	4299      	cmp	r1, r3
 80085e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80085e8:	d8d8      	bhi.n	800859c <__gethex+0x3b8>
 80085ea:	68a3      	ldr	r3, [r4, #8]
 80085ec:	459b      	cmp	fp, r3
 80085ee:	db19      	blt.n	8008624 <__gethex+0x440>
 80085f0:	6861      	ldr	r1, [r4, #4]
 80085f2:	ee18 0a10 	vmov	r0, s16
 80085f6:	3101      	adds	r1, #1
 80085f8:	f000 f92c 	bl	8008854 <_Balloc>
 80085fc:	4681      	mov	r9, r0
 80085fe:	b918      	cbnz	r0, 8008608 <__gethex+0x424>
 8008600:	4b1a      	ldr	r3, [pc, #104]	; (800866c <__gethex+0x488>)
 8008602:	4602      	mov	r2, r0
 8008604:	2184      	movs	r1, #132	; 0x84
 8008606:	e6a8      	b.n	800835a <__gethex+0x176>
 8008608:	6922      	ldr	r2, [r4, #16]
 800860a:	3202      	adds	r2, #2
 800860c:	f104 010c 	add.w	r1, r4, #12
 8008610:	0092      	lsls	r2, r2, #2
 8008612:	300c      	adds	r0, #12
 8008614:	f000 f910 	bl	8008838 <memcpy>
 8008618:	4621      	mov	r1, r4
 800861a:	ee18 0a10 	vmov	r0, s16
 800861e:	f000 f959 	bl	80088d4 <_Bfree>
 8008622:	464c      	mov	r4, r9
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800862c:	6122      	str	r2, [r4, #16]
 800862e:	2201      	movs	r2, #1
 8008630:	615a      	str	r2, [r3, #20]
 8008632:	e7bb      	b.n	80085ac <__gethex+0x3c8>
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	455a      	cmp	r2, fp
 8008638:	dd0b      	ble.n	8008652 <__gethex+0x46e>
 800863a:	2101      	movs	r1, #1
 800863c:	4620      	mov	r0, r4
 800863e:	f7ff fd6a 	bl	8008116 <rshift>
 8008642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008646:	3501      	adds	r5, #1
 8008648:	42ab      	cmp	r3, r5
 800864a:	f6ff aed0 	blt.w	80083ee <__gethex+0x20a>
 800864e:	2701      	movs	r7, #1
 8008650:	e7c0      	b.n	80085d4 <__gethex+0x3f0>
 8008652:	f016 061f 	ands.w	r6, r6, #31
 8008656:	d0fa      	beq.n	800864e <__gethex+0x46a>
 8008658:	4453      	add	r3, sl
 800865a:	f1c6 0620 	rsb	r6, r6, #32
 800865e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008662:	f000 f9e9 	bl	8008a38 <__hi0bits>
 8008666:	42b0      	cmp	r0, r6
 8008668:	dbe7      	blt.n	800863a <__gethex+0x456>
 800866a:	e7f0      	b.n	800864e <__gethex+0x46a>
 800866c:	0800a360 	.word	0x0800a360

08008670 <L_shift>:
 8008670:	f1c2 0208 	rsb	r2, r2, #8
 8008674:	0092      	lsls	r2, r2, #2
 8008676:	b570      	push	{r4, r5, r6, lr}
 8008678:	f1c2 0620 	rsb	r6, r2, #32
 800867c:	6843      	ldr	r3, [r0, #4]
 800867e:	6804      	ldr	r4, [r0, #0]
 8008680:	fa03 f506 	lsl.w	r5, r3, r6
 8008684:	432c      	orrs	r4, r5
 8008686:	40d3      	lsrs	r3, r2
 8008688:	6004      	str	r4, [r0, #0]
 800868a:	f840 3f04 	str.w	r3, [r0, #4]!
 800868e:	4288      	cmp	r0, r1
 8008690:	d3f4      	bcc.n	800867c <L_shift+0xc>
 8008692:	bd70      	pop	{r4, r5, r6, pc}

08008694 <__match>:
 8008694:	b530      	push	{r4, r5, lr}
 8008696:	6803      	ldr	r3, [r0, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869e:	b914      	cbnz	r4, 80086a6 <__match+0x12>
 80086a0:	6003      	str	r3, [r0, #0]
 80086a2:	2001      	movs	r0, #1
 80086a4:	bd30      	pop	{r4, r5, pc}
 80086a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086ae:	2d19      	cmp	r5, #25
 80086b0:	bf98      	it	ls
 80086b2:	3220      	addls	r2, #32
 80086b4:	42a2      	cmp	r2, r4
 80086b6:	d0f0      	beq.n	800869a <__match+0x6>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e7f3      	b.n	80086a4 <__match+0x10>

080086bc <__hexnan>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	680b      	ldr	r3, [r1, #0]
 80086c2:	115e      	asrs	r6, r3, #5
 80086c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80086c8:	f013 031f 	ands.w	r3, r3, #31
 80086cc:	b087      	sub	sp, #28
 80086ce:	bf18      	it	ne
 80086d0:	3604      	addne	r6, #4
 80086d2:	2500      	movs	r5, #0
 80086d4:	1f37      	subs	r7, r6, #4
 80086d6:	4690      	mov	r8, r2
 80086d8:	6802      	ldr	r2, [r0, #0]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	4682      	mov	sl, r0
 80086de:	f846 5c04 	str.w	r5, [r6, #-4]
 80086e2:	46b9      	mov	r9, r7
 80086e4:	463c      	mov	r4, r7
 80086e6:	9502      	str	r5, [sp, #8]
 80086e8:	46ab      	mov	fp, r5
 80086ea:	7851      	ldrb	r1, [r2, #1]
 80086ec:	1c53      	adds	r3, r2, #1
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	b341      	cbz	r1, 8008744 <__hexnan+0x88>
 80086f2:	4608      	mov	r0, r1
 80086f4:	9205      	str	r2, [sp, #20]
 80086f6:	9104      	str	r1, [sp, #16]
 80086f8:	f7ff fd5f 	bl	80081ba <__hexdig_fun>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d14f      	bne.n	80087a0 <__hexnan+0xe4>
 8008700:	9904      	ldr	r1, [sp, #16]
 8008702:	9a05      	ldr	r2, [sp, #20]
 8008704:	2920      	cmp	r1, #32
 8008706:	d818      	bhi.n	800873a <__hexnan+0x7e>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	459b      	cmp	fp, r3
 800870c:	dd13      	ble.n	8008736 <__hexnan+0x7a>
 800870e:	454c      	cmp	r4, r9
 8008710:	d206      	bcs.n	8008720 <__hexnan+0x64>
 8008712:	2d07      	cmp	r5, #7
 8008714:	dc04      	bgt.n	8008720 <__hexnan+0x64>
 8008716:	462a      	mov	r2, r5
 8008718:	4649      	mov	r1, r9
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff ffa8 	bl	8008670 <L_shift>
 8008720:	4544      	cmp	r4, r8
 8008722:	d950      	bls.n	80087c6 <__hexnan+0x10a>
 8008724:	2300      	movs	r3, #0
 8008726:	f1a4 0904 	sub.w	r9, r4, #4
 800872a:	f844 3c04 	str.w	r3, [r4, #-4]
 800872e:	f8cd b008 	str.w	fp, [sp, #8]
 8008732:	464c      	mov	r4, r9
 8008734:	461d      	mov	r5, r3
 8008736:	9a03      	ldr	r2, [sp, #12]
 8008738:	e7d7      	b.n	80086ea <__hexnan+0x2e>
 800873a:	2929      	cmp	r1, #41	; 0x29
 800873c:	d156      	bne.n	80087ec <__hexnan+0x130>
 800873e:	3202      	adds	r2, #2
 8008740:	f8ca 2000 	str.w	r2, [sl]
 8008744:	f1bb 0f00 	cmp.w	fp, #0
 8008748:	d050      	beq.n	80087ec <__hexnan+0x130>
 800874a:	454c      	cmp	r4, r9
 800874c:	d206      	bcs.n	800875c <__hexnan+0xa0>
 800874e:	2d07      	cmp	r5, #7
 8008750:	dc04      	bgt.n	800875c <__hexnan+0xa0>
 8008752:	462a      	mov	r2, r5
 8008754:	4649      	mov	r1, r9
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff ff8a 	bl	8008670 <L_shift>
 800875c:	4544      	cmp	r4, r8
 800875e:	d934      	bls.n	80087ca <__hexnan+0x10e>
 8008760:	f1a8 0204 	sub.w	r2, r8, #4
 8008764:	4623      	mov	r3, r4
 8008766:	f853 1b04 	ldr.w	r1, [r3], #4
 800876a:	f842 1f04 	str.w	r1, [r2, #4]!
 800876e:	429f      	cmp	r7, r3
 8008770:	d2f9      	bcs.n	8008766 <__hexnan+0xaa>
 8008772:	1b3b      	subs	r3, r7, r4
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	3304      	adds	r3, #4
 800877a:	3401      	adds	r4, #1
 800877c:	3e03      	subs	r6, #3
 800877e:	42b4      	cmp	r4, r6
 8008780:	bf88      	it	hi
 8008782:	2304      	movhi	r3, #4
 8008784:	4443      	add	r3, r8
 8008786:	2200      	movs	r2, #0
 8008788:	f843 2b04 	str.w	r2, [r3], #4
 800878c:	429f      	cmp	r7, r3
 800878e:	d2fb      	bcs.n	8008788 <__hexnan+0xcc>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b91b      	cbnz	r3, 800879c <__hexnan+0xe0>
 8008794:	4547      	cmp	r7, r8
 8008796:	d127      	bne.n	80087e8 <__hexnan+0x12c>
 8008798:	2301      	movs	r3, #1
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	2005      	movs	r0, #5
 800879e:	e026      	b.n	80087ee <__hexnan+0x132>
 80087a0:	3501      	adds	r5, #1
 80087a2:	2d08      	cmp	r5, #8
 80087a4:	f10b 0b01 	add.w	fp, fp, #1
 80087a8:	dd06      	ble.n	80087b8 <__hexnan+0xfc>
 80087aa:	4544      	cmp	r4, r8
 80087ac:	d9c3      	bls.n	8008736 <__hexnan+0x7a>
 80087ae:	2300      	movs	r3, #0
 80087b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80087b4:	2501      	movs	r5, #1
 80087b6:	3c04      	subs	r4, #4
 80087b8:	6822      	ldr	r2, [r4, #0]
 80087ba:	f000 000f 	and.w	r0, r0, #15
 80087be:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	e7b7      	b.n	8008736 <__hexnan+0x7a>
 80087c6:	2508      	movs	r5, #8
 80087c8:	e7b5      	b.n	8008736 <__hexnan+0x7a>
 80087ca:	9b01      	ldr	r3, [sp, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0df      	beq.n	8008790 <__hexnan+0xd4>
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	f1c3 0320 	rsb	r3, r3, #32
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
 80087dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087e0:	401a      	ands	r2, r3
 80087e2:	f846 2c04 	str.w	r2, [r6, #-4]
 80087e6:	e7d3      	b.n	8008790 <__hexnan+0xd4>
 80087e8:	3f04      	subs	r7, #4
 80087ea:	e7d1      	b.n	8008790 <__hexnan+0xd4>
 80087ec:	2004      	movs	r0, #4
 80087ee:	b007      	add	sp, #28
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087f4 <_localeconv_r>:
 80087f4:	4800      	ldr	r0, [pc, #0]	; (80087f8 <_localeconv_r+0x4>)
 80087f6:	4770      	bx	lr
 80087f8:	20000164 	.word	0x20000164

080087fc <__retarget_lock_init_recursive>:
 80087fc:	4770      	bx	lr

080087fe <__retarget_lock_acquire_recursive>:
 80087fe:	4770      	bx	lr

08008800 <__retarget_lock_release_recursive>:
 8008800:	4770      	bx	lr
	...

08008804 <malloc>:
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <malloc+0xc>)
 8008806:	4601      	mov	r1, r0
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	f000 bd67 	b.w	80092dc <_malloc_r>
 800880e:	bf00      	nop
 8008810:	2000000c 	.word	0x2000000c

08008814 <__ascii_mbtowc>:
 8008814:	b082      	sub	sp, #8
 8008816:	b901      	cbnz	r1, 800881a <__ascii_mbtowc+0x6>
 8008818:	a901      	add	r1, sp, #4
 800881a:	b142      	cbz	r2, 800882e <__ascii_mbtowc+0x1a>
 800881c:	b14b      	cbz	r3, 8008832 <__ascii_mbtowc+0x1e>
 800881e:	7813      	ldrb	r3, [r2, #0]
 8008820:	600b      	str	r3, [r1, #0]
 8008822:	7812      	ldrb	r2, [r2, #0]
 8008824:	1e10      	subs	r0, r2, #0
 8008826:	bf18      	it	ne
 8008828:	2001      	movne	r0, #1
 800882a:	b002      	add	sp, #8
 800882c:	4770      	bx	lr
 800882e:	4610      	mov	r0, r2
 8008830:	e7fb      	b.n	800882a <__ascii_mbtowc+0x16>
 8008832:	f06f 0001 	mvn.w	r0, #1
 8008836:	e7f8      	b.n	800882a <__ascii_mbtowc+0x16>

08008838 <memcpy>:
 8008838:	440a      	add	r2, r1
 800883a:	4291      	cmp	r1, r2
 800883c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008840:	d100      	bne.n	8008844 <memcpy+0xc>
 8008842:	4770      	bx	lr
 8008844:	b510      	push	{r4, lr}
 8008846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800884e:	4291      	cmp	r1, r2
 8008850:	d1f9      	bne.n	8008846 <memcpy+0xe>
 8008852:	bd10      	pop	{r4, pc}

08008854 <_Balloc>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008858:	4604      	mov	r4, r0
 800885a:	460d      	mov	r5, r1
 800885c:	b976      	cbnz	r6, 800887c <_Balloc+0x28>
 800885e:	2010      	movs	r0, #16
 8008860:	f7ff ffd0 	bl	8008804 <malloc>
 8008864:	4602      	mov	r2, r0
 8008866:	6260      	str	r0, [r4, #36]	; 0x24
 8008868:	b920      	cbnz	r0, 8008874 <_Balloc+0x20>
 800886a:	4b18      	ldr	r3, [pc, #96]	; (80088cc <_Balloc+0x78>)
 800886c:	4818      	ldr	r0, [pc, #96]	; (80088d0 <_Balloc+0x7c>)
 800886e:	2166      	movs	r1, #102	; 0x66
 8008870:	f001 f9ae 	bl	8009bd0 <__assert_func>
 8008874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008878:	6006      	str	r6, [r0, #0]
 800887a:	60c6      	str	r6, [r0, #12]
 800887c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800887e:	68f3      	ldr	r3, [r6, #12]
 8008880:	b183      	cbz	r3, 80088a4 <_Balloc+0x50>
 8008882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800888a:	b9b8      	cbnz	r0, 80088bc <_Balloc+0x68>
 800888c:	2101      	movs	r1, #1
 800888e:	fa01 f605 	lsl.w	r6, r1, r5
 8008892:	1d72      	adds	r2, r6, #5
 8008894:	0092      	lsls	r2, r2, #2
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fc9d 	bl	80091d6 <_calloc_r>
 800889c:	b160      	cbz	r0, 80088b8 <_Balloc+0x64>
 800889e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088a2:	e00e      	b.n	80088c2 <_Balloc+0x6e>
 80088a4:	2221      	movs	r2, #33	; 0x21
 80088a6:	2104      	movs	r1, #4
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 fc94 	bl	80091d6 <_calloc_r>
 80088ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b0:	60f0      	str	r0, [r6, #12]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e4      	bne.n	8008882 <_Balloc+0x2e>
 80088b8:	2000      	movs	r0, #0
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	6802      	ldr	r2, [r0, #0]
 80088be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088c2:	2300      	movs	r3, #0
 80088c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088c8:	e7f7      	b.n	80088ba <_Balloc+0x66>
 80088ca:	bf00      	nop
 80088cc:	0800a2ee 	.word	0x0800a2ee
 80088d0:	0800a450 	.word	0x0800a450

080088d4 <_Bfree>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088d8:	4605      	mov	r5, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	b976      	cbnz	r6, 80088fc <_Bfree+0x28>
 80088de:	2010      	movs	r0, #16
 80088e0:	f7ff ff90 	bl	8008804 <malloc>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6268      	str	r0, [r5, #36]	; 0x24
 80088e8:	b920      	cbnz	r0, 80088f4 <_Bfree+0x20>
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <_Bfree+0x3c>)
 80088ec:	4809      	ldr	r0, [pc, #36]	; (8008914 <_Bfree+0x40>)
 80088ee:	218a      	movs	r1, #138	; 0x8a
 80088f0:	f001 f96e 	bl	8009bd0 <__assert_func>
 80088f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f8:	6006      	str	r6, [r0, #0]
 80088fa:	60c6      	str	r6, [r0, #12]
 80088fc:	b13c      	cbz	r4, 800890e <_Bfree+0x3a>
 80088fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008900:	6862      	ldr	r2, [r4, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008908:	6021      	str	r1, [r4, #0]
 800890a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	0800a2ee 	.word	0x0800a2ee
 8008914:	0800a450 	.word	0x0800a450

08008918 <__multadd>:
 8008918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891c:	690d      	ldr	r5, [r1, #16]
 800891e:	4607      	mov	r7, r0
 8008920:	460c      	mov	r4, r1
 8008922:	461e      	mov	r6, r3
 8008924:	f101 0c14 	add.w	ip, r1, #20
 8008928:	2000      	movs	r0, #0
 800892a:	f8dc 3000 	ldr.w	r3, [ip]
 800892e:	b299      	uxth	r1, r3
 8008930:	fb02 6101 	mla	r1, r2, r1, r6
 8008934:	0c1e      	lsrs	r6, r3, #16
 8008936:	0c0b      	lsrs	r3, r1, #16
 8008938:	fb02 3306 	mla	r3, r2, r6, r3
 800893c:	b289      	uxth	r1, r1
 800893e:	3001      	adds	r0, #1
 8008940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008944:	4285      	cmp	r5, r0
 8008946:	f84c 1b04 	str.w	r1, [ip], #4
 800894a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800894e:	dcec      	bgt.n	800892a <__multadd+0x12>
 8008950:	b30e      	cbz	r6, 8008996 <__multadd+0x7e>
 8008952:	68a3      	ldr	r3, [r4, #8]
 8008954:	42ab      	cmp	r3, r5
 8008956:	dc19      	bgt.n	800898c <__multadd+0x74>
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	4638      	mov	r0, r7
 800895c:	3101      	adds	r1, #1
 800895e:	f7ff ff79 	bl	8008854 <_Balloc>
 8008962:	4680      	mov	r8, r0
 8008964:	b928      	cbnz	r0, 8008972 <__multadd+0x5a>
 8008966:	4602      	mov	r2, r0
 8008968:	4b0c      	ldr	r3, [pc, #48]	; (800899c <__multadd+0x84>)
 800896a:	480d      	ldr	r0, [pc, #52]	; (80089a0 <__multadd+0x88>)
 800896c:	21b5      	movs	r1, #181	; 0xb5
 800896e:	f001 f92f 	bl	8009bd0 <__assert_func>
 8008972:	6922      	ldr	r2, [r4, #16]
 8008974:	3202      	adds	r2, #2
 8008976:	f104 010c 	add.w	r1, r4, #12
 800897a:	0092      	lsls	r2, r2, #2
 800897c:	300c      	adds	r0, #12
 800897e:	f7ff ff5b 	bl	8008838 <memcpy>
 8008982:	4621      	mov	r1, r4
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ffa5 	bl	80088d4 <_Bfree>
 800898a:	4644      	mov	r4, r8
 800898c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008990:	3501      	adds	r5, #1
 8008992:	615e      	str	r6, [r3, #20]
 8008994:	6125      	str	r5, [r4, #16]
 8008996:	4620      	mov	r0, r4
 8008998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899c:	0800a360 	.word	0x0800a360
 80089a0:	0800a450 	.word	0x0800a450

080089a4 <__s2b>:
 80089a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a8:	460c      	mov	r4, r1
 80089aa:	4615      	mov	r5, r2
 80089ac:	461f      	mov	r7, r3
 80089ae:	2209      	movs	r2, #9
 80089b0:	3308      	adds	r3, #8
 80089b2:	4606      	mov	r6, r0
 80089b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b8:	2100      	movs	r1, #0
 80089ba:	2201      	movs	r2, #1
 80089bc:	429a      	cmp	r2, r3
 80089be:	db09      	blt.n	80089d4 <__s2b+0x30>
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff ff47 	bl	8008854 <_Balloc>
 80089c6:	b940      	cbnz	r0, 80089da <__s2b+0x36>
 80089c8:	4602      	mov	r2, r0
 80089ca:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <__s2b+0x8c>)
 80089cc:	4819      	ldr	r0, [pc, #100]	; (8008a34 <__s2b+0x90>)
 80089ce:	21ce      	movs	r1, #206	; 0xce
 80089d0:	f001 f8fe 	bl	8009bd0 <__assert_func>
 80089d4:	0052      	lsls	r2, r2, #1
 80089d6:	3101      	adds	r1, #1
 80089d8:	e7f0      	b.n	80089bc <__s2b+0x18>
 80089da:	9b08      	ldr	r3, [sp, #32]
 80089dc:	6143      	str	r3, [r0, #20]
 80089de:	2d09      	cmp	r5, #9
 80089e0:	f04f 0301 	mov.w	r3, #1
 80089e4:	6103      	str	r3, [r0, #16]
 80089e6:	dd16      	ble.n	8008a16 <__s2b+0x72>
 80089e8:	f104 0909 	add.w	r9, r4, #9
 80089ec:	46c8      	mov	r8, r9
 80089ee:	442c      	add	r4, r5
 80089f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089f4:	4601      	mov	r1, r0
 80089f6:	3b30      	subs	r3, #48	; 0x30
 80089f8:	220a      	movs	r2, #10
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7ff ff8c 	bl	8008918 <__multadd>
 8008a00:	45a0      	cmp	r8, r4
 8008a02:	d1f5      	bne.n	80089f0 <__s2b+0x4c>
 8008a04:	f1a5 0408 	sub.w	r4, r5, #8
 8008a08:	444c      	add	r4, r9
 8008a0a:	1b2d      	subs	r5, r5, r4
 8008a0c:	1963      	adds	r3, r4, r5
 8008a0e:	42bb      	cmp	r3, r7
 8008a10:	db04      	blt.n	8008a1c <__s2b+0x78>
 8008a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a16:	340a      	adds	r4, #10
 8008a18:	2509      	movs	r5, #9
 8008a1a:	e7f6      	b.n	8008a0a <__s2b+0x66>
 8008a1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a20:	4601      	mov	r1, r0
 8008a22:	3b30      	subs	r3, #48	; 0x30
 8008a24:	220a      	movs	r2, #10
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7ff ff76 	bl	8008918 <__multadd>
 8008a2c:	e7ee      	b.n	8008a0c <__s2b+0x68>
 8008a2e:	bf00      	nop
 8008a30:	0800a360 	.word	0x0800a360
 8008a34:	0800a450 	.word	0x0800a450

08008a38 <__hi0bits>:
 8008a38:	0c03      	lsrs	r3, r0, #16
 8008a3a:	041b      	lsls	r3, r3, #16
 8008a3c:	b9d3      	cbnz	r3, 8008a74 <__hi0bits+0x3c>
 8008a3e:	0400      	lsls	r0, r0, #16
 8008a40:	2310      	movs	r3, #16
 8008a42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a46:	bf04      	itt	eq
 8008a48:	0200      	lsleq	r0, r0, #8
 8008a4a:	3308      	addeq	r3, #8
 8008a4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a50:	bf04      	itt	eq
 8008a52:	0100      	lsleq	r0, r0, #4
 8008a54:	3304      	addeq	r3, #4
 8008a56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a5a:	bf04      	itt	eq
 8008a5c:	0080      	lsleq	r0, r0, #2
 8008a5e:	3302      	addeq	r3, #2
 8008a60:	2800      	cmp	r0, #0
 8008a62:	db05      	blt.n	8008a70 <__hi0bits+0x38>
 8008a64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a68:	f103 0301 	add.w	r3, r3, #1
 8008a6c:	bf08      	it	eq
 8008a6e:	2320      	moveq	r3, #32
 8008a70:	4618      	mov	r0, r3
 8008a72:	4770      	bx	lr
 8008a74:	2300      	movs	r3, #0
 8008a76:	e7e4      	b.n	8008a42 <__hi0bits+0xa>

08008a78 <__lo0bits>:
 8008a78:	6803      	ldr	r3, [r0, #0]
 8008a7a:	f013 0207 	ands.w	r2, r3, #7
 8008a7e:	4601      	mov	r1, r0
 8008a80:	d00b      	beq.n	8008a9a <__lo0bits+0x22>
 8008a82:	07da      	lsls	r2, r3, #31
 8008a84:	d423      	bmi.n	8008ace <__lo0bits+0x56>
 8008a86:	0798      	lsls	r0, r3, #30
 8008a88:	bf49      	itett	mi
 8008a8a:	085b      	lsrmi	r3, r3, #1
 8008a8c:	089b      	lsrpl	r3, r3, #2
 8008a8e:	2001      	movmi	r0, #1
 8008a90:	600b      	strmi	r3, [r1, #0]
 8008a92:	bf5c      	itt	pl
 8008a94:	600b      	strpl	r3, [r1, #0]
 8008a96:	2002      	movpl	r0, #2
 8008a98:	4770      	bx	lr
 8008a9a:	b298      	uxth	r0, r3
 8008a9c:	b9a8      	cbnz	r0, 8008aca <__lo0bits+0x52>
 8008a9e:	0c1b      	lsrs	r3, r3, #16
 8008aa0:	2010      	movs	r0, #16
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	b90a      	cbnz	r2, 8008aaa <__lo0bits+0x32>
 8008aa6:	3008      	adds	r0, #8
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	071a      	lsls	r2, r3, #28
 8008aac:	bf04      	itt	eq
 8008aae:	091b      	lsreq	r3, r3, #4
 8008ab0:	3004      	addeq	r0, #4
 8008ab2:	079a      	lsls	r2, r3, #30
 8008ab4:	bf04      	itt	eq
 8008ab6:	089b      	lsreq	r3, r3, #2
 8008ab8:	3002      	addeq	r0, #2
 8008aba:	07da      	lsls	r2, r3, #31
 8008abc:	d403      	bmi.n	8008ac6 <__lo0bits+0x4e>
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	f100 0001 	add.w	r0, r0, #1
 8008ac4:	d005      	beq.n	8008ad2 <__lo0bits+0x5a>
 8008ac6:	600b      	str	r3, [r1, #0]
 8008ac8:	4770      	bx	lr
 8008aca:	4610      	mov	r0, r2
 8008acc:	e7e9      	b.n	8008aa2 <__lo0bits+0x2a>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	4770      	bx	lr
 8008ad2:	2020      	movs	r0, #32
 8008ad4:	4770      	bx	lr
	...

08008ad8 <__i2b>:
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	460c      	mov	r4, r1
 8008adc:	2101      	movs	r1, #1
 8008ade:	f7ff feb9 	bl	8008854 <_Balloc>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	b928      	cbnz	r0, 8008af2 <__i2b+0x1a>
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <__i2b+0x24>)
 8008ae8:	4805      	ldr	r0, [pc, #20]	; (8008b00 <__i2b+0x28>)
 8008aea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008aee:	f001 f86f 	bl	8009bd0 <__assert_func>
 8008af2:	2301      	movs	r3, #1
 8008af4:	6144      	str	r4, [r0, #20]
 8008af6:	6103      	str	r3, [r0, #16]
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	bf00      	nop
 8008afc:	0800a360 	.word	0x0800a360
 8008b00:	0800a450 	.word	0x0800a450

08008b04 <__multiply>:
 8008b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	4691      	mov	r9, r2
 8008b0a:	690a      	ldr	r2, [r1, #16]
 8008b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	bfb8      	it	lt
 8008b14:	460b      	movlt	r3, r1
 8008b16:	460c      	mov	r4, r1
 8008b18:	bfbc      	itt	lt
 8008b1a:	464c      	movlt	r4, r9
 8008b1c:	4699      	movlt	r9, r3
 8008b1e:	6927      	ldr	r7, [r4, #16]
 8008b20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b24:	68a3      	ldr	r3, [r4, #8]
 8008b26:	6861      	ldr	r1, [r4, #4]
 8008b28:	eb07 060a 	add.w	r6, r7, sl
 8008b2c:	42b3      	cmp	r3, r6
 8008b2e:	b085      	sub	sp, #20
 8008b30:	bfb8      	it	lt
 8008b32:	3101      	addlt	r1, #1
 8008b34:	f7ff fe8e 	bl	8008854 <_Balloc>
 8008b38:	b930      	cbnz	r0, 8008b48 <__multiply+0x44>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	4b44      	ldr	r3, [pc, #272]	; (8008c50 <__multiply+0x14c>)
 8008b3e:	4845      	ldr	r0, [pc, #276]	; (8008c54 <__multiply+0x150>)
 8008b40:	f240 115d 	movw	r1, #349	; 0x15d
 8008b44:	f001 f844 	bl	8009bd0 <__assert_func>
 8008b48:	f100 0514 	add.w	r5, r0, #20
 8008b4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b50:	462b      	mov	r3, r5
 8008b52:	2200      	movs	r2, #0
 8008b54:	4543      	cmp	r3, r8
 8008b56:	d321      	bcc.n	8008b9c <__multiply+0x98>
 8008b58:	f104 0314 	add.w	r3, r4, #20
 8008b5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b60:	f109 0314 	add.w	r3, r9, #20
 8008b64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b68:	9202      	str	r2, [sp, #8]
 8008b6a:	1b3a      	subs	r2, r7, r4
 8008b6c:	3a15      	subs	r2, #21
 8008b6e:	f022 0203 	bic.w	r2, r2, #3
 8008b72:	3204      	adds	r2, #4
 8008b74:	f104 0115 	add.w	r1, r4, #21
 8008b78:	428f      	cmp	r7, r1
 8008b7a:	bf38      	it	cc
 8008b7c:	2204      	movcc	r2, #4
 8008b7e:	9201      	str	r2, [sp, #4]
 8008b80:	9a02      	ldr	r2, [sp, #8]
 8008b82:	9303      	str	r3, [sp, #12]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d80c      	bhi.n	8008ba2 <__multiply+0x9e>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	dd03      	ble.n	8008b94 <__multiply+0x90>
 8008b8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d05a      	beq.n	8008c4a <__multiply+0x146>
 8008b94:	6106      	str	r6, [r0, #16]
 8008b96:	b005      	add	sp, #20
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	f843 2b04 	str.w	r2, [r3], #4
 8008ba0:	e7d8      	b.n	8008b54 <__multiply+0x50>
 8008ba2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ba6:	f1ba 0f00 	cmp.w	sl, #0
 8008baa:	d024      	beq.n	8008bf6 <__multiply+0xf2>
 8008bac:	f104 0e14 	add.w	lr, r4, #20
 8008bb0:	46a9      	mov	r9, r5
 8008bb2:	f04f 0c00 	mov.w	ip, #0
 8008bb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bba:	f8d9 1000 	ldr.w	r1, [r9]
 8008bbe:	fa1f fb82 	uxth.w	fp, r2
 8008bc2:	b289      	uxth	r1, r1
 8008bc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd0:	4461      	add	r1, ip
 8008bd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008bda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bde:	b289      	uxth	r1, r1
 8008be0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008be4:	4577      	cmp	r7, lr
 8008be6:	f849 1b04 	str.w	r1, [r9], #4
 8008bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008bee:	d8e2      	bhi.n	8008bb6 <__multiply+0xb2>
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	f845 c002 	str.w	ip, [r5, r2]
 8008bf6:	9a03      	ldr	r2, [sp, #12]
 8008bf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	f1b9 0f00 	cmp.w	r9, #0
 8008c02:	d020      	beq.n	8008c46 <__multiply+0x142>
 8008c04:	6829      	ldr	r1, [r5, #0]
 8008c06:	f104 0c14 	add.w	ip, r4, #20
 8008c0a:	46ae      	mov	lr, r5
 8008c0c:	f04f 0a00 	mov.w	sl, #0
 8008c10:	f8bc b000 	ldrh.w	fp, [ip]
 8008c14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c18:	fb09 220b 	mla	r2, r9, fp, r2
 8008c1c:	4492      	add	sl, r2
 8008c1e:	b289      	uxth	r1, r1
 8008c20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c24:	f84e 1b04 	str.w	r1, [lr], #4
 8008c28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c2c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c30:	0c12      	lsrs	r2, r2, #16
 8008c32:	fb09 1102 	mla	r1, r9, r2, r1
 8008c36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c3a:	4567      	cmp	r7, ip
 8008c3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c40:	d8e6      	bhi.n	8008c10 <__multiply+0x10c>
 8008c42:	9a01      	ldr	r2, [sp, #4]
 8008c44:	50a9      	str	r1, [r5, r2]
 8008c46:	3504      	adds	r5, #4
 8008c48:	e79a      	b.n	8008b80 <__multiply+0x7c>
 8008c4a:	3e01      	subs	r6, #1
 8008c4c:	e79c      	b.n	8008b88 <__multiply+0x84>
 8008c4e:	bf00      	nop
 8008c50:	0800a360 	.word	0x0800a360
 8008c54:	0800a450 	.word	0x0800a450

08008c58 <__pow5mult>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	4615      	mov	r5, r2
 8008c5e:	f012 0203 	ands.w	r2, r2, #3
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	d007      	beq.n	8008c78 <__pow5mult+0x20>
 8008c68:	4c25      	ldr	r4, [pc, #148]	; (8008d00 <__pow5mult+0xa8>)
 8008c6a:	3a01      	subs	r2, #1
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c72:	f7ff fe51 	bl	8008918 <__multadd>
 8008c76:	4607      	mov	r7, r0
 8008c78:	10ad      	asrs	r5, r5, #2
 8008c7a:	d03d      	beq.n	8008cf8 <__pow5mult+0xa0>
 8008c7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c7e:	b97c      	cbnz	r4, 8008ca0 <__pow5mult+0x48>
 8008c80:	2010      	movs	r0, #16
 8008c82:	f7ff fdbf 	bl	8008804 <malloc>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6270      	str	r0, [r6, #36]	; 0x24
 8008c8a:	b928      	cbnz	r0, 8008c98 <__pow5mult+0x40>
 8008c8c:	4b1d      	ldr	r3, [pc, #116]	; (8008d04 <__pow5mult+0xac>)
 8008c8e:	481e      	ldr	r0, [pc, #120]	; (8008d08 <__pow5mult+0xb0>)
 8008c90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c94:	f000 ff9c 	bl	8009bd0 <__assert_func>
 8008c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c9c:	6004      	str	r4, [r0, #0]
 8008c9e:	60c4      	str	r4, [r0, #12]
 8008ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ca8:	b94c      	cbnz	r4, 8008cbe <__pow5mult+0x66>
 8008caa:	f240 2171 	movw	r1, #625	; 0x271
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff ff12 	bl	8008ad8 <__i2b>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cba:	4604      	mov	r4, r0
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	f04f 0900 	mov.w	r9, #0
 8008cc2:	07eb      	lsls	r3, r5, #31
 8008cc4:	d50a      	bpl.n	8008cdc <__pow5mult+0x84>
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff ff1a 	bl	8008b04 <__multiply>
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff fdfd 	bl	80088d4 <_Bfree>
 8008cda:	4647      	mov	r7, r8
 8008cdc:	106d      	asrs	r5, r5, #1
 8008cde:	d00b      	beq.n	8008cf8 <__pow5mult+0xa0>
 8008ce0:	6820      	ldr	r0, [r4, #0]
 8008ce2:	b938      	cbnz	r0, 8008cf4 <__pow5mult+0x9c>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ff0b 	bl	8008b04 <__multiply>
 8008cee:	6020      	str	r0, [r4, #0]
 8008cf0:	f8c0 9000 	str.w	r9, [r0]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	e7e4      	b.n	8008cc2 <__pow5mult+0x6a>
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	bf00      	nop
 8008d00:	0800a5a0 	.word	0x0800a5a0
 8008d04:	0800a2ee 	.word	0x0800a2ee
 8008d08:	0800a450 	.word	0x0800a450

08008d0c <__lshift>:
 8008d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	6849      	ldr	r1, [r1, #4]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d1a:	68a3      	ldr	r3, [r4, #8]
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	4691      	mov	r9, r2
 8008d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d24:	f108 0601 	add.w	r6, r8, #1
 8008d28:	42b3      	cmp	r3, r6
 8008d2a:	db0b      	blt.n	8008d44 <__lshift+0x38>
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff fd91 	bl	8008854 <_Balloc>
 8008d32:	4605      	mov	r5, r0
 8008d34:	b948      	cbnz	r0, 8008d4a <__lshift+0x3e>
 8008d36:	4602      	mov	r2, r0
 8008d38:	4b2a      	ldr	r3, [pc, #168]	; (8008de4 <__lshift+0xd8>)
 8008d3a:	482b      	ldr	r0, [pc, #172]	; (8008de8 <__lshift+0xdc>)
 8008d3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d40:	f000 ff46 	bl	8009bd0 <__assert_func>
 8008d44:	3101      	adds	r1, #1
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	e7ee      	b.n	8008d28 <__lshift+0x1c>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f100 0114 	add.w	r1, r0, #20
 8008d50:	f100 0210 	add.w	r2, r0, #16
 8008d54:	4618      	mov	r0, r3
 8008d56:	4553      	cmp	r3, sl
 8008d58:	db37      	blt.n	8008dca <__lshift+0xbe>
 8008d5a:	6920      	ldr	r0, [r4, #16]
 8008d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d60:	f104 0314 	add.w	r3, r4, #20
 8008d64:	f019 091f 	ands.w	r9, r9, #31
 8008d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d70:	d02f      	beq.n	8008dd2 <__lshift+0xc6>
 8008d72:	f1c9 0e20 	rsb	lr, r9, #32
 8008d76:	468a      	mov	sl, r1
 8008d78:	f04f 0c00 	mov.w	ip, #0
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	fa02 f209 	lsl.w	r2, r2, r9
 8008d82:	ea42 020c 	orr.w	r2, r2, ip
 8008d86:	f84a 2b04 	str.w	r2, [sl], #4
 8008d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8e:	4298      	cmp	r0, r3
 8008d90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d94:	d8f2      	bhi.n	8008d7c <__lshift+0x70>
 8008d96:	1b03      	subs	r3, r0, r4
 8008d98:	3b15      	subs	r3, #21
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	3304      	adds	r3, #4
 8008da0:	f104 0215 	add.w	r2, r4, #21
 8008da4:	4290      	cmp	r0, r2
 8008da6:	bf38      	it	cc
 8008da8:	2304      	movcc	r3, #4
 8008daa:	f841 c003 	str.w	ip, [r1, r3]
 8008dae:	f1bc 0f00 	cmp.w	ip, #0
 8008db2:	d001      	beq.n	8008db8 <__lshift+0xac>
 8008db4:	f108 0602 	add.w	r6, r8, #2
 8008db8:	3e01      	subs	r6, #1
 8008dba:	4638      	mov	r0, r7
 8008dbc:	612e      	str	r6, [r5, #16]
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	f7ff fd88 	bl	80088d4 <_Bfree>
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dce:	3301      	adds	r3, #1
 8008dd0:	e7c1      	b.n	8008d56 <__lshift+0x4a>
 8008dd2:	3904      	subs	r1, #4
 8008dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ddc:	4298      	cmp	r0, r3
 8008dde:	d8f9      	bhi.n	8008dd4 <__lshift+0xc8>
 8008de0:	e7ea      	b.n	8008db8 <__lshift+0xac>
 8008de2:	bf00      	nop
 8008de4:	0800a360 	.word	0x0800a360
 8008de8:	0800a450 	.word	0x0800a450

08008dec <__mcmp>:
 8008dec:	b530      	push	{r4, r5, lr}
 8008dee:	6902      	ldr	r2, [r0, #16]
 8008df0:	690c      	ldr	r4, [r1, #16]
 8008df2:	1b12      	subs	r2, r2, r4
 8008df4:	d10e      	bne.n	8008e14 <__mcmp+0x28>
 8008df6:	f100 0314 	add.w	r3, r0, #20
 8008dfa:	3114      	adds	r1, #20
 8008dfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	d003      	beq.n	8008e18 <__mcmp+0x2c>
 8008e10:	d305      	bcc.n	8008e1e <__mcmp+0x32>
 8008e12:	2201      	movs	r2, #1
 8008e14:	4610      	mov	r0, r2
 8008e16:	bd30      	pop	{r4, r5, pc}
 8008e18:	4283      	cmp	r3, r0
 8008e1a:	d3f3      	bcc.n	8008e04 <__mcmp+0x18>
 8008e1c:	e7fa      	b.n	8008e14 <__mcmp+0x28>
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e22:	e7f7      	b.n	8008e14 <__mcmp+0x28>

08008e24 <__mdiff>:
 8008e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4690      	mov	r8, r2
 8008e32:	f7ff ffdb 	bl	8008dec <__mcmp>
 8008e36:	1e05      	subs	r5, r0, #0
 8008e38:	d110      	bne.n	8008e5c <__mdiff+0x38>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff fd09 	bl	8008854 <_Balloc>
 8008e42:	b930      	cbnz	r0, 8008e52 <__mdiff+0x2e>
 8008e44:	4b3a      	ldr	r3, [pc, #232]	; (8008f30 <__mdiff+0x10c>)
 8008e46:	4602      	mov	r2, r0
 8008e48:	f240 2132 	movw	r1, #562	; 0x232
 8008e4c:	4839      	ldr	r0, [pc, #228]	; (8008f34 <__mdiff+0x110>)
 8008e4e:	f000 febf 	bl	8009bd0 <__assert_func>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	bfa4      	itt	ge
 8008e5e:	4643      	movge	r3, r8
 8008e60:	46a0      	movge	r8, r4
 8008e62:	4630      	mov	r0, r6
 8008e64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e68:	bfa6      	itte	ge
 8008e6a:	461c      	movge	r4, r3
 8008e6c:	2500      	movge	r5, #0
 8008e6e:	2501      	movlt	r5, #1
 8008e70:	f7ff fcf0 	bl	8008854 <_Balloc>
 8008e74:	b920      	cbnz	r0, 8008e80 <__mdiff+0x5c>
 8008e76:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <__mdiff+0x10c>)
 8008e78:	4602      	mov	r2, r0
 8008e7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e7e:	e7e5      	b.n	8008e4c <__mdiff+0x28>
 8008e80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e84:	6926      	ldr	r6, [r4, #16]
 8008e86:	60c5      	str	r5, [r0, #12]
 8008e88:	f104 0914 	add.w	r9, r4, #20
 8008e8c:	f108 0514 	add.w	r5, r8, #20
 8008e90:	f100 0e14 	add.w	lr, r0, #20
 8008e94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e9c:	f108 0210 	add.w	r2, r8, #16
 8008ea0:	46f2      	mov	sl, lr
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008eac:	fa1f f883 	uxth.w	r8, r3
 8008eb0:	fa11 f18b 	uxtah	r1, r1, fp
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	eba1 0808 	sub.w	r8, r1, r8
 8008eba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008ec2:	fa1f f888 	uxth.w	r8, r8
 8008ec6:	1419      	asrs	r1, r3, #16
 8008ec8:	454e      	cmp	r6, r9
 8008eca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ece:	f84a 3b04 	str.w	r3, [sl], #4
 8008ed2:	d8e7      	bhi.n	8008ea4 <__mdiff+0x80>
 8008ed4:	1b33      	subs	r3, r6, r4
 8008ed6:	3b15      	subs	r3, #21
 8008ed8:	f023 0303 	bic.w	r3, r3, #3
 8008edc:	3304      	adds	r3, #4
 8008ede:	3415      	adds	r4, #21
 8008ee0:	42a6      	cmp	r6, r4
 8008ee2:	bf38      	it	cc
 8008ee4:	2304      	movcc	r3, #4
 8008ee6:	441d      	add	r5, r3
 8008ee8:	4473      	add	r3, lr
 8008eea:	469e      	mov	lr, r3
 8008eec:	462e      	mov	r6, r5
 8008eee:	4566      	cmp	r6, ip
 8008ef0:	d30e      	bcc.n	8008f10 <__mdiff+0xec>
 8008ef2:	f10c 0203 	add.w	r2, ip, #3
 8008ef6:	1b52      	subs	r2, r2, r5
 8008ef8:	f022 0203 	bic.w	r2, r2, #3
 8008efc:	3d03      	subs	r5, #3
 8008efe:	45ac      	cmp	ip, r5
 8008f00:	bf38      	it	cc
 8008f02:	2200      	movcc	r2, #0
 8008f04:	441a      	add	r2, r3
 8008f06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f0a:	b17b      	cbz	r3, 8008f2c <__mdiff+0x108>
 8008f0c:	6107      	str	r7, [r0, #16]
 8008f0e:	e7a3      	b.n	8008e58 <__mdiff+0x34>
 8008f10:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f14:	fa11 f288 	uxtah	r2, r1, r8
 8008f18:	1414      	asrs	r4, r2, #16
 8008f1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f1e:	b292      	uxth	r2, r2
 8008f20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f24:	f84e 2b04 	str.w	r2, [lr], #4
 8008f28:	1421      	asrs	r1, r4, #16
 8008f2a:	e7e0      	b.n	8008eee <__mdiff+0xca>
 8008f2c:	3f01      	subs	r7, #1
 8008f2e:	e7ea      	b.n	8008f06 <__mdiff+0xe2>
 8008f30:	0800a360 	.word	0x0800a360
 8008f34:	0800a450 	.word	0x0800a450

08008f38 <__ulp>:
 8008f38:	b082      	sub	sp, #8
 8008f3a:	ed8d 0b00 	vstr	d0, [sp]
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	4912      	ldr	r1, [pc, #72]	; (8008f8c <__ulp+0x54>)
 8008f42:	4019      	ands	r1, r3
 8008f44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	dd05      	ble.n	8008f58 <__ulp+0x20>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	ec43 2b10 	vmov	d0, r2, r3
 8008f54:	b002      	add	sp, #8
 8008f56:	4770      	bx	lr
 8008f58:	4249      	negs	r1, r1
 8008f5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008f5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008f62:	f04f 0200 	mov.w	r2, #0
 8008f66:	f04f 0300 	mov.w	r3, #0
 8008f6a:	da04      	bge.n	8008f76 <__ulp+0x3e>
 8008f6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f70:	fa41 f300 	asr.w	r3, r1, r0
 8008f74:	e7ec      	b.n	8008f50 <__ulp+0x18>
 8008f76:	f1a0 0114 	sub.w	r1, r0, #20
 8008f7a:	291e      	cmp	r1, #30
 8008f7c:	bfda      	itte	le
 8008f7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008f82:	fa20 f101 	lsrle.w	r1, r0, r1
 8008f86:	2101      	movgt	r1, #1
 8008f88:	460a      	mov	r2, r1
 8008f8a:	e7e1      	b.n	8008f50 <__ulp+0x18>
 8008f8c:	7ff00000 	.word	0x7ff00000

08008f90 <__b2d>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	6905      	ldr	r5, [r0, #16]
 8008f94:	f100 0714 	add.w	r7, r0, #20
 8008f98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008f9c:	1f2e      	subs	r6, r5, #4
 8008f9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fd48 	bl	8008a38 <__hi0bits>
 8008fa8:	f1c0 0320 	rsb	r3, r0, #32
 8008fac:	280a      	cmp	r0, #10
 8008fae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800902c <__b2d+0x9c>
 8008fb2:	600b      	str	r3, [r1, #0]
 8008fb4:	dc14      	bgt.n	8008fe0 <__b2d+0x50>
 8008fb6:	f1c0 0e0b 	rsb	lr, r0, #11
 8008fba:	fa24 f10e 	lsr.w	r1, r4, lr
 8008fbe:	42b7      	cmp	r7, r6
 8008fc0:	ea41 030c 	orr.w	r3, r1, ip
 8008fc4:	bf34      	ite	cc
 8008fc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fca:	2100      	movcs	r1, #0
 8008fcc:	3015      	adds	r0, #21
 8008fce:	fa04 f000 	lsl.w	r0, r4, r0
 8008fd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008fd6:	ea40 0201 	orr.w	r2, r0, r1
 8008fda:	ec43 2b10 	vmov	d0, r2, r3
 8008fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe0:	42b7      	cmp	r7, r6
 8008fe2:	bf3a      	itte	cc
 8008fe4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008fe8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008fec:	2100      	movcs	r1, #0
 8008fee:	380b      	subs	r0, #11
 8008ff0:	d017      	beq.n	8009022 <__b2d+0x92>
 8008ff2:	f1c0 0c20 	rsb	ip, r0, #32
 8008ff6:	fa04 f500 	lsl.w	r5, r4, r0
 8008ffa:	42be      	cmp	r6, r7
 8008ffc:	fa21 f40c 	lsr.w	r4, r1, ip
 8009000:	ea45 0504 	orr.w	r5, r5, r4
 8009004:	bf8c      	ite	hi
 8009006:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800900a:	2400      	movls	r4, #0
 800900c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009010:	fa01 f000 	lsl.w	r0, r1, r0
 8009014:	fa24 f40c 	lsr.w	r4, r4, ip
 8009018:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800901c:	ea40 0204 	orr.w	r2, r0, r4
 8009020:	e7db      	b.n	8008fda <__b2d+0x4a>
 8009022:	ea44 030c 	orr.w	r3, r4, ip
 8009026:	460a      	mov	r2, r1
 8009028:	e7d7      	b.n	8008fda <__b2d+0x4a>
 800902a:	bf00      	nop
 800902c:	3ff00000 	.word	0x3ff00000

08009030 <__d2b>:
 8009030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4689      	mov	r9, r1
 8009036:	2101      	movs	r1, #1
 8009038:	ec57 6b10 	vmov	r6, r7, d0
 800903c:	4690      	mov	r8, r2
 800903e:	f7ff fc09 	bl	8008854 <_Balloc>
 8009042:	4604      	mov	r4, r0
 8009044:	b930      	cbnz	r0, 8009054 <__d2b+0x24>
 8009046:	4602      	mov	r2, r0
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <__d2b+0xb0>)
 800904a:	4826      	ldr	r0, [pc, #152]	; (80090e4 <__d2b+0xb4>)
 800904c:	f240 310a 	movw	r1, #778	; 0x30a
 8009050:	f000 fdbe 	bl	8009bd0 <__assert_func>
 8009054:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800905c:	bb35      	cbnz	r5, 80090ac <__d2b+0x7c>
 800905e:	2e00      	cmp	r6, #0
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	d028      	beq.n	80090b6 <__d2b+0x86>
 8009064:	4668      	mov	r0, sp
 8009066:	9600      	str	r6, [sp, #0]
 8009068:	f7ff fd06 	bl	8008a78 <__lo0bits>
 800906c:	9900      	ldr	r1, [sp, #0]
 800906e:	b300      	cbz	r0, 80090b2 <__d2b+0x82>
 8009070:	9a01      	ldr	r2, [sp, #4]
 8009072:	f1c0 0320 	rsb	r3, r0, #32
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	430b      	orrs	r3, r1
 800907c:	40c2      	lsrs	r2, r0
 800907e:	6163      	str	r3, [r4, #20]
 8009080:	9201      	str	r2, [sp, #4]
 8009082:	9b01      	ldr	r3, [sp, #4]
 8009084:	61a3      	str	r3, [r4, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	bf14      	ite	ne
 800908a:	2202      	movne	r2, #2
 800908c:	2201      	moveq	r2, #1
 800908e:	6122      	str	r2, [r4, #16]
 8009090:	b1d5      	cbz	r5, 80090c8 <__d2b+0x98>
 8009092:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009096:	4405      	add	r5, r0
 8009098:	f8c9 5000 	str.w	r5, [r9]
 800909c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090a0:	f8c8 0000 	str.w	r0, [r8]
 80090a4:	4620      	mov	r0, r4
 80090a6:	b003      	add	sp, #12
 80090a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090b0:	e7d5      	b.n	800905e <__d2b+0x2e>
 80090b2:	6161      	str	r1, [r4, #20]
 80090b4:	e7e5      	b.n	8009082 <__d2b+0x52>
 80090b6:	a801      	add	r0, sp, #4
 80090b8:	f7ff fcde 	bl	8008a78 <__lo0bits>
 80090bc:	9b01      	ldr	r3, [sp, #4]
 80090be:	6163      	str	r3, [r4, #20]
 80090c0:	2201      	movs	r2, #1
 80090c2:	6122      	str	r2, [r4, #16]
 80090c4:	3020      	adds	r0, #32
 80090c6:	e7e3      	b.n	8009090 <__d2b+0x60>
 80090c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090d0:	f8c9 0000 	str.w	r0, [r9]
 80090d4:	6918      	ldr	r0, [r3, #16]
 80090d6:	f7ff fcaf 	bl	8008a38 <__hi0bits>
 80090da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090de:	e7df      	b.n	80090a0 <__d2b+0x70>
 80090e0:	0800a360 	.word	0x0800a360
 80090e4:	0800a450 	.word	0x0800a450

080090e8 <__ratio>:
 80090e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	4688      	mov	r8, r1
 80090ee:	4669      	mov	r1, sp
 80090f0:	4681      	mov	r9, r0
 80090f2:	f7ff ff4d 	bl	8008f90 <__b2d>
 80090f6:	a901      	add	r1, sp, #4
 80090f8:	4640      	mov	r0, r8
 80090fa:	ec55 4b10 	vmov	r4, r5, d0
 80090fe:	f7ff ff47 	bl	8008f90 <__b2d>
 8009102:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009106:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800910a:	eba3 0c02 	sub.w	ip, r3, r2
 800910e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009112:	1a9b      	subs	r3, r3, r2
 8009114:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009118:	ec51 0b10 	vmov	r0, r1, d0
 800911c:	2b00      	cmp	r3, #0
 800911e:	bfd6      	itet	le
 8009120:	460a      	movle	r2, r1
 8009122:	462a      	movgt	r2, r5
 8009124:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009128:	468b      	mov	fp, r1
 800912a:	462f      	mov	r7, r5
 800912c:	bfd4      	ite	le
 800912e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009132:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009136:	4620      	mov	r0, r4
 8009138:	ee10 2a10 	vmov	r2, s0
 800913c:	465b      	mov	r3, fp
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fb84 	bl	800084c <__aeabi_ddiv>
 8009144:	ec41 0b10 	vmov	d0, r0, r1
 8009148:	b003      	add	sp, #12
 800914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800914e <__copybits>:
 800914e:	3901      	subs	r1, #1
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	1149      	asrs	r1, r1, #5
 8009154:	6914      	ldr	r4, [r2, #16]
 8009156:	3101      	adds	r1, #1
 8009158:	f102 0314 	add.w	r3, r2, #20
 800915c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009160:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009164:	1f05      	subs	r5, r0, #4
 8009166:	42a3      	cmp	r3, r4
 8009168:	d30c      	bcc.n	8009184 <__copybits+0x36>
 800916a:	1aa3      	subs	r3, r4, r2
 800916c:	3b11      	subs	r3, #17
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	3211      	adds	r2, #17
 8009174:	42a2      	cmp	r2, r4
 8009176:	bf88      	it	hi
 8009178:	2300      	movhi	r3, #0
 800917a:	4418      	add	r0, r3
 800917c:	2300      	movs	r3, #0
 800917e:	4288      	cmp	r0, r1
 8009180:	d305      	bcc.n	800918e <__copybits+0x40>
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	f853 6b04 	ldr.w	r6, [r3], #4
 8009188:	f845 6f04 	str.w	r6, [r5, #4]!
 800918c:	e7eb      	b.n	8009166 <__copybits+0x18>
 800918e:	f840 3b04 	str.w	r3, [r0], #4
 8009192:	e7f4      	b.n	800917e <__copybits+0x30>

08009194 <__any_on>:
 8009194:	f100 0214 	add.w	r2, r0, #20
 8009198:	6900      	ldr	r0, [r0, #16]
 800919a:	114b      	asrs	r3, r1, #5
 800919c:	4298      	cmp	r0, r3
 800919e:	b510      	push	{r4, lr}
 80091a0:	db11      	blt.n	80091c6 <__any_on+0x32>
 80091a2:	dd0a      	ble.n	80091ba <__any_on+0x26>
 80091a4:	f011 011f 	ands.w	r1, r1, #31
 80091a8:	d007      	beq.n	80091ba <__any_on+0x26>
 80091aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091ae:	fa24 f001 	lsr.w	r0, r4, r1
 80091b2:	fa00 f101 	lsl.w	r1, r0, r1
 80091b6:	428c      	cmp	r4, r1
 80091b8:	d10b      	bne.n	80091d2 <__any_on+0x3e>
 80091ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091be:	4293      	cmp	r3, r2
 80091c0:	d803      	bhi.n	80091ca <__any_on+0x36>
 80091c2:	2000      	movs	r0, #0
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	4603      	mov	r3, r0
 80091c8:	e7f7      	b.n	80091ba <__any_on+0x26>
 80091ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d0f5      	beq.n	80091be <__any_on+0x2a>
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7f6      	b.n	80091c4 <__any_on+0x30>

080091d6 <_calloc_r>:
 80091d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091d8:	fba1 2402 	umull	r2, r4, r1, r2
 80091dc:	b94c      	cbnz	r4, 80091f2 <_calloc_r+0x1c>
 80091de:	4611      	mov	r1, r2
 80091e0:	9201      	str	r2, [sp, #4]
 80091e2:	f000 f87b 	bl	80092dc <_malloc_r>
 80091e6:	9a01      	ldr	r2, [sp, #4]
 80091e8:	4605      	mov	r5, r0
 80091ea:	b930      	cbnz	r0, 80091fa <_calloc_r+0x24>
 80091ec:	4628      	mov	r0, r5
 80091ee:	b003      	add	sp, #12
 80091f0:	bd30      	pop	{r4, r5, pc}
 80091f2:	220c      	movs	r2, #12
 80091f4:	6002      	str	r2, [r0, #0]
 80091f6:	2500      	movs	r5, #0
 80091f8:	e7f8      	b.n	80091ec <_calloc_r+0x16>
 80091fa:	4621      	mov	r1, r4
 80091fc:	f7fc fab0 	bl	8005760 <memset>
 8009200:	e7f4      	b.n	80091ec <_calloc_r+0x16>
	...

08009204 <_free_r>:
 8009204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009206:	2900      	cmp	r1, #0
 8009208:	d044      	beq.n	8009294 <_free_r+0x90>
 800920a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920e:	9001      	str	r0, [sp, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f1a1 0404 	sub.w	r4, r1, #4
 8009216:	bfb8      	it	lt
 8009218:	18e4      	addlt	r4, r4, r3
 800921a:	f000 fe6d 	bl	8009ef8 <__malloc_lock>
 800921e:	4a1e      	ldr	r2, [pc, #120]	; (8009298 <_free_r+0x94>)
 8009220:	9801      	ldr	r0, [sp, #4]
 8009222:	6813      	ldr	r3, [r2, #0]
 8009224:	b933      	cbnz	r3, 8009234 <_free_r+0x30>
 8009226:	6063      	str	r3, [r4, #4]
 8009228:	6014      	str	r4, [r2, #0]
 800922a:	b003      	add	sp, #12
 800922c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009230:	f000 be68 	b.w	8009f04 <__malloc_unlock>
 8009234:	42a3      	cmp	r3, r4
 8009236:	d908      	bls.n	800924a <_free_r+0x46>
 8009238:	6825      	ldr	r5, [r4, #0]
 800923a:	1961      	adds	r1, r4, r5
 800923c:	428b      	cmp	r3, r1
 800923e:	bf01      	itttt	eq
 8009240:	6819      	ldreq	r1, [r3, #0]
 8009242:	685b      	ldreq	r3, [r3, #4]
 8009244:	1949      	addeq	r1, r1, r5
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	e7ed      	b.n	8009226 <_free_r+0x22>
 800924a:	461a      	mov	r2, r3
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	b10b      	cbz	r3, 8009254 <_free_r+0x50>
 8009250:	42a3      	cmp	r3, r4
 8009252:	d9fa      	bls.n	800924a <_free_r+0x46>
 8009254:	6811      	ldr	r1, [r2, #0]
 8009256:	1855      	adds	r5, r2, r1
 8009258:	42a5      	cmp	r5, r4
 800925a:	d10b      	bne.n	8009274 <_free_r+0x70>
 800925c:	6824      	ldr	r4, [r4, #0]
 800925e:	4421      	add	r1, r4
 8009260:	1854      	adds	r4, r2, r1
 8009262:	42a3      	cmp	r3, r4
 8009264:	6011      	str	r1, [r2, #0]
 8009266:	d1e0      	bne.n	800922a <_free_r+0x26>
 8009268:	681c      	ldr	r4, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	6053      	str	r3, [r2, #4]
 800926e:	4421      	add	r1, r4
 8009270:	6011      	str	r1, [r2, #0]
 8009272:	e7da      	b.n	800922a <_free_r+0x26>
 8009274:	d902      	bls.n	800927c <_free_r+0x78>
 8009276:	230c      	movs	r3, #12
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	e7d6      	b.n	800922a <_free_r+0x26>
 800927c:	6825      	ldr	r5, [r4, #0]
 800927e:	1961      	adds	r1, r4, r5
 8009280:	428b      	cmp	r3, r1
 8009282:	bf04      	itt	eq
 8009284:	6819      	ldreq	r1, [r3, #0]
 8009286:	685b      	ldreq	r3, [r3, #4]
 8009288:	6063      	str	r3, [r4, #4]
 800928a:	bf04      	itt	eq
 800928c:	1949      	addeq	r1, r1, r5
 800928e:	6021      	streq	r1, [r4, #0]
 8009290:	6054      	str	r4, [r2, #4]
 8009292:	e7ca      	b.n	800922a <_free_r+0x26>
 8009294:	b003      	add	sp, #12
 8009296:	bd30      	pop	{r4, r5, pc}
 8009298:	20000320 	.word	0x20000320

0800929c <sbrk_aligned>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4e0e      	ldr	r6, [pc, #56]	; (80092d8 <sbrk_aligned+0x3c>)
 80092a0:	460c      	mov	r4, r1
 80092a2:	6831      	ldr	r1, [r6, #0]
 80092a4:	4605      	mov	r5, r0
 80092a6:	b911      	cbnz	r1, 80092ae <sbrk_aligned+0x12>
 80092a8:	f000 fb4a 	bl	8009940 <_sbrk_r>
 80092ac:	6030      	str	r0, [r6, #0]
 80092ae:	4621      	mov	r1, r4
 80092b0:	4628      	mov	r0, r5
 80092b2:	f000 fb45 	bl	8009940 <_sbrk_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d00a      	beq.n	80092d0 <sbrk_aligned+0x34>
 80092ba:	1cc4      	adds	r4, r0, #3
 80092bc:	f024 0403 	bic.w	r4, r4, #3
 80092c0:	42a0      	cmp	r0, r4
 80092c2:	d007      	beq.n	80092d4 <sbrk_aligned+0x38>
 80092c4:	1a21      	subs	r1, r4, r0
 80092c6:	4628      	mov	r0, r5
 80092c8:	f000 fb3a 	bl	8009940 <_sbrk_r>
 80092cc:	3001      	adds	r0, #1
 80092ce:	d101      	bne.n	80092d4 <sbrk_aligned+0x38>
 80092d0:	f04f 34ff 	mov.w	r4, #4294967295
 80092d4:	4620      	mov	r0, r4
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	20000324 	.word	0x20000324

080092dc <_malloc_r>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	1ccd      	adds	r5, r1, #3
 80092e2:	f025 0503 	bic.w	r5, r5, #3
 80092e6:	3508      	adds	r5, #8
 80092e8:	2d0c      	cmp	r5, #12
 80092ea:	bf38      	it	cc
 80092ec:	250c      	movcc	r5, #12
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	4607      	mov	r7, r0
 80092f2:	db01      	blt.n	80092f8 <_malloc_r+0x1c>
 80092f4:	42a9      	cmp	r1, r5
 80092f6:	d905      	bls.n	8009304 <_malloc_r+0x28>
 80092f8:	230c      	movs	r3, #12
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	2600      	movs	r6, #0
 80092fe:	4630      	mov	r0, r6
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	4e2e      	ldr	r6, [pc, #184]	; (80093c0 <_malloc_r+0xe4>)
 8009306:	f000 fdf7 	bl	8009ef8 <__malloc_lock>
 800930a:	6833      	ldr	r3, [r6, #0]
 800930c:	461c      	mov	r4, r3
 800930e:	bb34      	cbnz	r4, 800935e <_malloc_r+0x82>
 8009310:	4629      	mov	r1, r5
 8009312:	4638      	mov	r0, r7
 8009314:	f7ff ffc2 	bl	800929c <sbrk_aligned>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	4604      	mov	r4, r0
 800931c:	d14d      	bne.n	80093ba <_malloc_r+0xde>
 800931e:	6834      	ldr	r4, [r6, #0]
 8009320:	4626      	mov	r6, r4
 8009322:	2e00      	cmp	r6, #0
 8009324:	d140      	bne.n	80093a8 <_malloc_r+0xcc>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	4631      	mov	r1, r6
 800932a:	4638      	mov	r0, r7
 800932c:	eb04 0803 	add.w	r8, r4, r3
 8009330:	f000 fb06 	bl	8009940 <_sbrk_r>
 8009334:	4580      	cmp	r8, r0
 8009336:	d13a      	bne.n	80093ae <_malloc_r+0xd2>
 8009338:	6821      	ldr	r1, [r4, #0]
 800933a:	3503      	adds	r5, #3
 800933c:	1a6d      	subs	r5, r5, r1
 800933e:	f025 0503 	bic.w	r5, r5, #3
 8009342:	3508      	adds	r5, #8
 8009344:	2d0c      	cmp	r5, #12
 8009346:	bf38      	it	cc
 8009348:	250c      	movcc	r5, #12
 800934a:	4629      	mov	r1, r5
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff ffa5 	bl	800929c <sbrk_aligned>
 8009352:	3001      	adds	r0, #1
 8009354:	d02b      	beq.n	80093ae <_malloc_r+0xd2>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	442b      	add	r3, r5
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	e00e      	b.n	800937c <_malloc_r+0xa0>
 800935e:	6822      	ldr	r2, [r4, #0]
 8009360:	1b52      	subs	r2, r2, r5
 8009362:	d41e      	bmi.n	80093a2 <_malloc_r+0xc6>
 8009364:	2a0b      	cmp	r2, #11
 8009366:	d916      	bls.n	8009396 <_malloc_r+0xba>
 8009368:	1961      	adds	r1, r4, r5
 800936a:	42a3      	cmp	r3, r4
 800936c:	6025      	str	r5, [r4, #0]
 800936e:	bf18      	it	ne
 8009370:	6059      	strne	r1, [r3, #4]
 8009372:	6863      	ldr	r3, [r4, #4]
 8009374:	bf08      	it	eq
 8009376:	6031      	streq	r1, [r6, #0]
 8009378:	5162      	str	r2, [r4, r5]
 800937a:	604b      	str	r3, [r1, #4]
 800937c:	4638      	mov	r0, r7
 800937e:	f104 060b 	add.w	r6, r4, #11
 8009382:	f000 fdbf 	bl	8009f04 <__malloc_unlock>
 8009386:	f026 0607 	bic.w	r6, r6, #7
 800938a:	1d23      	adds	r3, r4, #4
 800938c:	1af2      	subs	r2, r6, r3
 800938e:	d0b6      	beq.n	80092fe <_malloc_r+0x22>
 8009390:	1b9b      	subs	r3, r3, r6
 8009392:	50a3      	str	r3, [r4, r2]
 8009394:	e7b3      	b.n	80092fe <_malloc_r+0x22>
 8009396:	6862      	ldr	r2, [r4, #4]
 8009398:	42a3      	cmp	r3, r4
 800939a:	bf0c      	ite	eq
 800939c:	6032      	streq	r2, [r6, #0]
 800939e:	605a      	strne	r2, [r3, #4]
 80093a0:	e7ec      	b.n	800937c <_malloc_r+0xa0>
 80093a2:	4623      	mov	r3, r4
 80093a4:	6864      	ldr	r4, [r4, #4]
 80093a6:	e7b2      	b.n	800930e <_malloc_r+0x32>
 80093a8:	4634      	mov	r4, r6
 80093aa:	6876      	ldr	r6, [r6, #4]
 80093ac:	e7b9      	b.n	8009322 <_malloc_r+0x46>
 80093ae:	230c      	movs	r3, #12
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	4638      	mov	r0, r7
 80093b4:	f000 fda6 	bl	8009f04 <__malloc_unlock>
 80093b8:	e7a1      	b.n	80092fe <_malloc_r+0x22>
 80093ba:	6025      	str	r5, [r4, #0]
 80093bc:	e7de      	b.n	800937c <_malloc_r+0xa0>
 80093be:	bf00      	nop
 80093c0:	20000320 	.word	0x20000320

080093c4 <__ssputs_r>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	688e      	ldr	r6, [r1, #8]
 80093ca:	429e      	cmp	r6, r3
 80093cc:	4682      	mov	sl, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4690      	mov	r8, r2
 80093d2:	461f      	mov	r7, r3
 80093d4:	d838      	bhi.n	8009448 <__ssputs_r+0x84>
 80093d6:	898a      	ldrh	r2, [r1, #12]
 80093d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093dc:	d032      	beq.n	8009444 <__ssputs_r+0x80>
 80093de:	6825      	ldr	r5, [r4, #0]
 80093e0:	6909      	ldr	r1, [r1, #16]
 80093e2:	eba5 0901 	sub.w	r9, r5, r1
 80093e6:	6965      	ldr	r5, [r4, #20]
 80093e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093f0:	3301      	adds	r3, #1
 80093f2:	444b      	add	r3, r9
 80093f4:	106d      	asrs	r5, r5, #1
 80093f6:	429d      	cmp	r5, r3
 80093f8:	bf38      	it	cc
 80093fa:	461d      	movcc	r5, r3
 80093fc:	0553      	lsls	r3, r2, #21
 80093fe:	d531      	bpl.n	8009464 <__ssputs_r+0xa0>
 8009400:	4629      	mov	r1, r5
 8009402:	f7ff ff6b 	bl	80092dc <_malloc_r>
 8009406:	4606      	mov	r6, r0
 8009408:	b950      	cbnz	r0, 8009420 <__ssputs_r+0x5c>
 800940a:	230c      	movs	r3, #12
 800940c:	f8ca 3000 	str.w	r3, [sl]
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	6921      	ldr	r1, [r4, #16]
 8009422:	464a      	mov	r2, r9
 8009424:	f7ff fa08 	bl	8008838 <memcpy>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800942e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	6126      	str	r6, [r4, #16]
 8009436:	6165      	str	r5, [r4, #20]
 8009438:	444e      	add	r6, r9
 800943a:	eba5 0509 	sub.w	r5, r5, r9
 800943e:	6026      	str	r6, [r4, #0]
 8009440:	60a5      	str	r5, [r4, #8]
 8009442:	463e      	mov	r6, r7
 8009444:	42be      	cmp	r6, r7
 8009446:	d900      	bls.n	800944a <__ssputs_r+0x86>
 8009448:	463e      	mov	r6, r7
 800944a:	6820      	ldr	r0, [r4, #0]
 800944c:	4632      	mov	r2, r6
 800944e:	4641      	mov	r1, r8
 8009450:	f000 fd38 	bl	8009ec4 <memmove>
 8009454:	68a3      	ldr	r3, [r4, #8]
 8009456:	1b9b      	subs	r3, r3, r6
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	4433      	add	r3, r6
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	2000      	movs	r0, #0
 8009462:	e7db      	b.n	800941c <__ssputs_r+0x58>
 8009464:	462a      	mov	r2, r5
 8009466:	f000 fd53 	bl	8009f10 <_realloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d1e1      	bne.n	8009434 <__ssputs_r+0x70>
 8009470:	6921      	ldr	r1, [r4, #16]
 8009472:	4650      	mov	r0, sl
 8009474:	f7ff fec6 	bl	8009204 <_free_r>
 8009478:	e7c7      	b.n	800940a <__ssputs_r+0x46>
	...

0800947c <_svfiprintf_r>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	4698      	mov	r8, r3
 8009482:	898b      	ldrh	r3, [r1, #12]
 8009484:	061b      	lsls	r3, r3, #24
 8009486:	b09d      	sub	sp, #116	; 0x74
 8009488:	4607      	mov	r7, r0
 800948a:	460d      	mov	r5, r1
 800948c:	4614      	mov	r4, r2
 800948e:	d50e      	bpl.n	80094ae <_svfiprintf_r+0x32>
 8009490:	690b      	ldr	r3, [r1, #16]
 8009492:	b963      	cbnz	r3, 80094ae <_svfiprintf_r+0x32>
 8009494:	2140      	movs	r1, #64	; 0x40
 8009496:	f7ff ff21 	bl	80092dc <_malloc_r>
 800949a:	6028      	str	r0, [r5, #0]
 800949c:	6128      	str	r0, [r5, #16]
 800949e:	b920      	cbnz	r0, 80094aa <_svfiprintf_r+0x2e>
 80094a0:	230c      	movs	r3, #12
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295
 80094a8:	e0d1      	b.n	800964e <_svfiprintf_r+0x1d2>
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	616b      	str	r3, [r5, #20]
 80094ae:	2300      	movs	r3, #0
 80094b0:	9309      	str	r3, [sp, #36]	; 0x24
 80094b2:	2320      	movs	r3, #32
 80094b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80094bc:	2330      	movs	r3, #48	; 0x30
 80094be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009668 <_svfiprintf_r+0x1ec>
 80094c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c6:	f04f 0901 	mov.w	r9, #1
 80094ca:	4623      	mov	r3, r4
 80094cc:	469a      	mov	sl, r3
 80094ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d2:	b10a      	cbz	r2, 80094d8 <_svfiprintf_r+0x5c>
 80094d4:	2a25      	cmp	r2, #37	; 0x25
 80094d6:	d1f9      	bne.n	80094cc <_svfiprintf_r+0x50>
 80094d8:	ebba 0b04 	subs.w	fp, sl, r4
 80094dc:	d00b      	beq.n	80094f6 <_svfiprintf_r+0x7a>
 80094de:	465b      	mov	r3, fp
 80094e0:	4622      	mov	r2, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ff6d 	bl	80093c4 <__ssputs_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	f000 80aa 	beq.w	8009644 <_svfiprintf_r+0x1c8>
 80094f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f2:	445a      	add	r2, fp
 80094f4:	9209      	str	r2, [sp, #36]	; 0x24
 80094f6:	f89a 3000 	ldrb.w	r3, [sl]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80a2 	beq.w	8009644 <_svfiprintf_r+0x1c8>
 8009500:	2300      	movs	r3, #0
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800950a:	f10a 0a01 	add.w	sl, sl, #1
 800950e:	9304      	str	r3, [sp, #16]
 8009510:	9307      	str	r3, [sp, #28]
 8009512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009516:	931a      	str	r3, [sp, #104]	; 0x68
 8009518:	4654      	mov	r4, sl
 800951a:	2205      	movs	r2, #5
 800951c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009520:	4851      	ldr	r0, [pc, #324]	; (8009668 <_svfiprintf_r+0x1ec>)
 8009522:	f7f6 fe5d 	bl	80001e0 <memchr>
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	b9d8      	cbnz	r0, 8009562 <_svfiprintf_r+0xe6>
 800952a:	06d0      	lsls	r0, r2, #27
 800952c:	bf44      	itt	mi
 800952e:	2320      	movmi	r3, #32
 8009530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009534:	0711      	lsls	r1, r2, #28
 8009536:	bf44      	itt	mi
 8009538:	232b      	movmi	r3, #43	; 0x2b
 800953a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953e:	f89a 3000 	ldrb.w	r3, [sl]
 8009542:	2b2a      	cmp	r3, #42	; 0x2a
 8009544:	d015      	beq.n	8009572 <_svfiprintf_r+0xf6>
 8009546:	9a07      	ldr	r2, [sp, #28]
 8009548:	4654      	mov	r4, sl
 800954a:	2000      	movs	r0, #0
 800954c:	f04f 0c0a 	mov.w	ip, #10
 8009550:	4621      	mov	r1, r4
 8009552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009556:	3b30      	subs	r3, #48	; 0x30
 8009558:	2b09      	cmp	r3, #9
 800955a:	d94e      	bls.n	80095fa <_svfiprintf_r+0x17e>
 800955c:	b1b0      	cbz	r0, 800958c <_svfiprintf_r+0x110>
 800955e:	9207      	str	r2, [sp, #28]
 8009560:	e014      	b.n	800958c <_svfiprintf_r+0x110>
 8009562:	eba0 0308 	sub.w	r3, r0, r8
 8009566:	fa09 f303 	lsl.w	r3, r9, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	46a2      	mov	sl, r4
 8009570:	e7d2      	b.n	8009518 <_svfiprintf_r+0x9c>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	1d19      	adds	r1, r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	9103      	str	r1, [sp, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	bfbb      	ittet	lt
 800957e:	425b      	neglt	r3, r3
 8009580:	f042 0202 	orrlt.w	r2, r2, #2
 8009584:	9307      	strge	r3, [sp, #28]
 8009586:	9307      	strlt	r3, [sp, #28]
 8009588:	bfb8      	it	lt
 800958a:	9204      	strlt	r2, [sp, #16]
 800958c:	7823      	ldrb	r3, [r4, #0]
 800958e:	2b2e      	cmp	r3, #46	; 0x2e
 8009590:	d10c      	bne.n	80095ac <_svfiprintf_r+0x130>
 8009592:	7863      	ldrb	r3, [r4, #1]
 8009594:	2b2a      	cmp	r3, #42	; 0x2a
 8009596:	d135      	bne.n	8009604 <_svfiprintf_r+0x188>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	9203      	str	r2, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfb8      	it	lt
 80095a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a8:	3402      	adds	r4, #2
 80095aa:	9305      	str	r3, [sp, #20]
 80095ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009678 <_svfiprintf_r+0x1fc>
 80095b0:	7821      	ldrb	r1, [r4, #0]
 80095b2:	2203      	movs	r2, #3
 80095b4:	4650      	mov	r0, sl
 80095b6:	f7f6 fe13 	bl	80001e0 <memchr>
 80095ba:	b140      	cbz	r0, 80095ce <_svfiprintf_r+0x152>
 80095bc:	2340      	movs	r3, #64	; 0x40
 80095be:	eba0 000a 	sub.w	r0, r0, sl
 80095c2:	fa03 f000 	lsl.w	r0, r3, r0
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	4303      	orrs	r3, r0
 80095ca:	3401      	adds	r4, #1
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	4826      	ldr	r0, [pc, #152]	; (800966c <_svfiprintf_r+0x1f0>)
 80095d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d8:	2206      	movs	r2, #6
 80095da:	f7f6 fe01 	bl	80001e0 <memchr>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d038      	beq.n	8009654 <_svfiprintf_r+0x1d8>
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <_svfiprintf_r+0x1f4>)
 80095e4:	bb1b      	cbnz	r3, 800962e <_svfiprintf_r+0x1b2>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	3308      	adds	r3, #8
 80095f0:	9303      	str	r3, [sp, #12]
 80095f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f4:	4433      	add	r3, r6
 80095f6:	9309      	str	r3, [sp, #36]	; 0x24
 80095f8:	e767      	b.n	80094ca <_svfiprintf_r+0x4e>
 80095fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fe:	460c      	mov	r4, r1
 8009600:	2001      	movs	r0, #1
 8009602:	e7a5      	b.n	8009550 <_svfiprintf_r+0xd4>
 8009604:	2300      	movs	r3, #0
 8009606:	3401      	adds	r4, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	4619      	mov	r1, r3
 800960c:	f04f 0c0a 	mov.w	ip, #10
 8009610:	4620      	mov	r0, r4
 8009612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009616:	3a30      	subs	r2, #48	; 0x30
 8009618:	2a09      	cmp	r2, #9
 800961a:	d903      	bls.n	8009624 <_svfiprintf_r+0x1a8>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0c5      	beq.n	80095ac <_svfiprintf_r+0x130>
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	e7c3      	b.n	80095ac <_svfiprintf_r+0x130>
 8009624:	fb0c 2101 	mla	r1, ip, r1, r2
 8009628:	4604      	mov	r4, r0
 800962a:	2301      	movs	r3, #1
 800962c:	e7f0      	b.n	8009610 <_svfiprintf_r+0x194>
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	462a      	mov	r2, r5
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <_svfiprintf_r+0x1f8>)
 8009636:	a904      	add	r1, sp, #16
 8009638:	4638      	mov	r0, r7
 800963a:	f7fc f939 	bl	80058b0 <_printf_float>
 800963e:	1c42      	adds	r2, r0, #1
 8009640:	4606      	mov	r6, r0
 8009642:	d1d6      	bne.n	80095f2 <_svfiprintf_r+0x176>
 8009644:	89ab      	ldrh	r3, [r5, #12]
 8009646:	065b      	lsls	r3, r3, #25
 8009648:	f53f af2c 	bmi.w	80094a4 <_svfiprintf_r+0x28>
 800964c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800964e:	b01d      	add	sp, #116	; 0x74
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	ab03      	add	r3, sp, #12
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	462a      	mov	r2, r5
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <_svfiprintf_r+0x1f8>)
 800965c:	a904      	add	r1, sp, #16
 800965e:	4638      	mov	r0, r7
 8009660:	f7fc fbca 	bl	8005df8 <_printf_i>
 8009664:	e7eb      	b.n	800963e <_svfiprintf_r+0x1c2>
 8009666:	bf00      	nop
 8009668:	0800a5ac 	.word	0x0800a5ac
 800966c:	0800a5b6 	.word	0x0800a5b6
 8009670:	080058b1 	.word	0x080058b1
 8009674:	080093c5 	.word	0x080093c5
 8009678:	0800a5b2 	.word	0x0800a5b2

0800967c <__sfputc_r>:
 800967c:	6893      	ldr	r3, [r2, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	b410      	push	{r4}
 8009684:	6093      	str	r3, [r2, #8]
 8009686:	da08      	bge.n	800969a <__sfputc_r+0x1e>
 8009688:	6994      	ldr	r4, [r2, #24]
 800968a:	42a3      	cmp	r3, r4
 800968c:	db01      	blt.n	8009692 <__sfputc_r+0x16>
 800968e:	290a      	cmp	r1, #10
 8009690:	d103      	bne.n	800969a <__sfputc_r+0x1e>
 8009692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009696:	f000 b9bb 	b.w	8009a10 <__swbuf_r>
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	1c58      	adds	r0, r3, #1
 800969e:	6010      	str	r0, [r2, #0]
 80096a0:	7019      	strb	r1, [r3, #0]
 80096a2:	4608      	mov	r0, r1
 80096a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <__sfputs_r>:
 80096aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	4614      	mov	r4, r2
 80096b2:	18d5      	adds	r5, r2, r3
 80096b4:	42ac      	cmp	r4, r5
 80096b6:	d101      	bne.n	80096bc <__sfputs_r+0x12>
 80096b8:	2000      	movs	r0, #0
 80096ba:	e007      	b.n	80096cc <__sfputs_r+0x22>
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	463a      	mov	r2, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffda 	bl	800967c <__sfputc_r>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d1f3      	bne.n	80096b4 <__sfputs_r+0xa>
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096d0 <_vfiprintf_r>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	460d      	mov	r5, r1
 80096d6:	b09d      	sub	sp, #116	; 0x74
 80096d8:	4614      	mov	r4, r2
 80096da:	4698      	mov	r8, r3
 80096dc:	4606      	mov	r6, r0
 80096de:	b118      	cbz	r0, 80096e8 <_vfiprintf_r+0x18>
 80096e0:	6983      	ldr	r3, [r0, #24]
 80096e2:	b90b      	cbnz	r3, 80096e8 <_vfiprintf_r+0x18>
 80096e4:	f7fe fc7a 	bl	8007fdc <__sinit>
 80096e8:	4b89      	ldr	r3, [pc, #548]	; (8009910 <_vfiprintf_r+0x240>)
 80096ea:	429d      	cmp	r5, r3
 80096ec:	d11b      	bne.n	8009726 <_vfiprintf_r+0x56>
 80096ee:	6875      	ldr	r5, [r6, #4]
 80096f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	d405      	bmi.n	8009702 <_vfiprintf_r+0x32>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	059a      	lsls	r2, r3, #22
 80096fa:	d402      	bmi.n	8009702 <_vfiprintf_r+0x32>
 80096fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096fe:	f7ff f87e 	bl	80087fe <__retarget_lock_acquire_recursive>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	071b      	lsls	r3, r3, #28
 8009706:	d501      	bpl.n	800970c <_vfiprintf_r+0x3c>
 8009708:	692b      	ldr	r3, [r5, #16]
 800970a:	b9eb      	cbnz	r3, 8009748 <_vfiprintf_r+0x78>
 800970c:	4629      	mov	r1, r5
 800970e:	4630      	mov	r0, r6
 8009710:	f000 f9f0 	bl	8009af4 <__swsetup_r>
 8009714:	b1c0      	cbz	r0, 8009748 <_vfiprintf_r+0x78>
 8009716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009718:	07dc      	lsls	r4, r3, #31
 800971a:	d50e      	bpl.n	800973a <_vfiprintf_r+0x6a>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	b01d      	add	sp, #116	; 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	4b7b      	ldr	r3, [pc, #492]	; (8009914 <_vfiprintf_r+0x244>)
 8009728:	429d      	cmp	r5, r3
 800972a:	d101      	bne.n	8009730 <_vfiprintf_r+0x60>
 800972c:	68b5      	ldr	r5, [r6, #8]
 800972e:	e7df      	b.n	80096f0 <_vfiprintf_r+0x20>
 8009730:	4b79      	ldr	r3, [pc, #484]	; (8009918 <_vfiprintf_r+0x248>)
 8009732:	429d      	cmp	r5, r3
 8009734:	bf08      	it	eq
 8009736:	68f5      	ldreq	r5, [r6, #12]
 8009738:	e7da      	b.n	80096f0 <_vfiprintf_r+0x20>
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	0598      	lsls	r0, r3, #22
 800973e:	d4ed      	bmi.n	800971c <_vfiprintf_r+0x4c>
 8009740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009742:	f7ff f85d 	bl	8008800 <__retarget_lock_release_recursive>
 8009746:	e7e9      	b.n	800971c <_vfiprintf_r+0x4c>
 8009748:	2300      	movs	r3, #0
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	2320      	movs	r3, #32
 800974e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009752:	f8cd 800c 	str.w	r8, [sp, #12]
 8009756:	2330      	movs	r3, #48	; 0x30
 8009758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800991c <_vfiprintf_r+0x24c>
 800975c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009760:	f04f 0901 	mov.w	r9, #1
 8009764:	4623      	mov	r3, r4
 8009766:	469a      	mov	sl, r3
 8009768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976c:	b10a      	cbz	r2, 8009772 <_vfiprintf_r+0xa2>
 800976e:	2a25      	cmp	r2, #37	; 0x25
 8009770:	d1f9      	bne.n	8009766 <_vfiprintf_r+0x96>
 8009772:	ebba 0b04 	subs.w	fp, sl, r4
 8009776:	d00b      	beq.n	8009790 <_vfiprintf_r+0xc0>
 8009778:	465b      	mov	r3, fp
 800977a:	4622      	mov	r2, r4
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f7ff ff93 	bl	80096aa <__sfputs_r>
 8009784:	3001      	adds	r0, #1
 8009786:	f000 80aa 	beq.w	80098de <_vfiprintf_r+0x20e>
 800978a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978c:	445a      	add	r2, fp
 800978e:	9209      	str	r2, [sp, #36]	; 0x24
 8009790:	f89a 3000 	ldrb.w	r3, [sl]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80a2 	beq.w	80098de <_vfiprintf_r+0x20e>
 800979a:	2300      	movs	r3, #0
 800979c:	f04f 32ff 	mov.w	r2, #4294967295
 80097a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a4:	f10a 0a01 	add.w	sl, sl, #1
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	9307      	str	r3, [sp, #28]
 80097ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097b0:	931a      	str	r3, [sp, #104]	; 0x68
 80097b2:	4654      	mov	r4, sl
 80097b4:	2205      	movs	r2, #5
 80097b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ba:	4858      	ldr	r0, [pc, #352]	; (800991c <_vfiprintf_r+0x24c>)
 80097bc:	f7f6 fd10 	bl	80001e0 <memchr>
 80097c0:	9a04      	ldr	r2, [sp, #16]
 80097c2:	b9d8      	cbnz	r0, 80097fc <_vfiprintf_r+0x12c>
 80097c4:	06d1      	lsls	r1, r2, #27
 80097c6:	bf44      	itt	mi
 80097c8:	2320      	movmi	r3, #32
 80097ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ce:	0713      	lsls	r3, r2, #28
 80097d0:	bf44      	itt	mi
 80097d2:	232b      	movmi	r3, #43	; 0x2b
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d8:	f89a 3000 	ldrb.w	r3, [sl]
 80097dc:	2b2a      	cmp	r3, #42	; 0x2a
 80097de:	d015      	beq.n	800980c <_vfiprintf_r+0x13c>
 80097e0:	9a07      	ldr	r2, [sp, #28]
 80097e2:	4654      	mov	r4, sl
 80097e4:	2000      	movs	r0, #0
 80097e6:	f04f 0c0a 	mov.w	ip, #10
 80097ea:	4621      	mov	r1, r4
 80097ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f0:	3b30      	subs	r3, #48	; 0x30
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d94e      	bls.n	8009894 <_vfiprintf_r+0x1c4>
 80097f6:	b1b0      	cbz	r0, 8009826 <_vfiprintf_r+0x156>
 80097f8:	9207      	str	r2, [sp, #28]
 80097fa:	e014      	b.n	8009826 <_vfiprintf_r+0x156>
 80097fc:	eba0 0308 	sub.w	r3, r0, r8
 8009800:	fa09 f303 	lsl.w	r3, r9, r3
 8009804:	4313      	orrs	r3, r2
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	46a2      	mov	sl, r4
 800980a:	e7d2      	b.n	80097b2 <_vfiprintf_r+0xe2>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1d19      	adds	r1, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9103      	str	r1, [sp, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	bfbb      	ittet	lt
 8009818:	425b      	neglt	r3, r3
 800981a:	f042 0202 	orrlt.w	r2, r2, #2
 800981e:	9307      	strge	r3, [sp, #28]
 8009820:	9307      	strlt	r3, [sp, #28]
 8009822:	bfb8      	it	lt
 8009824:	9204      	strlt	r2, [sp, #16]
 8009826:	7823      	ldrb	r3, [r4, #0]
 8009828:	2b2e      	cmp	r3, #46	; 0x2e
 800982a:	d10c      	bne.n	8009846 <_vfiprintf_r+0x176>
 800982c:	7863      	ldrb	r3, [r4, #1]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d135      	bne.n	800989e <_vfiprintf_r+0x1ce>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	1d1a      	adds	r2, r3, #4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	9203      	str	r2, [sp, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfb8      	it	lt
 800983e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009842:	3402      	adds	r4, #2
 8009844:	9305      	str	r3, [sp, #20]
 8009846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800992c <_vfiprintf_r+0x25c>
 800984a:	7821      	ldrb	r1, [r4, #0]
 800984c:	2203      	movs	r2, #3
 800984e:	4650      	mov	r0, sl
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	b140      	cbz	r0, 8009868 <_vfiprintf_r+0x198>
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	eba0 000a 	sub.w	r0, r0, sl
 800985c:	fa03 f000 	lsl.w	r0, r3, r0
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	4303      	orrs	r3, r0
 8009864:	3401      	adds	r4, #1
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986c:	482c      	ldr	r0, [pc, #176]	; (8009920 <_vfiprintf_r+0x250>)
 800986e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009872:	2206      	movs	r2, #6
 8009874:	f7f6 fcb4 	bl	80001e0 <memchr>
 8009878:	2800      	cmp	r0, #0
 800987a:	d03f      	beq.n	80098fc <_vfiprintf_r+0x22c>
 800987c:	4b29      	ldr	r3, [pc, #164]	; (8009924 <_vfiprintf_r+0x254>)
 800987e:	bb1b      	cbnz	r3, 80098c8 <_vfiprintf_r+0x1f8>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	3307      	adds	r3, #7
 8009884:	f023 0307 	bic.w	r3, r3, #7
 8009888:	3308      	adds	r3, #8
 800988a:	9303      	str	r3, [sp, #12]
 800988c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988e:	443b      	add	r3, r7
 8009890:	9309      	str	r3, [sp, #36]	; 0x24
 8009892:	e767      	b.n	8009764 <_vfiprintf_r+0x94>
 8009894:	fb0c 3202 	mla	r2, ip, r2, r3
 8009898:	460c      	mov	r4, r1
 800989a:	2001      	movs	r0, #1
 800989c:	e7a5      	b.n	80097ea <_vfiprintf_r+0x11a>
 800989e:	2300      	movs	r3, #0
 80098a0:	3401      	adds	r4, #1
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	4619      	mov	r1, r3
 80098a6:	f04f 0c0a 	mov.w	ip, #10
 80098aa:	4620      	mov	r0, r4
 80098ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b0:	3a30      	subs	r2, #48	; 0x30
 80098b2:	2a09      	cmp	r2, #9
 80098b4:	d903      	bls.n	80098be <_vfiprintf_r+0x1ee>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c5      	beq.n	8009846 <_vfiprintf_r+0x176>
 80098ba:	9105      	str	r1, [sp, #20]
 80098bc:	e7c3      	b.n	8009846 <_vfiprintf_r+0x176>
 80098be:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c2:	4604      	mov	r4, r0
 80098c4:	2301      	movs	r3, #1
 80098c6:	e7f0      	b.n	80098aa <_vfiprintf_r+0x1da>
 80098c8:	ab03      	add	r3, sp, #12
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	462a      	mov	r2, r5
 80098ce:	4b16      	ldr	r3, [pc, #88]	; (8009928 <_vfiprintf_r+0x258>)
 80098d0:	a904      	add	r1, sp, #16
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7fb ffec 	bl	80058b0 <_printf_float>
 80098d8:	4607      	mov	r7, r0
 80098da:	1c78      	adds	r0, r7, #1
 80098dc:	d1d6      	bne.n	800988c <_vfiprintf_r+0x1bc>
 80098de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e0:	07d9      	lsls	r1, r3, #31
 80098e2:	d405      	bmi.n	80098f0 <_vfiprintf_r+0x220>
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	059a      	lsls	r2, r3, #22
 80098e8:	d402      	bmi.n	80098f0 <_vfiprintf_r+0x220>
 80098ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ec:	f7fe ff88 	bl	8008800 <__retarget_lock_release_recursive>
 80098f0:	89ab      	ldrh	r3, [r5, #12]
 80098f2:	065b      	lsls	r3, r3, #25
 80098f4:	f53f af12 	bmi.w	800971c <_vfiprintf_r+0x4c>
 80098f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098fa:	e711      	b.n	8009720 <_vfiprintf_r+0x50>
 80098fc:	ab03      	add	r3, sp, #12
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	462a      	mov	r2, r5
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <_vfiprintf_r+0x258>)
 8009904:	a904      	add	r1, sp, #16
 8009906:	4630      	mov	r0, r6
 8009908:	f7fc fa76 	bl	8005df8 <_printf_i>
 800990c:	e7e4      	b.n	80098d8 <_vfiprintf_r+0x208>
 800990e:	bf00      	nop
 8009910:	0800a394 	.word	0x0800a394
 8009914:	0800a3b4 	.word	0x0800a3b4
 8009918:	0800a374 	.word	0x0800a374
 800991c:	0800a5ac 	.word	0x0800a5ac
 8009920:	0800a5b6 	.word	0x0800a5b6
 8009924:	080058b1 	.word	0x080058b1
 8009928:	080096ab 	.word	0x080096ab
 800992c:	0800a5b2 	.word	0x0800a5b2

08009930 <nan>:
 8009930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009938 <nan+0x8>
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	00000000 	.word	0x00000000
 800993c:	7ff80000 	.word	0x7ff80000

08009940 <_sbrk_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d06      	ldr	r5, [pc, #24]	; (800995c <_sbrk_r+0x1c>)
 8009944:	2300      	movs	r3, #0
 8009946:	4604      	mov	r4, r0
 8009948:	4608      	mov	r0, r1
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	f7f8 fb94 	bl	8002078 <_sbrk>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_sbrk_r+0x1a>
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	b103      	cbz	r3, 800995a <_sbrk_r+0x1a>
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	20000328 	.word	0x20000328

08009960 <__sread>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	f000 fb02 	bl	8009f70 <_read_r>
 800996c:	2800      	cmp	r0, #0
 800996e:	bfab      	itete	ge
 8009970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009972:	89a3      	ldrhlt	r3, [r4, #12]
 8009974:	181b      	addge	r3, r3, r0
 8009976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800997a:	bfac      	ite	ge
 800997c:	6563      	strge	r3, [r4, #84]	; 0x54
 800997e:	81a3      	strhlt	r3, [r4, #12]
 8009980:	bd10      	pop	{r4, pc}

08009982 <__swrite>:
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	461f      	mov	r7, r3
 8009988:	898b      	ldrh	r3, [r1, #12]
 800998a:	05db      	lsls	r3, r3, #23
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4616      	mov	r6, r2
 8009992:	d505      	bpl.n	80099a0 <__swrite+0x1e>
 8009994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009998:	2302      	movs	r3, #2
 800999a:	2200      	movs	r2, #0
 800999c:	f000 fa1a 	bl	8009dd4 <_lseek_r>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	4632      	mov	r2, r6
 80099ae:	463b      	mov	r3, r7
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	f000 b88b 	b.w	8009ad0 <_write_r>

080099ba <__sseek>:
 80099ba:	b510      	push	{r4, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 fa07 	bl	8009dd4 <_lseek_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	bf15      	itete	ne
 80099cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strheq	r3, [r4, #12]
 80099d8:	bf18      	it	ne
 80099da:	81a3      	strhne	r3, [r4, #12]
 80099dc:	bd10      	pop	{r4, pc}

080099de <__sclose>:
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 b913 	b.w	8009c0c <_close_r>

080099e6 <strncmp>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	b17a      	cbz	r2, 8009a0a <strncmp+0x24>
 80099ea:	4603      	mov	r3, r0
 80099ec:	3901      	subs	r1, #1
 80099ee:	1884      	adds	r4, r0, r2
 80099f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80099f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80099f8:	4290      	cmp	r0, r2
 80099fa:	d101      	bne.n	8009a00 <strncmp+0x1a>
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	d101      	bne.n	8009a04 <strncmp+0x1e>
 8009a00:	1a80      	subs	r0, r0, r2
 8009a02:	bd10      	pop	{r4, pc}
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1f3      	bne.n	80099f0 <strncmp+0xa>
 8009a08:	e7fa      	b.n	8009a00 <strncmp+0x1a>
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	e7f9      	b.n	8009a02 <strncmp+0x1c>
	...

08009a10 <__swbuf_r>:
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a12:	460e      	mov	r6, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	4605      	mov	r5, r0
 8009a18:	b118      	cbz	r0, 8009a22 <__swbuf_r+0x12>
 8009a1a:	6983      	ldr	r3, [r0, #24]
 8009a1c:	b90b      	cbnz	r3, 8009a22 <__swbuf_r+0x12>
 8009a1e:	f7fe fadd 	bl	8007fdc <__sinit>
 8009a22:	4b21      	ldr	r3, [pc, #132]	; (8009aa8 <__swbuf_r+0x98>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d12b      	bne.n	8009a80 <__swbuf_r+0x70>
 8009a28:	686c      	ldr	r4, [r5, #4]
 8009a2a:	69a3      	ldr	r3, [r4, #24]
 8009a2c:	60a3      	str	r3, [r4, #8]
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	071a      	lsls	r2, r3, #28
 8009a32:	d52f      	bpl.n	8009a94 <__swbuf_r+0x84>
 8009a34:	6923      	ldr	r3, [r4, #16]
 8009a36:	b36b      	cbz	r3, 8009a94 <__swbuf_r+0x84>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	1ac0      	subs	r0, r0, r3
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	b2f6      	uxtb	r6, r6
 8009a42:	4283      	cmp	r3, r0
 8009a44:	4637      	mov	r7, r6
 8009a46:	dc04      	bgt.n	8009a52 <__swbuf_r+0x42>
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f974 	bl	8009d38 <_fflush_r>
 8009a50:	bb30      	cbnz	r0, 8009aa0 <__swbuf_r+0x90>
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	60a3      	str	r3, [r4, #8]
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	1c5a      	adds	r2, r3, #1
 8009a5c:	6022      	str	r2, [r4, #0]
 8009a5e:	701e      	strb	r6, [r3, #0]
 8009a60:	6963      	ldr	r3, [r4, #20]
 8009a62:	3001      	adds	r0, #1
 8009a64:	4283      	cmp	r3, r0
 8009a66:	d004      	beq.n	8009a72 <__swbuf_r+0x62>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	07db      	lsls	r3, r3, #31
 8009a6c:	d506      	bpl.n	8009a7c <__swbuf_r+0x6c>
 8009a6e:	2e0a      	cmp	r6, #10
 8009a70:	d104      	bne.n	8009a7c <__swbuf_r+0x6c>
 8009a72:	4621      	mov	r1, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 f95f 	bl	8009d38 <_fflush_r>
 8009a7a:	b988      	cbnz	r0, 8009aa0 <__swbuf_r+0x90>
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <__swbuf_r+0x9c>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d101      	bne.n	8009a8a <__swbuf_r+0x7a>
 8009a86:	68ac      	ldr	r4, [r5, #8]
 8009a88:	e7cf      	b.n	8009a2a <__swbuf_r+0x1a>
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <__swbuf_r+0xa0>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	bf08      	it	eq
 8009a90:	68ec      	ldreq	r4, [r5, #12]
 8009a92:	e7ca      	b.n	8009a2a <__swbuf_r+0x1a>
 8009a94:	4621      	mov	r1, r4
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f82c 	bl	8009af4 <__swsetup_r>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d0cb      	beq.n	8009a38 <__swbuf_r+0x28>
 8009aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8009aa4:	e7ea      	b.n	8009a7c <__swbuf_r+0x6c>
 8009aa6:	bf00      	nop
 8009aa8:	0800a394 	.word	0x0800a394
 8009aac:	0800a3b4 	.word	0x0800a3b4
 8009ab0:	0800a374 	.word	0x0800a374

08009ab4 <__ascii_wctomb>:
 8009ab4:	b149      	cbz	r1, 8009aca <__ascii_wctomb+0x16>
 8009ab6:	2aff      	cmp	r2, #255	; 0xff
 8009ab8:	bf85      	ittet	hi
 8009aba:	238a      	movhi	r3, #138	; 0x8a
 8009abc:	6003      	strhi	r3, [r0, #0]
 8009abe:	700a      	strbls	r2, [r1, #0]
 8009ac0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ac4:	bf98      	it	ls
 8009ac6:	2001      	movls	r0, #1
 8009ac8:	4770      	bx	lr
 8009aca:	4608      	mov	r0, r1
 8009acc:	4770      	bx	lr
	...

08009ad0 <_write_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	; (8009af0 <_write_r+0x20>)
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4608      	mov	r0, r1
 8009ad8:	4611      	mov	r1, r2
 8009ada:	2200      	movs	r2, #0
 8009adc:	602a      	str	r2, [r5, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f7f8 f8be 	bl	8001c60 <_write>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_write_r+0x1e>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_write_r+0x1e>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	20000328 	.word	0x20000328

08009af4 <__swsetup_r>:
 8009af4:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <__swsetup_r+0xcc>)
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	681d      	ldr	r5, [r3, #0]
 8009afa:	4606      	mov	r6, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	b125      	cbz	r5, 8009b0a <__swsetup_r+0x16>
 8009b00:	69ab      	ldr	r3, [r5, #24]
 8009b02:	b913      	cbnz	r3, 8009b0a <__swsetup_r+0x16>
 8009b04:	4628      	mov	r0, r5
 8009b06:	f7fe fa69 	bl	8007fdc <__sinit>
 8009b0a:	4b2e      	ldr	r3, [pc, #184]	; (8009bc4 <__swsetup_r+0xd0>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	d10f      	bne.n	8009b30 <__swsetup_r+0x3c>
 8009b10:	686c      	ldr	r4, [r5, #4]
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b18:	0719      	lsls	r1, r3, #28
 8009b1a:	d42c      	bmi.n	8009b76 <__swsetup_r+0x82>
 8009b1c:	06dd      	lsls	r5, r3, #27
 8009b1e:	d411      	bmi.n	8009b44 <__swsetup_r+0x50>
 8009b20:	2309      	movs	r3, #9
 8009b22:	6033      	str	r3, [r6, #0]
 8009b24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2e:	e03e      	b.n	8009bae <__swsetup_r+0xba>
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <__swsetup_r+0xd4>)
 8009b32:	429c      	cmp	r4, r3
 8009b34:	d101      	bne.n	8009b3a <__swsetup_r+0x46>
 8009b36:	68ac      	ldr	r4, [r5, #8]
 8009b38:	e7eb      	b.n	8009b12 <__swsetup_r+0x1e>
 8009b3a:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <__swsetup_r+0xd8>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	bf08      	it	eq
 8009b40:	68ec      	ldreq	r4, [r5, #12]
 8009b42:	e7e6      	b.n	8009b12 <__swsetup_r+0x1e>
 8009b44:	0758      	lsls	r0, r3, #29
 8009b46:	d512      	bpl.n	8009b6e <__swsetup_r+0x7a>
 8009b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4a:	b141      	cbz	r1, 8009b5e <__swsetup_r+0x6a>
 8009b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b50:	4299      	cmp	r1, r3
 8009b52:	d002      	beq.n	8009b5a <__swsetup_r+0x66>
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff fb55 	bl	8009204 <_free_r>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	2300      	movs	r3, #0
 8009b68:	6063      	str	r3, [r4, #4]
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	f043 0308 	orr.w	r3, r3, #8
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	b94b      	cbnz	r3, 8009b8e <__swsetup_r+0x9a>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b84:	d003      	beq.n	8009b8e <__swsetup_r+0x9a>
 8009b86:	4621      	mov	r1, r4
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 f95b 	bl	8009e44 <__smakebuf_r>
 8009b8e:	89a0      	ldrh	r0, [r4, #12]
 8009b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b94:	f010 0301 	ands.w	r3, r0, #1
 8009b98:	d00a      	beq.n	8009bb0 <__swsetup_r+0xbc>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	6963      	ldr	r3, [r4, #20]
 8009ba0:	425b      	negs	r3, r3
 8009ba2:	61a3      	str	r3, [r4, #24]
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	b943      	cbnz	r3, 8009bba <__swsetup_r+0xc6>
 8009ba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bac:	d1ba      	bne.n	8009b24 <__swsetup_r+0x30>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	0781      	lsls	r1, r0, #30
 8009bb2:	bf58      	it	pl
 8009bb4:	6963      	ldrpl	r3, [r4, #20]
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	e7f4      	b.n	8009ba4 <__swsetup_r+0xb0>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e7f7      	b.n	8009bae <__swsetup_r+0xba>
 8009bbe:	bf00      	nop
 8009bc0:	2000000c 	.word	0x2000000c
 8009bc4:	0800a394 	.word	0x0800a394
 8009bc8:	0800a3b4 	.word	0x0800a3b4
 8009bcc:	0800a374 	.word	0x0800a374

08009bd0 <__assert_func>:
 8009bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <__assert_func+0x2c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	68d8      	ldr	r0, [r3, #12]
 8009bde:	b14c      	cbz	r4, 8009bf4 <__assert_func+0x24>
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <__assert_func+0x30>)
 8009be2:	9100      	str	r1, [sp, #0]
 8009be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009be8:	4906      	ldr	r1, [pc, #24]	; (8009c04 <__assert_func+0x34>)
 8009bea:	462b      	mov	r3, r5
 8009bec:	f000 f8e0 	bl	8009db0 <fiprintf>
 8009bf0:	f000 f9d0 	bl	8009f94 <abort>
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <__assert_func+0x38>)
 8009bf6:	461c      	mov	r4, r3
 8009bf8:	e7f3      	b.n	8009be2 <__assert_func+0x12>
 8009bfa:	bf00      	nop
 8009bfc:	2000000c 	.word	0x2000000c
 8009c00:	0800a5bd 	.word	0x0800a5bd
 8009c04:	0800a5ca 	.word	0x0800a5ca
 8009c08:	0800a5f8 	.word	0x0800a5f8

08009c0c <_close_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	; (8009c28 <_close_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 f9f9 	bl	800200e <_close>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_close_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_close_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20000328 	.word	0x20000328

08009c2c <__sflush_r>:
 8009c2c:	898a      	ldrh	r2, [r1, #12]
 8009c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c32:	4605      	mov	r5, r0
 8009c34:	0710      	lsls	r0, r2, #28
 8009c36:	460c      	mov	r4, r1
 8009c38:	d458      	bmi.n	8009cec <__sflush_r+0xc0>
 8009c3a:	684b      	ldr	r3, [r1, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dc05      	bgt.n	8009c4c <__sflush_r+0x20>
 8009c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc02      	bgt.n	8009c4c <__sflush_r+0x20>
 8009c46:	2000      	movs	r0, #0
 8009c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c4e:	2e00      	cmp	r6, #0
 8009c50:	d0f9      	beq.n	8009c46 <__sflush_r+0x1a>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c58:	682f      	ldr	r7, [r5, #0]
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	d032      	beq.n	8009cc4 <__sflush_r+0x98>
 8009c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	075a      	lsls	r2, r3, #29
 8009c64:	d505      	bpl.n	8009c72 <__sflush_r+0x46>
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	1ac0      	subs	r0, r0, r3
 8009c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c6c:	b10b      	cbz	r3, 8009c72 <__sflush_r+0x46>
 8009c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c70:	1ac0      	subs	r0, r0, r3
 8009c72:	2300      	movs	r3, #0
 8009c74:	4602      	mov	r2, r0
 8009c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c78:	6a21      	ldr	r1, [r4, #32]
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b0      	blx	r6
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	d106      	bne.n	8009c92 <__sflush_r+0x66>
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	291d      	cmp	r1, #29
 8009c88:	d82c      	bhi.n	8009ce4 <__sflush_r+0xb8>
 8009c8a:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <__sflush_r+0x108>)
 8009c8c:	40ca      	lsrs	r2, r1
 8009c8e:	07d6      	lsls	r6, r2, #31
 8009c90:	d528      	bpl.n	8009ce4 <__sflush_r+0xb8>
 8009c92:	2200      	movs	r2, #0
 8009c94:	6062      	str	r2, [r4, #4]
 8009c96:	04d9      	lsls	r1, r3, #19
 8009c98:	6922      	ldr	r2, [r4, #16]
 8009c9a:	6022      	str	r2, [r4, #0]
 8009c9c:	d504      	bpl.n	8009ca8 <__sflush_r+0x7c>
 8009c9e:	1c42      	adds	r2, r0, #1
 8009ca0:	d101      	bne.n	8009ca6 <__sflush_r+0x7a>
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	b903      	cbnz	r3, 8009ca8 <__sflush_r+0x7c>
 8009ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009caa:	602f      	str	r7, [r5, #0]
 8009cac:	2900      	cmp	r1, #0
 8009cae:	d0ca      	beq.n	8009c46 <__sflush_r+0x1a>
 8009cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	d002      	beq.n	8009cbe <__sflush_r+0x92>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f7ff faa3 	bl	8009204 <_free_r>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8009cc2:	e7c1      	b.n	8009c48 <__sflush_r+0x1c>
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b0      	blx	r6
 8009ccc:	1c41      	adds	r1, r0, #1
 8009cce:	d1c7      	bne.n	8009c60 <__sflush_r+0x34>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0c4      	beq.n	8009c60 <__sflush_r+0x34>
 8009cd6:	2b1d      	cmp	r3, #29
 8009cd8:	d001      	beq.n	8009cde <__sflush_r+0xb2>
 8009cda:	2b16      	cmp	r3, #22
 8009cdc:	d101      	bne.n	8009ce2 <__sflush_r+0xb6>
 8009cde:	602f      	str	r7, [r5, #0]
 8009ce0:	e7b1      	b.n	8009c46 <__sflush_r+0x1a>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	e7ad      	b.n	8009c48 <__sflush_r+0x1c>
 8009cec:	690f      	ldr	r7, [r1, #16]
 8009cee:	2f00      	cmp	r7, #0
 8009cf0:	d0a9      	beq.n	8009c46 <__sflush_r+0x1a>
 8009cf2:	0793      	lsls	r3, r2, #30
 8009cf4:	680e      	ldr	r6, [r1, #0]
 8009cf6:	bf08      	it	eq
 8009cf8:	694b      	ldreq	r3, [r1, #20]
 8009cfa:	600f      	str	r7, [r1, #0]
 8009cfc:	bf18      	it	ne
 8009cfe:	2300      	movne	r3, #0
 8009d00:	eba6 0807 	sub.w	r8, r6, r7
 8009d04:	608b      	str	r3, [r1, #8]
 8009d06:	f1b8 0f00 	cmp.w	r8, #0
 8009d0a:	dd9c      	ble.n	8009c46 <__sflush_r+0x1a>
 8009d0c:	6a21      	ldr	r1, [r4, #32]
 8009d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d10:	4643      	mov	r3, r8
 8009d12:	463a      	mov	r2, r7
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b0      	blx	r6
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	dc06      	bgt.n	8009d2a <__sflush_r+0xfe>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	e78e      	b.n	8009c48 <__sflush_r+0x1c>
 8009d2a:	4407      	add	r7, r0
 8009d2c:	eba8 0800 	sub.w	r8, r8, r0
 8009d30:	e7e9      	b.n	8009d06 <__sflush_r+0xda>
 8009d32:	bf00      	nop
 8009d34:	20400001 	.word	0x20400001

08009d38 <_fflush_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	690b      	ldr	r3, [r1, #16]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	b913      	cbnz	r3, 8009d48 <_fflush_r+0x10>
 8009d42:	2500      	movs	r5, #0
 8009d44:	4628      	mov	r0, r5
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	b118      	cbz	r0, 8009d52 <_fflush_r+0x1a>
 8009d4a:	6983      	ldr	r3, [r0, #24]
 8009d4c:	b90b      	cbnz	r3, 8009d52 <_fflush_r+0x1a>
 8009d4e:	f7fe f945 	bl	8007fdc <__sinit>
 8009d52:	4b14      	ldr	r3, [pc, #80]	; (8009da4 <_fflush_r+0x6c>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	d11b      	bne.n	8009d90 <_fflush_r+0x58>
 8009d58:	686c      	ldr	r4, [r5, #4]
 8009d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0ef      	beq.n	8009d42 <_fflush_r+0xa>
 8009d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d64:	07d0      	lsls	r0, r2, #31
 8009d66:	d404      	bmi.n	8009d72 <_fflush_r+0x3a>
 8009d68:	0599      	lsls	r1, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_fflush_r+0x3a>
 8009d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6e:	f7fe fd46 	bl	80087fe <__retarget_lock_acquire_recursive>
 8009d72:	4628      	mov	r0, r5
 8009d74:	4621      	mov	r1, r4
 8009d76:	f7ff ff59 	bl	8009c2c <__sflush_r>
 8009d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d7c:	07da      	lsls	r2, r3, #31
 8009d7e:	4605      	mov	r5, r0
 8009d80:	d4e0      	bmi.n	8009d44 <_fflush_r+0xc>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	059b      	lsls	r3, r3, #22
 8009d86:	d4dd      	bmi.n	8009d44 <_fflush_r+0xc>
 8009d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8a:	f7fe fd39 	bl	8008800 <__retarget_lock_release_recursive>
 8009d8e:	e7d9      	b.n	8009d44 <_fflush_r+0xc>
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <_fflush_r+0x70>)
 8009d92:	429c      	cmp	r4, r3
 8009d94:	d101      	bne.n	8009d9a <_fflush_r+0x62>
 8009d96:	68ac      	ldr	r4, [r5, #8]
 8009d98:	e7df      	b.n	8009d5a <_fflush_r+0x22>
 8009d9a:	4b04      	ldr	r3, [pc, #16]	; (8009dac <_fflush_r+0x74>)
 8009d9c:	429c      	cmp	r4, r3
 8009d9e:	bf08      	it	eq
 8009da0:	68ec      	ldreq	r4, [r5, #12]
 8009da2:	e7da      	b.n	8009d5a <_fflush_r+0x22>
 8009da4:	0800a394 	.word	0x0800a394
 8009da8:	0800a3b4 	.word	0x0800a3b4
 8009dac:	0800a374 	.word	0x0800a374

08009db0 <fiprintf>:
 8009db0:	b40e      	push	{r1, r2, r3}
 8009db2:	b503      	push	{r0, r1, lr}
 8009db4:	4601      	mov	r1, r0
 8009db6:	ab03      	add	r3, sp, #12
 8009db8:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <fiprintf+0x20>)
 8009dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dbe:	6800      	ldr	r0, [r0, #0]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f7ff fc85 	bl	80096d0 <_vfiprintf_r>
 8009dc6:	b002      	add	sp, #8
 8009dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dcc:	b003      	add	sp, #12
 8009dce:	4770      	bx	lr
 8009dd0:	2000000c 	.word	0x2000000c

08009dd4 <_lseek_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	; (8009df4 <_lseek_r+0x20>)
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4611      	mov	r1, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f7f8 f93a 	bl	800205c <_lseek>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_lseek_r+0x1e>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_lseek_r+0x1e>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20000328 	.word	0x20000328

08009df8 <__swhatbuf_r>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	460e      	mov	r6, r1
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	2900      	cmp	r1, #0
 8009e02:	b096      	sub	sp, #88	; 0x58
 8009e04:	4614      	mov	r4, r2
 8009e06:	461d      	mov	r5, r3
 8009e08:	da08      	bge.n	8009e1c <__swhatbuf_r+0x24>
 8009e0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	061a      	lsls	r2, r3, #24
 8009e14:	d410      	bmi.n	8009e38 <__swhatbuf_r+0x40>
 8009e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e1a:	e00e      	b.n	8009e3a <__swhatbuf_r+0x42>
 8009e1c:	466a      	mov	r2, sp
 8009e1e:	f000 f8c1 	bl	8009fa4 <_fstat_r>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	dbf1      	blt.n	8009e0a <__swhatbuf_r+0x12>
 8009e26:	9a01      	ldr	r2, [sp, #4]
 8009e28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e30:	425a      	negs	r2, r3
 8009e32:	415a      	adcs	r2, r3
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	e7ee      	b.n	8009e16 <__swhatbuf_r+0x1e>
 8009e38:	2340      	movs	r3, #64	; 0x40
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	b016      	add	sp, #88	; 0x58
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e44 <__smakebuf_r>:
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e48:	079d      	lsls	r5, r3, #30
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	d507      	bpl.n	8009e60 <__smakebuf_r+0x1c>
 8009e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	2301      	movs	r3, #1
 8009e5a:	6163      	str	r3, [r4, #20]
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	ab01      	add	r3, sp, #4
 8009e62:	466a      	mov	r2, sp
 8009e64:	f7ff ffc8 	bl	8009df8 <__swhatbuf_r>
 8009e68:	9900      	ldr	r1, [sp, #0]
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7ff fa35 	bl	80092dc <_malloc_r>
 8009e72:	b948      	cbnz	r0, 8009e88 <__smakebuf_r+0x44>
 8009e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e78:	059a      	lsls	r2, r3, #22
 8009e7a:	d4ef      	bmi.n	8009e5c <__smakebuf_r+0x18>
 8009e7c:	f023 0303 	bic.w	r3, r3, #3
 8009e80:	f043 0302 	orr.w	r3, r3, #2
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	e7e3      	b.n	8009e50 <__smakebuf_r+0xc>
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <__smakebuf_r+0x7c>)
 8009e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	6020      	str	r0, [r4, #0]
 8009e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	9b00      	ldr	r3, [sp, #0]
 8009e98:	6163      	str	r3, [r4, #20]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	6120      	str	r0, [r4, #16]
 8009e9e:	b15b      	cbz	r3, 8009eb8 <__smakebuf_r+0x74>
 8009ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f000 f88f 	bl	8009fc8 <_isatty_r>
 8009eaa:	b128      	cbz	r0, 8009eb8 <__smakebuf_r+0x74>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	81a3      	strh	r3, [r4, #12]
 8009eb8:	89a0      	ldrh	r0, [r4, #12]
 8009eba:	4305      	orrs	r5, r0
 8009ebc:	81a5      	strh	r5, [r4, #12]
 8009ebe:	e7cd      	b.n	8009e5c <__smakebuf_r+0x18>
 8009ec0:	08007f75 	.word	0x08007f75

08009ec4 <memmove>:
 8009ec4:	4288      	cmp	r0, r1
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	eb01 0402 	add.w	r4, r1, r2
 8009ecc:	d902      	bls.n	8009ed4 <memmove+0x10>
 8009ece:	4284      	cmp	r4, r0
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	d807      	bhi.n	8009ee4 <memmove+0x20>
 8009ed4:	1e43      	subs	r3, r0, #1
 8009ed6:	42a1      	cmp	r1, r4
 8009ed8:	d008      	beq.n	8009eec <memmove+0x28>
 8009eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee2:	e7f8      	b.n	8009ed6 <memmove+0x12>
 8009ee4:	4402      	add	r2, r0
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	d100      	bne.n	8009eee <memmove+0x2a>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ef6:	e7f7      	b.n	8009ee8 <memmove+0x24>

08009ef8 <__malloc_lock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_lock+0x8>)
 8009efa:	f7fe bc80 	b.w	80087fe <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	2000031c 	.word	0x2000031c

08009f04 <__malloc_unlock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_unlock+0x8>)
 8009f06:	f7fe bc7b 	b.w	8008800 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	2000031c 	.word	0x2000031c

08009f10 <_realloc_r>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	4680      	mov	r8, r0
 8009f16:	4614      	mov	r4, r2
 8009f18:	460e      	mov	r6, r1
 8009f1a:	b921      	cbnz	r1, 8009f26 <_realloc_r+0x16>
 8009f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f20:	4611      	mov	r1, r2
 8009f22:	f7ff b9db 	b.w	80092dc <_malloc_r>
 8009f26:	b92a      	cbnz	r2, 8009f34 <_realloc_r+0x24>
 8009f28:	f7ff f96c 	bl	8009204 <_free_r>
 8009f2c:	4625      	mov	r5, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f34:	f000 f858 	bl	8009fe8 <_malloc_usable_size_r>
 8009f38:	4284      	cmp	r4, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	d802      	bhi.n	8009f44 <_realloc_r+0x34>
 8009f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f42:	d812      	bhi.n	8009f6a <_realloc_r+0x5a>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4640      	mov	r0, r8
 8009f48:	f7ff f9c8 	bl	80092dc <_malloc_r>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d0ed      	beq.n	8009f2e <_realloc_r+0x1e>
 8009f52:	42bc      	cmp	r4, r7
 8009f54:	4622      	mov	r2, r4
 8009f56:	4631      	mov	r1, r6
 8009f58:	bf28      	it	cs
 8009f5a:	463a      	movcs	r2, r7
 8009f5c:	f7fe fc6c 	bl	8008838 <memcpy>
 8009f60:	4631      	mov	r1, r6
 8009f62:	4640      	mov	r0, r8
 8009f64:	f7ff f94e 	bl	8009204 <_free_r>
 8009f68:	e7e1      	b.n	8009f2e <_realloc_r+0x1e>
 8009f6a:	4635      	mov	r5, r6
 8009f6c:	e7df      	b.n	8009f2e <_realloc_r+0x1e>
	...

08009f70 <_read_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	4d07      	ldr	r5, [pc, #28]	; (8009f90 <_read_r+0x20>)
 8009f74:	4604      	mov	r4, r0
 8009f76:	4608      	mov	r0, r1
 8009f78:	4611      	mov	r1, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	602a      	str	r2, [r5, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	f7f8 f828 	bl	8001fd4 <_read>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_read_r+0x1e>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_read_r+0x1e>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20000328 	.word	0x20000328

08009f94 <abort>:
 8009f94:	b508      	push	{r3, lr}
 8009f96:	2006      	movs	r0, #6
 8009f98:	f000 f856 	bl	800a048 <raise>
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f7f8 f80f 	bl	8001fc0 <_exit>
	...

08009fa4 <_fstat_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_fstat_r+0x20>)
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4604      	mov	r4, r0
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	f7f8 f838 	bl	8002026 <_fstat>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d102      	bne.n	8009fc0 <_fstat_r+0x1c>
 8009fba:	682b      	ldr	r3, [r5, #0]
 8009fbc:	b103      	cbz	r3, 8009fc0 <_fstat_r+0x1c>
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	bd38      	pop	{r3, r4, r5, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000328 	.word	0x20000328

08009fc8 <_isatty_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	; (8009fe4 <_isatty_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7f8 f837 	bl	8002046 <_isatty>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_isatty_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_isatty_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	20000328 	.word	0x20000328

08009fe8 <_malloc_usable_size_r>:
 8009fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fec:	1f18      	subs	r0, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfbc      	itt	lt
 8009ff2:	580b      	ldrlt	r3, [r1, r0]
 8009ff4:	18c0      	addlt	r0, r0, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_raise_r>:
 8009ff8:	291f      	cmp	r1, #31
 8009ffa:	b538      	push	{r3, r4, r5, lr}
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	460d      	mov	r5, r1
 800a000:	d904      	bls.n	800a00c <_raise_r+0x14>
 800a002:	2316      	movs	r3, #22
 800a004:	6003      	str	r3, [r0, #0]
 800a006:	f04f 30ff 	mov.w	r0, #4294967295
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a00e:	b112      	cbz	r2, 800a016 <_raise_r+0x1e>
 800a010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a014:	b94b      	cbnz	r3, 800a02a <_raise_r+0x32>
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f830 	bl	800a07c <_getpid_r>
 800a01c:	462a      	mov	r2, r5
 800a01e:	4601      	mov	r1, r0
 800a020:	4620      	mov	r0, r4
 800a022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a026:	f000 b817 	b.w	800a058 <_kill_r>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d00a      	beq.n	800a044 <_raise_r+0x4c>
 800a02e:	1c59      	adds	r1, r3, #1
 800a030:	d103      	bne.n	800a03a <_raise_r+0x42>
 800a032:	2316      	movs	r3, #22
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	2001      	movs	r0, #1
 800a038:	e7e7      	b.n	800a00a <_raise_r+0x12>
 800a03a:	2400      	movs	r4, #0
 800a03c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a040:	4628      	mov	r0, r5
 800a042:	4798      	blx	r3
 800a044:	2000      	movs	r0, #0
 800a046:	e7e0      	b.n	800a00a <_raise_r+0x12>

0800a048 <raise>:
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <raise+0xc>)
 800a04a:	4601      	mov	r1, r0
 800a04c:	6818      	ldr	r0, [r3, #0]
 800a04e:	f7ff bfd3 	b.w	8009ff8 <_raise_r>
 800a052:	bf00      	nop
 800a054:	2000000c 	.word	0x2000000c

0800a058 <_kill_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d07      	ldr	r5, [pc, #28]	; (800a078 <_kill_r+0x20>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	4611      	mov	r1, r2
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	f7f7 ff9b 	bl	8001fa0 <_kill>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d102      	bne.n	800a074 <_kill_r+0x1c>
 800a06e:	682b      	ldr	r3, [r5, #0]
 800a070:	b103      	cbz	r3, 800a074 <_kill_r+0x1c>
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	bd38      	pop	{r3, r4, r5, pc}
 800a076:	bf00      	nop
 800a078:	20000328 	.word	0x20000328

0800a07c <_getpid_r>:
 800a07c:	f7f7 bf88 	b.w	8001f90 <_getpid>

0800a080 <_init>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	bf00      	nop
 800a084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a086:	bc08      	pop	{r3}
 800a088:	469e      	mov	lr, r3
 800a08a:	4770      	bx	lr

0800a08c <_fini>:
 800a08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08e:	bf00      	nop
 800a090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a092:	bc08      	pop	{r3}
 800a094:	469e      	mov	lr, r3
 800a096:	4770      	bx	lr
